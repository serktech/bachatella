/******/
(function (modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/ 		// Check if module is in cache
        /******/
        if (installedModules[moduleId]) {
            /******/
            return installedModules[moduleId].exports;
            /******/
        }
        /******/ 		// Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/            i: moduleId,
            /******/            l: false,
            /******/            exports: {}
            /******/
        };
        /******/
        /******/ 		// Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Flag the module as loaded
        /******/
        module.l = true;
        /******/
        /******/ 		// Return the exports of the module
        /******/
        return module.exports;
        /******/
    }

    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/
    __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
            /******/
            Object.defineProperty(exports, name, {
                /******/                configurable: false,
                /******/                enumerable: true,
                /******/                get: getter
                /******/
            });
            /******/
        }
        /******/
    };
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
            /******/            function getDefault() {
                return module['default'];
            } :
            /******/            function getModuleExports() {
                return module;
            };
        /******/
        __webpack_require__.d(getter, 'a', getter);
        /******/
        return getter;
        /******/
    };
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ 	// __webpack_public_path__
    /******/
    __webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 1);
    /******/
})
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function (module, exports) {

        module.exports = jQuery;

        /***/
    }),
    /* 1 */
    /***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(2);


        /***/
    }),
    /* 2 */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _jquery = __webpack_require__(0);

        var _jquery2 = _interopRequireDefault(_jquery);

        var _whatInput = __webpack_require__(3);

        var _whatInput2 = _interopRequireDefault(_whatInput);

        var _foundationSites = __webpack_require__(4);

        var _foundationSites2 = _interopRequireDefault(_foundationSites);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        window.$ = _jquery2.default;

// If you want to pick and choose which modules to include, comment out the above and uncomment
// the line below
//import './lib/foundation-explicit-pieces';

        (0, _jquery2.default)(document).foundation();

        (0, _jquery2.default)(function () {
            var topBarItems = (0, _jquery2.default)('.desktop-menu a');

            topBarItems.each(function (index, element) {
                var currentElText = element.text + '.';
                (0, _jquery2.default)(this).text(currentElText);
            });

            var phormatikTitles = (0, _jquery2.default)('.phormatik-title');

            phormatikTitles.each(function (index, element) {
                var $this = (0, _jquery2.default)(this);
                var currentElText = $this.text();
                // wrap everything
                if ($this.hasClass('irregular')) {
                    $this.wrap('<div class="phormatik-title-wrapper irregular"></div>');
                } else if ($this.hasClass('colored')) {
                    $this.wrap('<div class="phormatik-title-wrapper colored"></div>');
                } else if ($this.hasClass('single-title')) {
                    $this.wrap('<div class="phormatik-title-wrapper single"></div>');
                } else {
                    $this.wrap('<div class="phormatik-title-wrapper"></div>');
                }
                // top labels
                $this.before('<div class="black-bck top-mirror-upper"><span>' + currentElText + '</span></div><div class="black-bck top-mirror-lower"><span>' + currentElText + '</span></div>');
                // bottom labels
                $this.after('<div class="black-bck bottom-mirror-upper"><span>' + currentElText + '</span></div><div class="black-bck bottom-mirror-lower"><span>' + currentElText + '</span></div>');
                // black background
                $this.wrap('<div class="black-bck middle"></div>');
            });

            var phormatikGradientTitles = (0, _jquery2.default)('.is-style-phormatik-gradient');

            phormatikGradientTitles.each(function (index, element) {
                var $this = (0, _jquery2.default)(this);
                $this.wrap('<div class="phormatik-gradient-wrapper"></div>');
            });

            // $('.about-video-text').click(function(){

            //     $('.about-video-modal, .about-video-modal-overlay').addClass('active');
            //     let homeVideoSrc = $('.about-video-wrapper iframe').attr('src');
            //     let modalVideo = $('.about-video-modal iframe');
            //     if (modalVideo.attr('src') === '') {
            //         modalVideo.attr('src', homeVideoSrc.split('?')[0]);
            //     }
            //     else {
            //         // nothing
            //     }

            // })
            // $('.about-video-modal .close').click(function(){
            //     $('.about-video-modal, .about-video-modal-overlay').removeClass('active');
            // })

            // $('.showreel-link').wrap('<div class="showreel-link-wrapper"></div>');
            (0, _jquery2.default)('.showreel-video-outer').append(' <div class="showreel-video-modal"><a class="close" href="javascript:;">&#10005</a><iframe src="https://player.vimeo.com/video/430554326?quality=1080p" allow="autoplay; fullscreen" allowfullscreen></iframe></div>');
            (0, _jquery2.default)('.showreel-link').click(function () {
                (0, _jquery2.default)('.showreel-video-modal').addClass('active');
            });
            (0, _jquery2.default)('.showreel-video-modal .close').click(function () {
                // console.log( $('.showreel-video-modal iframe'));
                (0, _jquery2.default)('.showreel-video-modal iframe').attr('src', (0, _jquery2.default)('.showreel-video-modal iframe').attr('src'));
                (0, _jquery2.default)('.showreel-video-modal').removeClass('active');
            });

            var singleIframes = (0, _jquery2.default)('.wp-block-embed__wrapper iframe');

            singleIframes.each(function (index, element) {
                var currentSrc = (0, _jquery2.default)(this).attr('src');

                currentSrc = currentSrc.substring(0, currentSrc.indexOf('?'));

                currentSrc = currentSrc.concat('?color=f26cff&title=0&byline=0&background=1&');

                (0, _jquery2.default)(this).attr('src', currentSrc);
            });

            // Bratme ne pitai. This is how we fix the top menu items from flashing on click
            (0, _jquery2.default)('.desktop-menu li, .js-hide-fix p, .js-hide-fix h3').each(function (index, element) {
                (0, _jquery2.default)(this).css('padding-bottom', '1px');
            });

            if ((0, _jquery2.default)(window).width() < 767) {
                setTimeout(function () {
                    // let aboutSrc = $('.about-video-wrapper iframe').attr('src');
                    // console.log(aboutSrc);
                    // $('.about-video-wrapper iframe').attr('src', aboutSrc);
                    // alert('test');

                    var aboutIframe = (0, _jquery2.default)('.about-video-wrapper iframe');
                    aboutIframe.remove();
                    (0, _jquery2.default)('.about-video-wrapper').append('<iframe width="100%" height="315" src="https://player.vimeo.com/video/430554326?color=f26cff&title=0&byline=0&background=1&" width="460" height="196" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>');
                }, 1200);
            } else {
                // nothing
            }

            var ua = navigator.userAgent.toLowerCase();
            if (ua.indexOf('safari') != -1) {
                if (ua.indexOf('chrome') > -1) {
                    // Chrome
                } else {
                    // Safari
                    (0, _jquery2.default)('.top-bar-wrapper .desktop-menu').addClass('no-gradient');
                    (0, _jquery2.default)('.footer-section-inner').addClass('no-gradient');
                }
            }
        });

        /***/
    }),
    /* 3 */
    /***/ (function (module, exports, __webpack_require__) {

        /**
         * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).
         * @version v4.3.1
         * @link https://github.com/ten1seven/what-input
         * @license MIT
         */
        (function webpackUniversalModuleDefinition(root, factory) {
            if (true)
                module.exports = factory();
            else if (typeof define === 'function' && define.amd)
                define("whatInput", [], factory);
            else if (typeof exports === 'object')
                exports["whatInput"] = factory();
            else
                root["whatInput"] = factory();
        })(this, function () {
            return /******/ (function (modules) { // webpackBootstrap
                /******/ 	// The module cache
                /******/
                var installedModules = {};

                /******/ 	// The require function
                /******/
                function __webpack_require__(moduleId) {

                    /******/ 		// Check if module is in cache
                    /******/
                    if (installedModules[moduleId])
                        /******/            return installedModules[moduleId].exports;

                    /******/ 		// Create a new module (and put it into the cache)
                    /******/
                    var module = installedModules[moduleId] = {
                        /******/            exports: {},
                        /******/            id: moduleId,
                        /******/            loaded: false
                        /******/
                    };

                    /******/ 		// Execute the module function
                    /******/
                    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

                    /******/ 		// Flag the module as loaded
                    /******/
                    module.loaded = true;

                    /******/ 		// Return the exports of the module
                    /******/
                    return module.exports;
                    /******/
                }


                /******/ 	// expose the modules object (__webpack_modules__)
                /******/
                __webpack_require__.m = modules;

                /******/ 	// expose the module cache
                /******/
                __webpack_require__.c = installedModules;

                /******/ 	// __webpack_public_path__
                /******/
                __webpack_require__.p = "";

                /******/ 	// Load entry module and return exports
                /******/
                return __webpack_require__(0);
                /******/
            })
                /************************************************************************/
                /******/ ([
                    /* 0 */
                    /***/ function (module, exports) {

                        'use strict';

                        module.exports = function () {
                            /*
	   * variables
	   */

                            // last used input type
                            var currentInput = 'initial';

                            // last used input intent
                            var currentIntent = null;

                            // cache document.documentElement
                            var doc = document.documentElement;

                            // form input types
                            var formInputs = ['input', 'select', 'textarea'];

                            var functionList = [];

                            // list of modifier keys commonly used with the mouse and
                            // can be safely ignored to prevent false keyboard detection
                            var ignoreMap = [16, // shift
                                17, // control
                                18, // alt
                                91, // Windows key / left Apple cmd
                                93 // Windows menu / right Apple cmd
                            ];

                            // list of keys for which we change intent even for form inputs
                            var changeIntentMap = [9 // tab
                            ];

                            // mapping of events to input types
                            var inputMap = {
                                keydown: 'keyboard',
                                keyup: 'keyboard',
                                mousedown: 'mouse',
                                mousemove: 'mouse',
                                MSPointerDown: 'pointer',
                                MSPointerMove: 'pointer',
                                pointerdown: 'pointer',
                                pointermove: 'pointer',
                                touchstart: 'touch'
                            };

                            // array of all used input types
                            var inputTypes = [];

                            // boolean: true if touch buffer is active
                            var isBuffering = false;

                            // boolean: true if the page is being scrolled
                            var isScrolling = false;

                            // store current mouse position
                            var mousePos = {
                                x: null,
                                y: null
                            };

                            // map of IE 10 pointer events
                            var pointerMap = {
                                2: 'touch',
                                3: 'touch', // treat pen like touch
                                4: 'mouse'
                            };

                            var supportsPassive = false;

                            try {
                                var opts = Object.defineProperty({}, 'passive', {
                                    get: function get() {
                                        supportsPassive = true;
                                    }
                                });

                                window.addEventListener('test', null, opts);
                            } catch (e) {
                            }

                            /*
	   * set up
	   */

                            var setUp = function setUp() {
                                // add correct mouse wheel event mapping to `inputMap`
                                inputMap[detectWheel()] = 'mouse';

                                addListeners();
                                setInput();
                            };

                            /*
	   * events
	   */

                            var addListeners = function addListeners() {
                                // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding
                                // can only demonstrate potential, but not actual, interaction
                                // and are treated separately
                                var options = supportsPassive ? {passive: true} : false;

                                // pointer events (mouse, pen, touch)
                                if (window.PointerEvent) {
                                    doc.addEventListener('pointerdown', updateInput);
                                    doc.addEventListener('pointermove', setIntent);
                                } else if (window.MSPointerEvent) {
                                    doc.addEventListener('MSPointerDown', updateInput);
                                    doc.addEventListener('MSPointerMove', setIntent);
                                } else {
                                    // mouse events
                                    doc.addEventListener('mousedown', updateInput);
                                    doc.addEventListener('mousemove', setIntent);

                                    // touch events
                                    if ('ontouchstart' in window) {
                                        doc.addEventListener('touchstart', touchBuffer, options);
                                        doc.addEventListener('touchend', touchBuffer);
                                    }
                                }

                                // mouse wheel
                                doc.addEventListener(detectWheel(), setIntent, options);

                                // keyboard events
                                doc.addEventListener('keydown', updateInput);
                                doc.addEventListener('keyup', updateInput);
                            };

                            // checks conditions before updating new input
                            var updateInput = function updateInput(event) {
                                // only execute if the touch buffer timer isn't running
                                if (!isBuffering) {
                                    var eventKey = event.which;
                                    var value = inputMap[event.type];
                                    if (value === 'pointer') value = pointerType(event);

                                    if (currentInput !== value || currentIntent !== value) {
                                        var activeElem = document.activeElement;
                                        var activeInput = false;
                                        var notFormInput = activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1;

                                        if (notFormInput || changeIntentMap.indexOf(eventKey) !== -1) {
                                            activeInput = true;
                                        }

                                        if (value === 'touch' ||
                                            // ignore mouse modifier keys
                                            value === 'mouse' ||
                                            // don't switch if the current element is a form input
                                            value === 'keyboard' && eventKey && activeInput && ignoreMap.indexOf(eventKey) === -1) {
                                            // set the current and catch-all variable
                                            currentInput = currentIntent = value;

                                            setInput();
                                        }
                                    }
                                }
                            };

                            // updates the doc and `inputTypes` array with new input
                            var setInput = function setInput() {
                                doc.setAttribute('data-whatinput', currentInput);
                                doc.setAttribute('data-whatintent', currentInput);

                                if (inputTypes.indexOf(currentInput) === -1) {
                                    inputTypes.push(currentInput);
                                    doc.className += ' whatinput-types-' + currentInput;
                                }

                                fireFunctions('input');
                            };

                            // updates input intent for `mousemove` and `pointermove`
                            var setIntent = function setIntent(event) {
                                // test to see if `mousemove` happened relative to the screen
                                // to detect scrolling versus mousemove
                                if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {
                                    isScrolling = false;

                                    mousePos['x'] = event.screenX;
                                    mousePos['y'] = event.screenY;
                                } else {
                                    isScrolling = true;
                                }

                                // only execute if the touch buffer timer isn't running
                                // or scrolling isn't happening
                                if (!isBuffering && !isScrolling) {
                                    var value = inputMap[event.type];
                                    if (value === 'pointer') value = pointerType(event);

                                    if (currentIntent !== value) {
                                        currentIntent = value;

                                        doc.setAttribute('data-whatintent', currentIntent);

                                        fireFunctions('intent');
                                    }
                                }
                            };

                            // buffers touch events because they frequently also fire mouse events
                            var touchBuffer = function touchBuffer(event) {
                                if (event.type === 'touchstart') {
                                    isBuffering = false;

                                    // set the current input
                                    updateInput(event);
                                } else {
                                    isBuffering = true;
                                }
                            };

                            var fireFunctions = function fireFunctions(type) {
                                for (var i = 0, len = functionList.length; i < len; i++) {
                                    if (functionList[i].type === type) {
                                        functionList[i].fn.call(undefined, currentIntent);
                                    }
                                }
                            };

                            /*
	   * utilities
	   */

                            var pointerType = function pointerType(event) {
                                if (typeof event.pointerType === 'number') {
                                    return pointerMap[event.pointerType];
                                } else {
                                    // treat pen like touch
                                    return event.pointerType === 'pen' ? 'touch' : event.pointerType;
                                }
                            };

                            // detect version of mouse wheel event to use
                            // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
                            var detectWheel = function detectWheel() {
                                var wheelType = void 0;

                                // Modern browsers support "wheel"
                                if ('onwheel' in document.createElement('div')) {
                                    wheelType = 'wheel';
                                } else {
                                    // Webkit and IE support at least "mousewheel"
                                    // or assume that remaining browsers are older Firefox
                                    wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';
                                }

                                return wheelType;
                            };

                            var objPos = function objPos(match) {
                                for (var i = 0, len = functionList.length; i < len; i++) {
                                    if (functionList[i].fn === match) {
                                        return i;
                                    }
                                }
                            };

                            /*
	   * init
	   */

                            // don't start script unless browser cuts the mustard
                            // (also passes if polyfills are used)
                            if ('addEventListener' in window && Array.prototype.indexOf) {
                                setUp();
                            }

                            /*
	   * api
	   */

                            return {
                                // returns string: the current input type
                                // opt: 'loose'|'strict'
                                // 'strict' (default): returns the same value as the `data-whatinput` attribute
                                // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`
                                ask: function ask(opt) {
                                    return opt === 'loose' ? currentIntent : currentInput;
                                },

                                // returns array: all the detected input types
                                types: function types() {
                                    return inputTypes;
                                },

                                // overwrites ignored keys with provided array
                                ignoreKeys: function ignoreKeys(arr) {
                                    ignoreMap = arr;
                                },

                                // attach functions to input and intent "events"
                                // funct: function to fire on change
                                // eventType: 'input'|'intent'
                                registerOnChange: function registerOnChange(fn, eventType) {
                                    functionList.push({
                                        fn: fn,
                                        type: eventType || 'input'
                                    });
                                },

                                unRegisterOnChange: function unRegisterOnChange(fn) {
                                    var position = objPos(fn);

                                    if (position) {
                                        functionList.splice(position, 1);
                                    }
                                }
                            };
                        }();

                        /***/
                    }
                    /******/])
        });
        ;

        /***/
    }),
    /* 4 */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Foundation = exports.ResponsiveAccordionTabs = exports.Tooltip = exports.Toggler = exports.Tabs = exports.Sticky = exports.SmoothScroll = exports.Slider = exports.Reveal = exports.ResponsiveToggle = exports.ResponsiveMenu = exports.Orbit = exports.OffCanvas = exports.Magellan = exports.Interchange = exports.Equalizer = exports.DropdownMenu = exports.Dropdown = exports.Drilldown = exports.AccordionMenu = exports.Accordion = exports.Abide = exports.Triggers = exports.Touch = exports.Timer = exports.Nest = exports.Move = exports.Motion = exports.MediaQuery = exports.Keyboard = exports.onImagesLoaded = exports.Box = exports.Core = exports.CoreUtils = undefined;

        var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };

        var _jquery = __webpack_require__(0);

        var _jquery2 = _interopRequireDefault(_jquery);

        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {default: obj};
        }

        function _typeof(obj) {
            if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
                _typeof = function _typeof(obj) {
                    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
                };
            } else {
                _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
                };
            }

            return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
            };
            return _getPrototypeOf(o);
        }

        function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
            };

            return _setPrototypeOf(o, p);
        }

        function _assertThisInitialized(self) {
            if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return self;
        }

        function _possibleConstructorReturn(self, call) {
            if (call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function")) {
                return call;
            }

            return _assertThisInitialized(self);
        }

        function _superPropBase(object, property) {
            while (!Object.prototype.hasOwnProperty.call(object, property)) {
                object = _getPrototypeOf(object);
                if (object === null) break;
            }

            return object;
        }

        function _get(target, property, receiver) {
            if (typeof Reflect !== "undefined" && Reflect.get) {
                _get = Reflect.get;
            } else {
                _get = function _get(target, property, receiver) {
                    var base = _superPropBase(target, property);

                    if (!base) return;
                    var desc = Object.getOwnPropertyDescriptor(base, property);

                    if (desc.get) {
                        return desc.get.call(receiver);
                    }

                    return desc.value;
                };
            }

            return _get(target, property, receiver || target);
        }

        /**
         * Returns a boolean for RTL support
         */

        function rtl() {
            return (0, _jquery2.default)('html').attr('dir') === 'rtl';
        }

        /**
         * returns a random base-36 uid with namespacing
         * @function
         * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
         * @param {String} namespace - name of plugin to be incorporated in uid, optional.
         * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
         * @returns {String} - unique id
         */

        function GetYoDigits(length, namespace) {
            length = length || 6;
            return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? "-".concat(namespace) : '');
        }

        /**
         * Escape a string so it can be used as a regexp pattern
         * @function
         * @see https://stackoverflow.com/a/9310752/4317384
         *
         * @param {String} str - string to escape.
         * @returns {String} - escaped string
         */

        function RegExpEscape(str) {
            return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        }

        function transitionend($elem) {
            var transitions = {
                'transition': 'transitionend',
                'WebkitTransition': 'webkitTransitionEnd',
                'MozTransition': 'transitionend',
                'OTransition': 'otransitionend'
            };
            var elem = document.createElement('div'),
                end;

            for (var t in transitions) {
                if (typeof elem.style[t] !== 'undefined') {
                    end = transitions[t];
                }
            }

            if (end) {
                return end;
            } else {
                end = setTimeout(function () {
                    $elem.triggerHandler('transitionend', [$elem]);
                }, 1);
                return 'transitionend';
            }
        }

        /**
         * Return an event type to listen for window load.
         *
         * If `$elem` is passed, an event will be triggered on `$elem`. If window is already loaded, the event will still be triggered.
         * If `handler` is passed, attach it to the event on `$elem`.
         * Calling `onLoad` without handler allows you to get the event type that will be triggered before attaching the handler by yourself.
         * @function
         *
         * @param {Object} [] $elem - jQuery element on which the event will be triggered if passed.
         * @param {Function} [] handler - function to attach to the event.
         * @returns {String} - event type that should or will be triggered.
         */

        function onLoad($elem, handler) {
            var didLoad = document.readyState === 'complete';
            var eventType = (didLoad ? '_didLoad' : 'load') + '.zf.util.onLoad';

            var cb = function cb() {
                return $elem.triggerHandler(eventType);
            };

            if ($elem) {
                if (handler) $elem.one(eventType, handler);
                if (didLoad) setTimeout(cb); else (0, _jquery2.default)(window).one('load', cb);
            }

            return eventType;
        }

        /**
         * Retuns an handler for the `mouseleave` that ignore disappeared mouses.
         *
         * If the mouse "disappeared" from the document (like when going on a browser UI element, See https://git.io/zf-11410),
         * the event is ignored.
         * - If the `ignoreLeaveWindow` is `true`, the event is ignored when the user actually left the window
         *   (like by switching to an other window with [Alt]+[Tab]).
         * - If the `ignoreReappear` is `true`, the event will be ignored when the mouse will reappear later on the document
         *   outside of the element it left.
         *
         * @function
         *
         * @param {Function} [] handler - handler for the filtered `mouseleave` event to watch.
         * @param {Object} [] options - object of options:
         * - {Boolean} [false] ignoreLeaveWindow - also ignore when the user switched windows.
         * - {Boolean} [false] ignoreReappear - also ignore when the mouse reappeared outside of the element it left.
         * @returns {Function} - filtered handler to use to listen on the `mouseleave` event.
         */

        function ignoreMousedisappear(handler) {
            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref$ignoreLeaveWindo = _ref.ignoreLeaveWindow,
                ignoreLeaveWindow = _ref$ignoreLeaveWindo === void 0 ? false : _ref$ignoreLeaveWindo,
                _ref$ignoreReappear = _ref.ignoreReappear,
                ignoreReappear = _ref$ignoreReappear === void 0 ? false : _ref$ignoreReappear;

            return function leaveEventHandler(eLeave) {
                for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    rest[_key - 1] = arguments[_key];
                }

                var callback = handler.bind.apply(handler, [this, eLeave].concat(rest)); // The mouse left: call the given callback if the mouse entered elsewhere

                if (eLeave.relatedTarget !== null) {
                    return callback();
                } // Otherwise, check if the mouse actually left the window.
                // In firefox if the user switched between windows, the window sill have the focus by the time
                // the event is triggered. We have to debounce the event to test this case.


                setTimeout(function leaveEventDebouncer() {
                    if (!ignoreLeaveWindow && document.hasFocus && !document.hasFocus()) {
                        return callback();
                    } // Otherwise, wait for the mouse to reeapear outside of the element,


                    if (!ignoreReappear) {
                        (0, _jquery2.default)(document).one('mouseenter', function reenterEventHandler(eReenter) {
                            if (!(0, _jquery2.default)(eLeave.currentTarget).has(eReenter.target).length) {
                                // Fill where the mouse finally entered.
                                eLeave.relatedTarget = eReenter.target;
                                callback();
                            }
                        });
                    }
                }, 0);
            };
        }

        var foundation_core_utils = /*#__PURE__*/Object.freeze({
            rtl: rtl,
            GetYoDigits: GetYoDigits,
            RegExpEscape: RegExpEscape,
            transitionend: transitionend,
            onLoad: onLoad,
            ignoreMousedisappear: ignoreMousedisappear
        });

// Authors & copyright(c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. MIT license

        /* eslint-disable */

        window.matchMedia || (window.matchMedia = function () {

            var styleMedia = window.styleMedia || window.media; // For those that don't support matchMedium

            if (!styleMedia) {
                var style = document.createElement('style'),
                    script = document.getElementsByTagName('script')[0],
                    info = null;
                style.type = 'text/css';
                style.id = 'matchmediajs-test';

                if (!script) {
                    document.head.appendChild(style);
                } else {
                    script.parentNode.insertBefore(style, script);
                } // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers


                info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;
                styleMedia = {
                    matchMedium: function matchMedium(media) {
                        var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }'; // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers

                        if (style.styleSheet) {
                            style.styleSheet.cssText = text;
                        } else {
                            style.textContent = text;
                        } // Test if media query is true or false


                        return info.width === '1px';
                    }
                };
            }

            return function (media) {
                return {
                    matches: styleMedia.matchMedium(media || 'all'),
                    media: media || 'all'
                };
            };
        }());
        /* eslint-enable */

        var MediaQuery = {
            queries: [],
            current: '',

            /**
             * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
             * @function
             * @private
             */
            _init: function _init() {
                var self = this;
                var $meta = (0, _jquery2.default)('meta.foundation-mq');

                if (!$meta.length) {
                    (0, _jquery2.default)('<meta class="foundation-mq">').appendTo(document.head);
                }

                var extractedStyles = (0, _jquery2.default)('.foundation-mq').css('font-family');
                var namedQueries;
                namedQueries = parseStyleToObject(extractedStyles);

                for (var key in namedQueries) {
                    if (namedQueries.hasOwnProperty(key)) {
                        self.queries.push({
                            name: key,
                            value: "only screen and (min-width: ".concat(namedQueries[key], ")")
                        });
                    }
                }

                this.current = this._getCurrentSize();

                this._watcher();
            },

            /**
             * Checks if the screen is at least as wide as a breakpoint.
             * @function
             * @param {String} size - Name of the breakpoint to check.
             * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
             */
            atLeast: function atLeast(size) {
                var query = this.get(size);

                if (query) {
                    return window.matchMedia(query).matches;
                }

                return false;
            },

            /**
             * Checks if the screen matches to a breakpoint.
             * @function
             * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
             * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
             */
            is: function is(size) {
                size = size.trim().split(' ');

                if (size.length > 1 && size[1] === 'only') {
                    if (size[0] === this._getCurrentSize()) return true;
                } else {
                    return this.atLeast(size[0]);
                }

                return false;
            },

            /**
             * Gets the media query of a breakpoint.
             * @function
             * @param {String} size - Name of the breakpoint to get.
             * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
             */
            get: function get(size) {
                for (var i in this.queries) {
                    if (this.queries.hasOwnProperty(i)) {
                        var query = this.queries[i];
                        if (size === query.name) return query.value;
                    }
                }

                return null;
            },

            /**
             * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
             * @function
             * @private
             * @returns {String} Name of the current breakpoint.
             */
            _getCurrentSize: function _getCurrentSize() {
                var matched;

                for (var i = 0; i < this.queries.length; i++) {
                    var query = this.queries[i];

                    if (window.matchMedia(query.value).matches) {
                        matched = query;
                    }
                }

                if (_typeof(matched) === 'object') {
                    return matched.name;
                } else {
                    return matched;
                }
            },

            /**
             * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
             * @function
             * @private
             */
            _watcher: function _watcher() {
                var _this = this;

                (0, _jquery2.default)(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', function () {
                    var newSize = _this._getCurrentSize(),
                        currentSize = _this.current;

                    if (newSize !== currentSize) {
                        // Change the current media query
                        _this.current = newSize; // Broadcast the media query change on the window

                        (0, _jquery2.default)(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
                    }
                });
            }
        }; // Thank you: https://github.com/sindresorhus/query-string

        function parseStyleToObject(str) {
            var styleObject = {};

            if (typeof str !== 'string') {
                return styleObject;
            }

            str = str.trim().slice(1, -1); // browsers re-quote string style values

            if (!str) {
                return styleObject;
            }

            styleObject = str.split('&').reduce(function (ret, param) {
                var parts = param.replace(/\+/g, ' ').split('=');
                var key = parts[0];
                var val = parts[1];
                key = decodeURIComponent(key); // missing `=` should be `null`:
                // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters

                val = typeof val === 'undefined' ? null : decodeURIComponent(val);

                if (!ret.hasOwnProperty(key)) {
                    ret[key] = val;
                } else if (Array.isArray(ret[key])) {
                    ret[key].push(val);
                } else {
                    ret[key] = [ret[key], val];
                }

                return ret;
            }, {});
            return styleObject;
        }

        var FOUNDATION_VERSION = '6.5.1'; // Global Foundation object
// This is attached to the window, or used as a module for AMD/Browserify

        var Foundation = {
            version: FOUNDATION_VERSION,

            /**
             * Stores initialized plugins.
             */
            _plugins: {},

            /**
             * Stores generated unique ids for plugin instances
             */
            _uuids: [],

            /**
             * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
             * @param {Object} plugin - The constructor of the plugin.
             */
            plugin: function plugin(_plugin, name) {
                // Object key to use when adding to global Foundation object
                // Examples: Foundation.Reveal, Foundation.OffCanvas
                var className = name || functionName(_plugin); // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
                // Examples: data-reveal, data-off-canvas

                var attrName = hyphenate(className); // Add to the Foundation object and the plugins list (for reflowing)

                this._plugins[attrName] = this[className] = _plugin;
            },

            /**
             * @function
             * Populates the _uuids array with pointers to each individual plugin instance.
             * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
             * Also fires the initialization event for each plugin, consolidating repetitive code.
             * @param {Object} plugin - an instance of a plugin, usually `this` in context.
             * @param {String} name - the name of the plugin, passed as a camelCased string.
             * @fires Plugin#init
             */
            registerPlugin: function registerPlugin(plugin, name) {
                var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
                plugin.uuid = GetYoDigits(6, pluginName);

                if (!plugin.$element.attr("data-".concat(pluginName))) {
                    plugin.$element.attr("data-".concat(pluginName), plugin.uuid);
                }

                if (!plugin.$element.data('zfPlugin')) {
                    plugin.$element.data('zfPlugin', plugin);
                }
                /**
                 * Fires when the plugin has initialized.
                 * @event Plugin#init
                 */

                plugin.$element.trigger("init.zf.".concat(pluginName));

                this._uuids.push(plugin.uuid);

                return;
            },

            /**
             * @function
             * Removes the plugins uuid from the _uuids array.
             * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
             * Also fires the destroyed event for the plugin, consolidating repetitive code.
             * @param {Object} plugin - an instance of a plugin, usually `this` in context.
             * @fires Plugin#destroyed
             */
            unregisterPlugin: function unregisterPlugin(plugin) {
                var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

                this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);

                plugin.$element.removeAttr("data-".concat(pluginName)).removeData('zfPlugin')
                    /**
                     * Fires when the plugin has been destroyed.
                     * @event Plugin#destroyed
                     */
                    .trigger("destroyed.zf.".concat(pluginName));

                for (var prop in plugin) {
                    plugin[prop] = null; //clean up script to prep for garbage collection.
                }

                return;
            },

            /**
             * @function
             * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
             * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
             * @default If no argument is passed, reflow all currently active plugins.
             */
            reInit: function reInit(plugins) {
                var isJQ = plugins instanceof _jquery2.default;

                try {
                    if (isJQ) {
                        plugins.each(function () {
                            (0, _jquery2.default)(this).data('zfPlugin')._init();
                        });
                    } else {
                        var type = _typeof(plugins),
                            _this = this,
                            fns = {
                                'object': function object(plgs) {
                                    plgs.forEach(function (p) {
                                        p = hyphenate(p);
                                        (0, _jquery2.default)('[data-' + p + ']').foundation('_init');
                                    });
                                },
                                'string': function string() {
                                    plugins = hyphenate(plugins);
                                    (0, _jquery2.default)('[data-' + plugins + ']').foundation('_init');
                                },
                                'undefined': function undefined() {
                                    this['object'](Object.keys(_this._plugins));
                                }
                            };

                        fns[type](plugins);
                    }
                } catch (err) {
                    console.error(err);
                } finally {
                    return plugins;
                }
            },

            /**
             * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
             * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
             * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
             */
            reflow: function reflow(elem, plugins) {
                // If plugins is undefined, just grab everything
                if (typeof plugins === 'undefined') {
                    plugins = Object.keys(this._plugins);
                } // If plugins is a string, convert it to an array with one item
                else if (typeof plugins === 'string') {
                    plugins = [plugins];
                }

                var _this = this; // Iterate through each plugin


                _jquery2.default.each(plugins, function (i, name) {
                    // Get the current plugin
                    var plugin = _this._plugins[name]; // Localize the search to all elements inside elem, as well as elem itself, unless elem === document

                    var $elem = (0, _jquery2.default)(elem).find('[data-' + name + ']').addBack('[data-' + name + ']'); // For each plugin found, initialize it

                    $elem.each(function () {
                        var $el = (0, _jquery2.default)(this),
                            opts = {}; // Don't double-dip on plugins

                        if ($el.data('zfPlugin')) {
                            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
                            return;
                        }

                        if ($el.attr('data-options')) {
                            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
                                var opt = e.split(':').map(function (el) {
                                    return el.trim();
                                });
                                if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
                            });
                        }

                        try {
                            $el.data('zfPlugin', new plugin((0, _jquery2.default)(this), opts));
                        } catch (er) {
                            console.error(er);
                        } finally {
                            return;
                        }
                    });
                });
            },
            getFnName: functionName,
            addToJquery: function addToJquery($$$1) {
                // TODO: consider not making this a jQuery function
                // TODO: need way to reflow vs. re-initialize

                /**
                 * The Foundation jQuery method.
                 * @param {String|Array} method - An action to perform on the current jQuery object.
                 */
                var foundation = function foundation(method) {
                    var type = _typeof(method),
                        $noJS = $$$1('.no-js');

                    if ($noJS.length) {
                        $noJS.removeClass('no-js');
                    }

                    if (type === 'undefined') {
                        //needs to initialize the Foundation object, or an individual plugin.
                        MediaQuery._init();

                        Foundation.reflow(this);
                    } else if (type === 'string') {
                        //an individual method to invoke on a plugin or group of plugins
                        var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary

                        var plugClass = this.data('zfPlugin'); //determine the class of plugin

                        if (typeof plugClass !== 'undefined' && typeof plugClass[method] !== 'undefined') {
                            //make sure both the class and method exist
                            if (this.length === 1) {
                                //if there's only one, call it directly.
                                plugClass[method].apply(plugClass, args);
                            } else {
                                this.each(function (i, el) {
                                    //otherwise loop through the jQuery collection and invoke the method on each
                                    plugClass[method].apply($$$1(el).data('zfPlugin'), args);
                                });
                            }
                        } else {
                            //error for no class or no method
                            throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
                        }
                    } else {
                        //error for invalid argument type
                        throw new TypeError("We're sorry, ".concat(type, " is not a valid parameter. You must use a string representing the method you wish to invoke."));
                    }

                    return this;
                };

                $$$1.fn.foundation = foundation;
                return $$$1;
            }
        };
        Foundation.util = {
            /**
             * Function for applying a debounce effect to a function call.
             * @function
             * @param {Function} func - Function to be called at end of timeout.
             * @param {Number} delay - Time in ms to delay the call of `func`.
             * @returns function
             */
            throttle: function throttle(func, delay) {
                var timer = null;
                return function () {
                    var context = this,
                        args = arguments;

                    if (timer === null) {
                        timer = setTimeout(function () {
                            func.apply(context, args);
                            timer = null;
                        }, delay);
                    }
                };
            }
        };
        window.Foundation = Foundation; // Polyfill for requestAnimationFrame

        (function () {
            if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
                return new Date().getTime();
            };
            var vendors = ['webkit', 'moz'];

            for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
                var vp = vendors[i];
                window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
                window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
            }

            if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
                var lastTime = 0;

                window.requestAnimationFrame = function (callback) {
                    var now = Date.now();
                    var nextTime = Math.max(lastTime + 16, now);
                    return setTimeout(function () {
                        callback(lastTime = nextTime);
                    }, nextTime - now);
                };

                window.cancelAnimationFrame = clearTimeout;
            }
            /**
             * Polyfill for performance.now, required by rAF
             */

            if (!window.performance || !window.performance.now) {
                window.performance = {
                    start: Date.now(),
                    now: function now() {
                        return Date.now() - this.start;
                    }
                };
            }
        })();

        if (!Function.prototype.bind) {
            Function.prototype.bind = function (oThis) {
                if (typeof this !== 'function') {
                    // closest thing possible to the ECMAScript 5
                    // internal IsCallable function
                    throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
                }

                var aArgs = Array.prototype.slice.call(arguments, 1),
                    fToBind = this,
                    fNOP = function fNOP() {
                    },
                    fBound = function fBound() {
                        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
                    };

                if (this.prototype) {
                    // native functions don't have a prototype
                    fNOP.prototype = this.prototype;
                }

                fBound.prototype = new fNOP();
                return fBound;
            };
        } // Polyfill to get the name of a function in IE9


        function functionName(fn) {
            if (typeof Function.prototype.name === 'undefined') {
                var funcNameRegex = /function\s([^(]{1,})\(/;
                var results = funcNameRegex.exec(fn.toString());
                return results && results.length > 1 ? results[1].trim() : "";
            } else if (typeof fn.prototype === 'undefined') {
                return fn.constructor.name;
            } else {
                return fn.prototype.constructor.name;
            }
        }

        function parseValue(str) {
            if ('true' === str) return true; else if ('false' === str) return false; else if (!isNaN(str * 1)) return parseFloat(str);
            return str;
        } // Convert PascalCase to kebab-case
// Thank you: http://stackoverflow.com/a/8955580


        function hyphenate(str) {
            return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
        }

        var Box = {
            ImNotTouchingYou: ImNotTouchingYou,
            OverlapArea: OverlapArea,
            GetDimensions: GetDimensions,
            GetOffsets: GetOffsets,
            GetExplicitOffsets: GetExplicitOffsets
            /**
             * Compares the dimensions of an element to a container and determines collision events with container.
             * @function
             * @param {jQuery} element - jQuery object to test for collisions.
             * @param {jQuery} parent - jQuery object to use as bounding container.
             * @param {Boolean} lrOnly - set to true to check left and right values only.
             * @param {Boolean} tbOnly - set to true to check top and bottom values only.
             * @default if no parent object passed, detects collisions with `window`.
             * @returns {Boolean} - true if collision free, false if a collision in any direction.
             */

        };

        function ImNotTouchingYou(element, parent, lrOnly, tbOnly, ignoreBottom) {
            return OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) === 0;
        }

        function OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) {
            var eleDims = GetDimensions(element),
                topOver,
                bottomOver,
                leftOver,
                rightOver;

            if (parent) {
                var parDims = GetDimensions(parent);
                bottomOver = parDims.height + parDims.offset.top - (eleDims.offset.top + eleDims.height);
                topOver = eleDims.offset.top - parDims.offset.top;
                leftOver = eleDims.offset.left - parDims.offset.left;
                rightOver = parDims.width + parDims.offset.left - (eleDims.offset.left + eleDims.width);
            } else {
                bottomOver = eleDims.windowDims.height + eleDims.windowDims.offset.top - (eleDims.offset.top + eleDims.height);
                topOver = eleDims.offset.top - eleDims.windowDims.offset.top;
                leftOver = eleDims.offset.left - eleDims.windowDims.offset.left;
                rightOver = eleDims.windowDims.width - (eleDims.offset.left + eleDims.width);
            }

            bottomOver = ignoreBottom ? 0 : Math.min(bottomOver, 0);
            topOver = Math.min(topOver, 0);
            leftOver = Math.min(leftOver, 0);
            rightOver = Math.min(rightOver, 0);

            if (lrOnly) {
                return leftOver + rightOver;
            }

            if (tbOnly) {
                return topOver + bottomOver;
            } // use sum of squares b/c we care about overlap area.


            return Math.sqrt(topOver * topOver + bottomOver * bottomOver + leftOver * leftOver + rightOver * rightOver);
        }

        /**
         * Uses native methods to return an object of dimension values.
         * @function
         * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
         * @returns {Object} - nested object of integer pixel values
         * TODO - if element is window, return only those values.
         */

        function GetDimensions(elem) {
            elem = elem.length ? elem[0] : elem;

            if (elem === window || elem === document) {
                throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
            }

            var rect = elem.getBoundingClientRect(),
                parRect = elem.parentNode.getBoundingClientRect(),
                winRect = document.body.getBoundingClientRect(),
                winY = window.pageYOffset,
                winX = window.pageXOffset;
            return {
                width: rect.width,
                height: rect.height,
                offset: {
                    top: rect.top + winY,
                    left: rect.left + winX
                },
                parentDims: {
                    width: parRect.width,
                    height: parRect.height,
                    offset: {
                        top: parRect.top + winY,
                        left: parRect.left + winX
                    }
                },
                windowDims: {
                    width: winRect.width,
                    height: winRect.height,
                    offset: {
                        top: winY,
                        left: winX
                    }
                }
            };
        }

        /**
         * Returns an object of top and left integer pixel values for dynamically rendered elements,
         * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where
         * you don't know alignment, but generally from
         * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.
         * @function
         * @param {jQuery} element - jQuery object for the element being positioned.
         * @param {jQuery} anchor - jQuery object for the element's anchor point.
         * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
         * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
         * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
         * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
         * TODO alter/rewrite to work with `em` values as well/instead of pixels
         */

        function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
            console.log("NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5");

            switch (position) {
                case 'top':
                    return rtl() ? GetExplicitOffsets(element, anchor, 'top', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'top', 'right', vOffset, hOffset, isOverflow);

                case 'bottom':
                    return rtl() ? GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);

                case 'center top':
                    return GetExplicitOffsets(element, anchor, 'top', 'center', vOffset, hOffset, isOverflow);

                case 'center bottom':
                    return GetExplicitOffsets(element, anchor, 'bottom', 'center', vOffset, hOffset, isOverflow);

                case 'center left':
                    return GetExplicitOffsets(element, anchor, 'left', 'center', vOffset, hOffset, isOverflow);

                case 'center right':
                    return GetExplicitOffsets(element, anchor, 'right', 'center', vOffset, hOffset, isOverflow);

                case 'left bottom':
                    return GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow);

                case 'right bottom':
                    return GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);
                // Backwards compatibility... this along with the reveal and reveal full
                // classes are the only ones that didn't reference anchor

                case 'center':
                    return {
                        left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2 + hOffset,
                        top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - ($eleDims.height / 2 + vOffset)
                    };

                case 'reveal':
                    return {
                        left: ($eleDims.windowDims.width - $eleDims.width) / 2 + hOffset,
                        top: $eleDims.windowDims.offset.top + vOffset
                    };

                case 'reveal full':
                    return {
                        left: $eleDims.windowDims.offset.left,
                        top: $eleDims.windowDims.offset.top
                    };
                    break;

                default:
                    return {
                        left: rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset : $anchorDims.offset.left + hOffset,
                        top: $anchorDims.offset.top + $anchorDims.height + vOffset
                    };
            }
        }

        function GetExplicitOffsets(element, anchor, position, alignment, vOffset, hOffset, isOverflow) {
            var $eleDims = GetDimensions(element),
                $anchorDims = anchor ? GetDimensions(anchor) : null;
            var topVal, leftVal; // set position related attribute

            switch (position) {
                case 'top':
                    topVal = $anchorDims.offset.top - ($eleDims.height + vOffset);
                    break;

                case 'bottom':
                    topVal = $anchorDims.offset.top + $anchorDims.height + vOffset;
                    break;

                case 'left':
                    leftVal = $anchorDims.offset.left - ($eleDims.width + hOffset);
                    break;

                case 'right':
                    leftVal = $anchorDims.offset.left + $anchorDims.width + hOffset;
                    break;
            } // set alignment related attribute


            switch (position) {
                case 'top':
                case 'bottom':
                    switch (alignment) {
                        case 'left':
                            leftVal = $anchorDims.offset.left + hOffset;
                            break;

                        case 'right':
                            leftVal = $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset;
                            break;

                        case 'center':
                            leftVal = isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2 + hOffset;
                            break;
                    }

                    break;

                case 'right':
                case 'left':
                    switch (alignment) {
                        case 'bottom':
                            topVal = $anchorDims.offset.top - vOffset + $anchorDims.height - $eleDims.height;
                            break;

                        case 'top':
                            topVal = $anchorDims.offset.top + vOffset;
                            break;

                        case 'center':
                            topVal = $anchorDims.offset.top + vOffset + $anchorDims.height / 2 - $eleDims.height / 2;
                            break;
                    }

                    break;
            }

            return {
                top: topVal,
                left: leftVal
            };
        }

        /**
         * Runs a callback function when images are fully loaded.
         * @param {Object} images - Image(s) to check if loaded.
         * @param {Func} callback - Function to execute when image is fully loaded.
         */

        function onImagesLoaded(images, callback) {
            var unloaded = images.length;

            if (unloaded === 0) {
                callback();
            }

            images.each(function () {
                // Check if image is loaded
                if (this.complete && typeof this.naturalWidth !== 'undefined') {
                    singleImageLoaded();
                } else {
                    // If the above check failed, simulate loading on detached element.
                    var image = new Image(); // Still count image as loaded if it finalizes with an error.

                    var events = "load.zf.images error.zf.images";
                    (0, _jquery2.default)(image).one(events, function me(event) {
                        // Unbind the event listeners. We're using 'one' but only one of the two events will have fired.
                        (0, _jquery2.default)(this).off(events, me);
                        singleImageLoaded();
                    });
                    image.src = (0, _jquery2.default)(this).attr('src');
                }
            });

            function singleImageLoaded() {
                unloaded--;

                if (unloaded === 0) {
                    callback();
                }
            }
        }

        /*******************************************
         *                                         *
         * This util was created by Marius Olbertz *
         * Please thank Marius on GitHub /owlbertz *
         * or the web http://www.mariusolbertz.de/ *
         *                                         *
         ******************************************/
        var keyCodes = {
            9: 'TAB',
            13: 'ENTER',
            27: 'ESCAPE',
            32: 'SPACE',
            35: 'END',
            36: 'HOME',
            37: 'ARROW_LEFT',
            38: 'ARROW_UP',
            39: 'ARROW_RIGHT',
            40: 'ARROW_DOWN'
        };
        var commands = {}; // Functions pulled out to be referenceable from internals

        function findFocusable($element) {
            if (!$element) {
                return false;
            }

            return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
                if (!(0, _jquery2.default)(this).is(':visible') || (0, _jquery2.default)(this).attr('tabindex') < 0) {
                    return false;
                } //only have visible elements and those that have a tabindex greater or equal 0


                return true;
            });
        }

        function parseKey(event) {
            var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase(); // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events

            key = key.replace(/\W+/, '');
            if (event.shiftKey) key = "SHIFT_".concat(key);
            if (event.ctrlKey) key = "CTRL_".concat(key);
            if (event.altKey) key = "ALT_".concat(key); // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)

            key = key.replace(/_$/, '');
            return key;
        }

        var Keyboard = {
            keys: getKeyCodes(keyCodes),

            /**
             * Parses the (keyboard) event and returns a String that represents its key
             * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
             * @param {Event} event - the event generated by the event handler
             * @return String key - String that represents the key pressed
             */
            parseKey: parseKey,

            /**
             * Handles the given (keyboard) event
             * @param {Event} event - the event generated by the event handler
             * @param {String} component - Foundation component's name, e.g. Slider or Reveal
             * @param {Objects} functions - collection of functions that are to be executed
             */
            handleKey: function handleKey(event, component, functions) {
                var commandList = commands[component],
                    keyCode = this.parseKey(event),
                    cmds,
                    command,
                    fn;
                if (!commandList) return console.warn('Component not defined!');

                if (typeof commandList.ltr === 'undefined') {
                    // this component does not differentiate between ltr and rtl
                    cmds = commandList; // use plain list
                } else {
                    // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
                    if (rtl()) cmds = _jquery2.default.extend({}, commandList.ltr, commandList.rtl); else cmds = _jquery2.default.extend({}, commandList.rtl, commandList.ltr);
                }

                command = cmds[keyCode];
                fn = functions[command];

                if (fn && typeof fn === 'function') {
                    // execute function  if exists
                    var returnValue = fn.apply();

                    if (functions.handled || typeof functions.handled === 'function') {
                        // execute function when event was handled
                        functions.handled(returnValue);
                    }
                } else {
                    if (functions.unhandled || typeof functions.unhandled === 'function') {
                        // execute function when event was not handled
                        functions.unhandled();
                    }
                }
            },

            /**
             * Finds all focusable elements within the given `$element`
             * @param {jQuery} $element - jQuery object to search within
             * @return {jQuery} $focusable - all focusable elements within `$element`
             */
            findFocusable: findFocusable,

            /**
             * Returns the component name name
             * @param {Object} component - Foundation component, e.g. Slider or Reveal
             * @return String componentName
             */
            register: function register(componentName, cmds) {
                commands[componentName] = cmds;
            },
            // TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?
            //

            /**
             * Traps the focus in the given element.
             * @param  {jQuery} $element  jQuery object to trap the foucs into.
             */
            trapFocus: function trapFocus($element) {
                var $focusable = findFocusable($element),
                    $firstFocusable = $focusable.eq(0),
                    $lastFocusable = $focusable.eq(-1);
                $element.on('keydown.zf.trapfocus', function (event) {
                    if (event.target === $lastFocusable[0] && parseKey(event) === 'TAB') {
                        event.preventDefault();
                        $firstFocusable.focus();
                    } else if (event.target === $firstFocusable[0] && parseKey(event) === 'SHIFT_TAB') {
                        event.preventDefault();
                        $lastFocusable.focus();
                    }
                });
            },

            /**
             * Releases the trapped focus from the given element.
             * @param  {jQuery} $element  jQuery object to release the focus for.
             */
            releaseFocus: function releaseFocus($element) {
                $element.off('keydown.zf.trapfocus');
            }
        };

        /*
 * Constants for easier comparing.
 * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
 */

        function getKeyCodes(kcs) {
            var k = {};

            for (var kc in kcs) {
                k[kcs[kc]] = kcs[kc];
            }

            return k;
        }

        /**
         * Motion module.
         * @module foundation.motion
         */

        var initClasses = ['mui-enter', 'mui-leave'];
        var activeClasses = ['mui-enter-active', 'mui-leave-active'];
        var Motion = {
            animateIn: function animateIn(element, animation, cb) {
                animate(true, element, animation, cb);
            },
            animateOut: function animateOut(element, animation, cb) {
                animate(false, element, animation, cb);
            }
        };

        function Move(duration, elem, fn) {
            var anim,
                prog,
                start = null; // console.log('called');

            if (duration === 0) {
                fn.apply(elem);
                elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
                return;
            }

            function move(ts) {
                if (!start) start = ts; // console.log(start, ts);

                prog = ts - start;
                fn.apply(elem);

                if (prog < duration) {
                    anim = window.requestAnimationFrame(move, elem);
                } else {
                    window.cancelAnimationFrame(anim);
                    elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
                }
            }

            anim = window.requestAnimationFrame(move);
        }

        /**
         * Animates an element in or out using a CSS transition class.
         * @function
         * @private
         * @param {Boolean} isIn - Defines if the animation is in or out.
         * @param {Object} element - jQuery or HTML object to animate.
         * @param {String} animation - CSS class to use.
         * @param {Function} cb - Callback to run when animation is finished.
         */

        function animate(isIn, element, animation, cb) {
            element = (0, _jquery2.default)(element).eq(0);
            if (!element.length) return;
            var initClass = isIn ? initClasses[0] : initClasses[1];
            var activeClass = isIn ? activeClasses[0] : activeClasses[1]; // Set up the animation

            reset();
            element.addClass(animation).css('transition', 'none');
            requestAnimationFrame(function () {
                element.addClass(initClass);
                if (isIn) element.show();
            }); // Start the animation

            requestAnimationFrame(function () {
                element[0].offsetWidth;
                element.css('transition', '').addClass(activeClass);
            }); // Clean up the animation when it finishes

            element.one(transitionend(element), finish); // Hides the element (for out animations), resets the element, and runs a callback

            function finish() {
                if (!isIn) element.hide();
                reset();
                if (cb) cb.apply(element);
            } // Resets transitions and removes motion-specific classes


            function reset() {
                element[0].style.transitionDuration = 0;
                element.removeClass("".concat(initClass, " ").concat(activeClass, " ").concat(animation));
            }
        }

        var Nest = {
            Feather: function Feather(menu) {
                var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';
                menu.attr('role', 'menubar');
                var items = menu.find('li').attr({
                        'role': 'menuitem'
                    }),
                    subMenuClass = "is-".concat(type, "-submenu"),
                    subItemClass = "".concat(subMenuClass, "-item"),
                    hasSubClass = "is-".concat(type, "-submenu-parent"),
                    applyAria = type !== 'accordion'; // Accordions handle their own ARIA attriutes.

                items.each(function () {
                    var $item = (0, _jquery2.default)(this),
                        $sub = $item.children('ul');

                    if ($sub.length) {
                        $item.addClass(hasSubClass);
                        $sub.addClass("submenu ".concat(subMenuClass)).attr({
                            'data-submenu': ''
                        });

                        if (applyAria) {
                            $item.attr({
                                'aria-haspopup': true,
                                'aria-label': $item.children('a:first').text()
                            }); // Note:  Drilldowns behave differently in how they hide, and so need
                            // additional attributes.  We should look if this possibly over-generalized
                            // utility (Nest) is appropriate when we rework menus in 6.4

                            if (type === 'drilldown') {
                                $item.attr({
                                    'aria-expanded': false
                                });
                            }
                        }

                        $sub.addClass("submenu ".concat(subMenuClass)).attr({
                            'data-submenu': '',
                            'role': 'menubar'
                        });

                        if (type === 'drilldown') {
                            $sub.attr({
                                'aria-hidden': true
                            });
                        }
                    }

                    if ($item.parent('[data-submenu]').length) {
                        $item.addClass("is-submenu-item ".concat(subItemClass));
                    }
                });
                return;
            },
            Burn: function Burn(menu, type) {
                var //items = menu.find('li'),
                    subMenuClass = "is-".concat(type, "-submenu"),
                    subItemClass = "".concat(subMenuClass, "-item"),
                    hasSubClass = "is-".concat(type, "-submenu-parent");
                menu.find('>li, > li > ul, .menu, .menu > li, [data-submenu] > li').removeClass("".concat(subMenuClass, " ").concat(subItemClass, " ").concat(hasSubClass, " is-submenu-item submenu is-active")).removeAttr('data-submenu').css('display', '');
            }
        };

        function Timer(elem, options, cb) {
            var _this = this,
                duration = options.duration,

                //options is an object for easily adding features later.
                nameSpace = Object.keys(elem.data())[0] || 'timer',
                remain = -1,
                start,
                timer;

            this.isPaused = false;

            this.restart = function () {
                remain = -1;
                clearTimeout(timer);
                this.start();
            };

            this.start = function () {
                this.isPaused = false; // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.

                clearTimeout(timer);
                remain = remain <= 0 ? duration : remain;
                elem.data('paused', false);
                start = Date.now();
                timer = setTimeout(function () {
                    if (options.infinite) {
                        _this.restart(); //rerun the timer.
                    }

                    if (cb && typeof cb === 'function') {
                        cb();
                    }
                }, remain);
                elem.trigger("timerstart.zf.".concat(nameSpace));
            };

            this.pause = function () {
                this.isPaused = true; //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.

                clearTimeout(timer);
                elem.data('paused', true);
                var end = Date.now();
                remain = remain - (end - start);
                elem.trigger("timerpaused.zf.".concat(nameSpace));
            };
        }

        var Touch = {};
        var startPosX,
            startPosY,
            startTime,
            elapsedTime,
            startEvent,
            isMoving = false,
            didMoved = false;

        function onTouchEnd(e) {
            this.removeEventListener('touchmove', onTouchMove);
            this.removeEventListener('touchend', onTouchEnd); // If the touch did not move, consider it as a "tap"

            if (!didMoved) {
                var tapEvent = _jquery2.default.Event('tap', startEvent || e);
                (0, _jquery2.default)(this).trigger(tapEvent);
            }

            startEvent = null;
            isMoving = false;
            didMoved = false;
        }

        function onTouchMove(e) {
            if (_jquery2.default.spotSwipe.preventDefault) {
                e.preventDefault();
            }

            if (isMoving) {
                var x = e.touches[0].pageX;
                var y = e.touches[0].pageY;
                var dx = startPosX - x;
                var dir;
                didMoved = true;
                elapsedTime = new Date().getTime() - startTime;

                if (Math.abs(dx) >= _jquery2.default.spotSwipe.moveThreshold && elapsedTime <= _jquery2.default.spotSwipe.timeThreshold) {
                    dir = dx > 0 ? 'left' : 'right';
                } // else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
                //   dir = dy > 0 ? 'down' : 'up';
                // }


                if (dir) {
                    e.preventDefault();
                    onTouchEnd.apply(this, arguments);
                    (0, _jquery2.default)(this).trigger(_jquery2.default.Event('swipe', e), dir).trigger(_jquery2.default.Event("swipe".concat(dir), e));
                }
            }
        }

        function onTouchStart(e) {
            if (e.touches.length == 1) {
                startPosX = e.touches[0].pageX;
                startPosY = e.touches[0].pageY;
                startEvent = e;
                isMoving = true;
                didMoved = false;
                startTime = new Date().getTime();
                this.addEventListener('touchmove', onTouchMove, false);
                this.addEventListener('touchend', onTouchEnd, false);
            }
        }

        function init() {
            this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
        }

        var SpotSwipe =
            /*#__PURE__*/
            function () {
                function SpotSwipe($$$1) {
                    _classCallCheck(this, SpotSwipe);

                    this.version = '1.0.0';
                    this.enabled = 'ontouchstart' in document.documentElement;
                    this.preventDefault = false;
                    this.moveThreshold = 75;
                    this.timeThreshold = 200;
                    this.$ = $$$1;

                    this._init();
                }

                _createClass(SpotSwipe, [{
                    key: "_init",
                    value: function _init() {
                        var $$$1 = this.$;
                        $$$1.event.special.swipe = {
                            setup: init
                        };
                        $$$1.event.special.tap = {
                            setup: init
                        };
                        $$$1.each(['left', 'up', 'down', 'right'], function () {
                            $$$1.event.special["swipe".concat(this)] = {
                                setup: function setup() {
                                    $$$1(this).on('swipe', $$$1.noop);
                                }
                            };
                        });
                    }
                }]);

                return SpotSwipe;
            }();
        /****************************************************
         * As far as I can tell, both setupSpotSwipe and    *
         * setupTouchHandler should be idempotent,          *
         * because they directly replace functions &        *
         * values, and do not add event handlers directly.  *
         ****************************************************/

        Touch.setupSpotSwipe = function ($$$1) {
            $$$1.spotSwipe = new SpotSwipe($$$1);
        };
        /****************************************************
         * Method for adding pseudo drag events to elements *
         ***************************************************/

        Touch.setupTouchHandler = function ($$$1) {
            $$$1.fn.addTouch = function () {
                this.each(function (i, el) {
                    $$$1(el).bind('touchstart touchmove touchend touchcancel', function (event) {
                        //we pass the original event object because the jQuery event
                        //object is normalized to w3c specs and does not provide the TouchList
                        handleTouch(event);
                    });
                });

                var handleTouch = function handleTouch(event) {
                    var touches = event.changedTouches,
                        first = touches[0],
                        eventTypes = {
                            touchstart: 'mousedown',
                            touchmove: 'mousemove',
                            touchend: 'mouseup'
                        },
                        type = eventTypes[event.type],
                        simulatedEvent;

                    if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
                        simulatedEvent = new window.MouseEvent(type, {
                            'bubbles': true,
                            'cancelable': true,
                            'screenX': first.screenX,
                            'screenY': first.screenY,
                            'clientX': first.clientX,
                            'clientY': first.clientY
                        });
                    } else {
                        simulatedEvent = document.createEvent('MouseEvent');
                        simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0
                            /*left*/
                            , null);
                    }

                    first.target.dispatchEvent(simulatedEvent);
                };
            };
        };

        Touch.init = function ($$$1) {
            if (typeof $$$1.spotSwipe === 'undefined') {
                Touch.setupSpotSwipe($$$1);
                Touch.setupTouchHandler($$$1);
            }
        };

        var MutationObserver = function () {
            var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];

            for (var i = 0; i < prefixes.length; i++) {
                if ("".concat(prefixes[i], "MutationObserver") in window) {
                    return window["".concat(prefixes[i], "MutationObserver")];
                }
            }

            return false;
        }();

        var triggers = function triggers(el, type) {
            el.data(type).split(' ').forEach(function (id) {
                (0, _jquery2.default)("#".concat(id))[type === 'close' ? 'trigger' : 'triggerHandler']("".concat(type, ".zf.trigger"), [el]);
            });
        };

        var Triggers = {
            Listeners: {
                Basic: {},
                Global: {}
            },
            Initializers: {}
        };
        Triggers.Listeners.Basic = {
            openListener: function openListener() {
                triggers((0, _jquery2.default)(this), 'open');
            },
            closeListener: function closeListener() {
                var id = (0, _jquery2.default)(this).data('close');

                if (id) {
                    triggers((0, _jquery2.default)(this), 'close');
                } else {
                    (0, _jquery2.default)(this).trigger('close.zf.trigger');
                }
            },
            toggleListener: function toggleListener() {
                var id = (0, _jquery2.default)(this).data('toggle');

                if (id) {
                    triggers((0, _jquery2.default)(this), 'toggle');
                } else {
                    (0, _jquery2.default)(this).trigger('toggle.zf.trigger');
                }
            },
            closeableListener: function closeableListener(e) {
                e.stopPropagation();
                var animation = (0, _jquery2.default)(this).data('closable');

                if (animation !== '') {
                    Motion.animateOut((0, _jquery2.default)(this), animation, function () {
                        (0, _jquery2.default)(this).trigger('closed.zf');
                    });
                } else {
                    (0, _jquery2.default)(this).fadeOut().trigger('closed.zf');
                }
            },
            toggleFocusListener: function toggleFocusListener() {
                var id = (0, _jquery2.default)(this).data('toggle-focus');
                (0, _jquery2.default)("#".concat(id)).triggerHandler('toggle.zf.trigger', [(0, _jquery2.default)(this)]);
            }
        }; // Elements with [data-open] will reveal a plugin that supports it when clicked.

        Triggers.Initializers.addOpenListener = function ($elem) {
            $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
            $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
        }; // Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.


        Triggers.Initializers.addCloseListener = function ($elem) {
            $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
            $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
        }; // Elements with [data-toggle] will toggle a plugin that supports it when clicked.


        Triggers.Initializers.addToggleListener = function ($elem) {
            $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
            $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
        }; // Elements with [data-closable] will respond to close.zf.trigger events.


        Triggers.Initializers.addCloseableListener = function ($elem) {
            $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
            $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
        }; // Elements with [data-toggle-focus] will respond to coming in and out of focus


        Triggers.Initializers.addToggleFocusListener = function ($elem) {
            $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
            $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
        }; // More Global/complex listeners and triggers


        Triggers.Listeners.Global = {
            resizeListener: function resizeListener($nodes) {
                if (!MutationObserver) {
                    //fallback for IE 9
                    $nodes.each(function () {
                        (0, _jquery2.default)(this).triggerHandler('resizeme.zf.trigger');
                    });
                } //trigger all listening elements and signal a resize event


                $nodes.attr('data-events', "resize");
            },
            scrollListener: function scrollListener($nodes) {
                if (!MutationObserver) {
                    //fallback for IE 9
                    $nodes.each(function () {
                        (0, _jquery2.default)(this).triggerHandler('scrollme.zf.trigger');
                    });
                } //trigger all listening elements and signal a scroll event


                $nodes.attr('data-events', "scroll");
            },
            closeMeListener: function closeMeListener(e, pluginId) {
                var plugin = e.namespace.split('.')[0];
                var plugins = (0, _jquery2.default)("[data-".concat(plugin, "]")).not("[data-yeti-box=\"".concat(pluginId, "\"]"));
                plugins.each(function () {
                    var _this = (0, _jquery2.default)(this);

                    _this.triggerHandler('close.zf.trigger', [_this]);
                });
            } // Global, parses whole document.

        };

        Triggers.Initializers.addClosemeListener = function (pluginName) {
            var yetiBoxes = (0, _jquery2.default)('[data-yeti-box]'),
                plugNames = ['dropdown', 'tooltip', 'reveal'];

            if (pluginName) {
                if (typeof pluginName === 'string') {
                    plugNames.push(pluginName);
                } else if (_typeof(pluginName) === 'object' && typeof pluginName[0] === 'string') ; else {
                    console.error('Plugin names must be strings');
                }
            }

            if (yetiBoxes.length) {
                var listeners = plugNames.map(function (name) {
                    return "closeme.zf.".concat(name);
                }).join(' ');
                (0, _jquery2.default)(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
            }
        };

        function debounceGlobalListener(debounce, trigger, listener) {
            var timer,
                args = Array.prototype.slice.call(arguments, 3);
            (0, _jquery2.default)(window).off(trigger).on(trigger, function (e) {
                if (timer) {
                    clearTimeout(timer);
                }

                timer = setTimeout(function () {
                    listener.apply(null, args);
                }, debounce || 10); //default time to emit scroll event
            });
        }

        Triggers.Initializers.addResizeListener = function (debounce) {
            var $nodes = (0, _jquery2.default)('[data-resize]');

            if ($nodes.length) {
                debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
            }
        };

        Triggers.Initializers.addScrollListener = function (debounce) {
            var $nodes = (0, _jquery2.default)('[data-scroll]');

            if ($nodes.length) {
                debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
            }
        };

        Triggers.Initializers.addMutationEventsListener = function ($elem) {
            if (!MutationObserver) {
                return false;
            }

            var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]'); //element callback

            var listeningElementsMutation = function listeningElementsMutation(mutationRecordsList) {
                var $target = (0, _jquery2.default)(mutationRecordsList[0].target); //trigger the event handler for the element depending on type

                switch (mutationRecordsList[0].type) {
                    case "attributes":
                        if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
                            $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
                        }

                        if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
                            $target.triggerHandler('resizeme.zf.trigger', [$target]);
                        }

                        if (mutationRecordsList[0].attributeName === "style") {
                            $target.closest("[data-mutate]").attr("data-events", "mutate");
                            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
                        }

                        break;

                    case "childList":
                        $target.closest("[data-mutate]").attr("data-events", "mutate");
                        $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
                        break;

                    default:
                        return false;
                    //nothing
                }
            };

            if ($nodes.length) {
                //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
                for (var i = 0; i <= $nodes.length - 1; i++) {
                    var elementObserver = new MutationObserver(listeningElementsMutation);
                    elementObserver.observe($nodes[i], {
                        attributes: true,
                        childList: true,
                        characterData: false,
                        subtree: true,
                        attributeFilter: ["data-events", "style"]
                    });
                }
            }
        };

        Triggers.Initializers.addSimpleListeners = function () {
            var $document = (0, _jquery2.default)(document);
            Triggers.Initializers.addOpenListener($document);
            Triggers.Initializers.addCloseListener($document);
            Triggers.Initializers.addToggleListener($document);
            Triggers.Initializers.addCloseableListener($document);
            Triggers.Initializers.addToggleFocusListener($document);
        };

        Triggers.Initializers.addGlobalListeners = function () {
            var $document = (0, _jquery2.default)(document);
            Triggers.Initializers.addMutationEventsListener($document);
            Triggers.Initializers.addResizeListener();
            Triggers.Initializers.addScrollListener();
            Triggers.Initializers.addClosemeListener();
        };

        Triggers.init = function ($$$1, Foundation) {
            onLoad($$$1(window), function () {
                if ($$$1.triggersInitialized !== true) {
                    Triggers.Initializers.addSimpleListeners();
                    Triggers.Initializers.addGlobalListeners();
                    $$$1.triggersInitialized = true;
                }
            });

            if (Foundation) {
                Foundation.Triggers = Triggers; // Legacy included to be backwards compatible for now.

                Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
            }
        };

// {function} _setup (replaces previous constructor),
// {function} _destroy (replaces previous destroy)

        var Plugin =
            /*#__PURE__*/
            function () {
                function Plugin(element, options) {
                    _classCallCheck(this, Plugin);

                    this._setup(element, options);

                    var pluginName = getPluginName(this);
                    this.uuid = GetYoDigits(6, pluginName);

                    if (!this.$element.attr("data-".concat(pluginName))) {
                        this.$element.attr("data-".concat(pluginName), this.uuid);
                    }

                    if (!this.$element.data('zfPlugin')) {
                        this.$element.data('zfPlugin', this);
                    }
                    /**
                     * Fires when the plugin has initialized.
                     * @event Plugin#init
                     */

                    this.$element.trigger("init.zf.".concat(pluginName));
                }

                _createClass(Plugin, [{
                    key: "destroy",
                    value: function destroy() {
                        this._destroy();

                        var pluginName = getPluginName(this);
                        this.$element.removeAttr("data-".concat(pluginName)).removeData('zfPlugin')
                            /**
                             * Fires when the plugin has been destroyed.
                             * @event Plugin#destroyed
                             */
                            .trigger("destroyed.zf.".concat(pluginName));

                        for (var prop in this) {
                            this[prop] = null; //clean up script to prep for garbage collection.
                        }
                    }
                }]);

                return Plugin;
            }(); // Convert PascalCase to kebab-case
// Thank you: http://stackoverflow.com/a/8955580


        function hyphenate$1(str) {
            return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
        }

        function getPluginName(obj) {
            if (typeof obj.constructor.name !== 'undefined') {
                return hyphenate$1(obj.constructor.name);
            } else {
                return hyphenate$1(obj.className);
            }
        }

        /**
         * Abide module.
         * @module foundation.abide
         */

        var Abide =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Abide, _Plugin);

                function Abide() {
                    _classCallCheck(this, Abide);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Abide).apply(this, arguments));
                }

                _createClass(Abide, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of Abide.
                     * @class
                     * @name Abide
                     * @fires Abide#init
                     * @param {Object} element - jQuery object to add the trigger to.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element) {
                        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                        this.$element = element;
                        this.options = _jquery2.default.extend(true, {}, Abide.defaults, this.$element.data(), options);
                        this.className = 'Abide'; // ie9 back compat

                        this._init();
                    }
                    /**
                     * Initializes the Abide plugin and calls functions to get Abide functioning on load.
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var _this2 = this;

                        this.$inputs = _jquery2.default.merge( // Consider as input to validate:
                            this.$element.find('input').not('[type=submit]'), // * all input fields expect submit
                            this.$element.find('textarea, select') // * all textareas and select fields
                        );
                        var $globalErrors = this.$element.find('[data-abide-error]'); // Add a11y attributes to all fields

                        if (this.options.a11yAttributes) {
                            this.$inputs.each(function (i, input) {
                                return _this2.addA11yAttributes((0, _jquery2.default)(input));
                            });
                            $globalErrors.each(function (i, error) {
                                return _this2.addGlobalErrorA11yAttributes((0, _jquery2.default)(error));
                            });
                        }

                        this._events();
                    }
                    /**
                     * Initializes events for Abide.
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this3 = this;

                        this.$element.off('.abide').on('reset.zf.abide', function () {
                            _this3.resetForm();
                        }).on('submit.zf.abide', function () {
                            return _this3.validateForm();
                        });

                        if (this.options.validateOn === 'fieldChange') {
                            this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {
                                _this3.validateInput((0, _jquery2.default)(e.target));
                            });
                        }

                        if (this.options.liveValidate) {
                            this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {
                                _this3.validateInput((0, _jquery2.default)(e.target));
                            });
                        }

                        if (this.options.validateOnBlur) {
                            this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {
                                _this3.validateInput((0, _jquery2.default)(e.target));
                            });
                        }
                    }
                    /**
                     * Calls necessary functions to update Abide upon DOM change
                     * @private
                     */

                }, {
                    key: "_reflow",
                    value: function _reflow() {
                        this._init();
                    }
                    /**
                     * Checks whether or not a form element has the required attribute and if it's checked or not
                     * @param {Object} element - jQuery object to check for required attribute
                     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
                     */

                }, {
                    key: "requiredCheck",
                    value: function requiredCheck($el) {
                        if (!$el.attr('required')) return true;
                        var isGood = true;

                        switch ($el[0].type) {
                            case 'checkbox':
                                isGood = $el[0].checked;
                                break;

                            case 'select':
                            case 'select-one':
                            case 'select-multiple':
                                var opt = $el.find('option:selected');
                                if (!opt.length || !opt.val()) isGood = false;
                                break;

                            default:
                                if (!$el.val() || !$el.val().length) isGood = false;
                        }

                        return isGood;
                    }
                    /**
                     * Get:
                     * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:
                     *   1. The element's direct sibling('s).
                     *   2. The element's parent's children.
                     * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.
                     *
                     * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
                     *
                     * @param {Object} $el - jQuery object to use as reference to find the form error selector.
                     * @returns {Object} jQuery object with the selector.
                     */

                }, {
                    key: "findFormError",
                    value: function findFormError($el) {
                        var id = $el[0].id;
                        var $error = $el.siblings(this.options.formErrorSelector);

                        if (!$error.length) {
                            $error = $el.parent().find(this.options.formErrorSelector);
                        }

                        if (id) {
                            $error = $error.add(this.$element.find("[data-form-error-for=\"".concat(id, "\"]")));
                        }

                        return $error;
                    }
                    /**
                     * Get the first element in this order:
                     * 2. The <label> with the attribute `[for="someInputId"]`
                     * 3. The `.closest()` <label>
                     *
                     * @param {Object} $el - jQuery object to check for required attribute
                     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
                     */

                }, {
                    key: "findLabel",
                    value: function findLabel($el) {
                        var id = $el[0].id;
                        var $label = this.$element.find("label[for=\"".concat(id, "\"]"));

                        if (!$label.length) {
                            return $el.closest('label');
                        }

                        return $label;
                    }
                    /**
                     * Get the set of labels associated with a set of radio els in this order
                     * 2. The <label> with the attribute `[for="someInputId"]`
                     * 3. The `.closest()` <label>
                     *
                     * @param {Object} $el - jQuery object to check for required attribute
                     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
                     */

                }, {
                    key: "findRadioLabels",
                    value: function findRadioLabels($els) {
                        var _this4 = this;

                        var labels = $els.map(function (i, el) {
                            var id = el.id;

                            var $label = _this4.$element.find("label[for=\"".concat(id, "\"]"));

                            if (!$label.length) {
                                $label = (0, _jquery2.default)(el).closest('label');
                            }

                            return $label[0];
                        });
                        return (0, _jquery2.default)(labels);
                    }
                    /**
                     * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
                     * @param {Object} $el - jQuery object to add the class to
                     */

                }, {
                    key: "addErrorClasses",
                    value: function addErrorClasses($el) {
                        var $label = this.findLabel($el);
                        var $formError = this.findFormError($el);

                        if ($label.length) {
                            $label.addClass(this.options.labelErrorClass);
                        }

                        if ($formError.length) {
                            $formError.addClass(this.options.formErrorClass);
                        }

                        $el.addClass(this.options.inputErrorClass).attr({
                            'data-invalid': '',
                            'aria-invalid': true
                        });
                    }
                    /**
                     * Adds [for] and [role=alert] attributes to all form error targetting $el,
                     * and [aria-describedby] attribute to $el toward the first form error.
                     * @param {Object} $el - jQuery object
                     */

                }, {
                    key: "addA11yAttributes",
                    value: function addA11yAttributes($el) {
                        var $errors = this.findFormError($el);
                        var $labels = $errors.filter('label');
                        var $error = $errors.first();
                        if (!$errors.length) return; // Set [aria-describedby] on the input toward the first form error if it is not set

                        if (typeof $el.attr('aria-describedby') === 'undefined') {
                            // Get the first error ID or create one
                            var errorId = $error.attr('id');

                            if (typeof errorId === 'undefined') {
                                errorId = GetYoDigits(6, 'abide-error');
                                $error.attr('id', errorId);
                            }
                            $el.attr('aria-describedby', errorId);
                        }

                        if ($labels.filter('[for]').length < $labels.length) {
                            // Get the input ID or create one
                            var elemId = $el.attr('id');

                            if (typeof elemId === 'undefined') {
                                elemId = GetYoDigits(6, 'abide-input');
                                $el.attr('id', elemId);
                            }

                            $labels.each(function (i, label) {
                                var $label = (0, _jquery2.default)(label);
                                if (typeof $label.attr('for') === 'undefined') $label.attr('for', elemId);
                            });
                        } // For each error targeting $el, set [role=alert] if it is not set.


                        $errors.each(function (i, label) {
                            var $label = (0, _jquery2.default)(label);
                            if (typeof $label.attr('role') === 'undefined') $label.attr('role', 'alert');
                        }).end();
                    }
                    /**
                     * Adds [aria-live] attribute to the given global form error $el.
                     * @param {Object} $el - jQuery object to add the attribute to
                     */

                }, {
                    key: "addGlobalErrorA11yAttributes",
                    value: function addGlobalErrorA11yAttributes($el) {
                        if (typeof $el.attr('aria-live') === 'undefined') $el.attr('aria-live', this.options.a11yErrorLevel);
                    }
                    /**
                     * Remove CSS error classes etc from an entire radio button group
                     * @param {String} groupName - A string that specifies the name of a radio button group
                     *
                     */

                }, {
                    key: "removeRadioErrorClasses",
                    value: function removeRadioErrorClasses(groupName) {
                        var $els = this.$element.find(":radio[name=\"".concat(groupName, "\"]"));
                        var $labels = this.findRadioLabels($els);
                        var $formErrors = this.findFormError($els);

                        if ($labels.length) {
                            $labels.removeClass(this.options.labelErrorClass);
                        }

                        if ($formErrors.length) {
                            $formErrors.removeClass(this.options.formErrorClass);
                        }

                        $els.removeClass(this.options.inputErrorClass).attr({
                            'data-invalid': null,
                            'aria-invalid': null
                        });
                    }
                    /**
                     * Removes CSS error class as specified by the Abide settings from the label, input, and the form
                     * @param {Object} $el - jQuery object to remove the class from
                     */

                }, {
                    key: "removeErrorClasses",
                    value: function removeErrorClasses($el) {
                        // radios need to clear all of the els
                        if ($el[0].type == 'radio') {
                            return this.removeRadioErrorClasses($el.attr('name'));
                        }

                        var $label = this.findLabel($el);
                        var $formError = this.findFormError($el);

                        if ($label.length) {
                            $label.removeClass(this.options.labelErrorClass);
                        }

                        if ($formError.length) {
                            $formError.removeClass(this.options.formErrorClass);
                        }

                        $el.removeClass(this.options.inputErrorClass).attr({
                            'data-invalid': null,
                            'aria-invalid': null
                        });
                    }
                    /**
                     * Goes through a form to find inputs and proceeds to validate them in ways specific to their type.
                     * Ignores inputs with data-abide-ignore, type="hidden" or disabled attributes set
                     * @fires Abide#invalid
                     * @fires Abide#valid
                     * @param {Object} element - jQuery object to validate, should be an HTML input
                     * @returns {Boolean} goodToGo - If the input is valid or not.
                     */

                }, {
                    key: "validateInput",
                    value: function validateInput($el) {
                        var clearRequire = this.requiredCheck($el),
                            validated = false,
                            customValidator = true,
                            validator = $el.attr('data-validator'),
                            equalTo = true; // don't validate ignored inputs or hidden inputs or disabled inputs

                        if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]') || $el.is('[disabled]')) {
                            return true;
                        }

                        switch ($el[0].type) {
                            case 'radio':
                                validated = this.validateRadio($el.attr('name'));
                                break;

                            case 'checkbox':
                                validated = clearRequire;
                                break;

                            case 'select':
                            case 'select-one':
                            case 'select-multiple':
                                validated = clearRequire;
                                break;

                            default:
                                validated = this.validateText($el);
                        }

                        if (validator) {
                            customValidator = this.matchValidation($el, validator, $el.attr('required'));
                        }

                        if ($el.attr('data-equalto')) {
                            equalTo = this.options.validators.equalTo($el);
                        }

                        var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
                        var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

                        if (goodToGo) {
                            // Re-validate inputs that depend on this one with equalto
                            var dependentElements = this.$element.find("[data-equalto=\"".concat($el.attr('id'), "\"]"));

                            if (dependentElements.length) {
                                var _this = this;

                                dependentElements.each(function () {
                                    if ((0, _jquery2.default)(this).val()) {
                                        _this.validateInput((0, _jquery2.default)(this));
                                    }
                                });
                            }
                        }

                        this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);
                        /**
                         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
                         * Trigger includes the DOM element of the input.
                         * @event Abide#valid
                         * @event Abide#invalid
                         */

                        $el.trigger(message, [$el]);
                        return goodToGo;
                    }
                    /**
                     * Goes through a form and if there are any invalid inputs, it will display the form error element
                     * @returns {Boolean} noError - true if no errors were detected...
                     * @fires Abide#formvalid
                     * @fires Abide#forminvalid
                     */

                }, {
                    key: "validateForm",
                    value: function validateForm() {
                        var _this5 = this;

                        var acc = [];

                        var _this = this;

                        this.$inputs.each(function () {
                            acc.push(_this.validateInput((0, _jquery2.default)(this)));
                        });
                        var noError = acc.indexOf(false) === -1;
                        this.$element.find('[data-abide-error]').each(function (i, elem) {
                            var $elem = (0, _jquery2.default)(elem); // Ensure a11y attributes are set

                            if (_this5.options.a11yAttributes) _this5.addGlobalErrorA11yAttributes($elem); // Show or hide the error

                            $elem.css('display', noError ? 'none' : 'block');
                        });
                        /**
                         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
                         * Trigger includes the element of the form.
                         * @event Abide#formvalid
                         * @event Abide#forminvalid
                         */

                        this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);
                        return noError;
                    }
                    /**
                     * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
                     * @param {Object} $el - jQuery object to validate, should be a text input HTML element
                     * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
                     * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
                     */

                }, {
                    key: "validateText",
                    value: function validateText($el, pattern) {
                        // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
                        pattern = pattern || $el.attr('pattern') || $el.attr('type');
                        var inputText = $el.val();
                        var valid = false;

                        if (inputText.length) {
                            // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
                            if (this.options.patterns.hasOwnProperty(pattern)) {
                                valid = this.options.patterns[pattern].test(inputText);
                            } // If the pattern name isn't also the type attribute of the field, then test it as a regexp
                            else if (pattern !== $el.attr('type')) {
                                valid = new RegExp(pattern).test(inputText);
                            } else {
                                valid = true;
                            }
                        } // An empty field is valid if it's not required
                        else if (!$el.prop('required')) {
                            valid = true;
                        }

                        return valid;
                    }
                    /**
                     * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
                     * @param {String} groupName - A string that specifies the name of a radio button group
                     * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
                     */

                }, {
                    key: "validateRadio",
                    value: function validateRadio(groupName) {
                        // If at least one radio in the group has the `required` attribute, the group is considered required
                        // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
                        var $group = this.$element.find(":radio[name=\"".concat(groupName, "\"]"));
                        var valid = false,
                            required = false; // For the group to be required, at least one radio needs to be required

                        $group.each(function (i, e) {
                            if ((0, _jquery2.default)(e).attr('required')) {
                                required = true;
                            }
                        });
                        if (!required) valid = true;

                        if (!valid) {
                            // For the group to be valid, at least one radio needs to be checked
                            $group.each(function (i, e) {
                                if ((0, _jquery2.default)(e).prop('checked')) {
                                    valid = true;
                                }
                            });
                        }
                        return valid;
                    }
                    /**
                     * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
                     * @param {Object} $el - jQuery input element.
                     * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
                     * @param {Boolean} required - self explanatory?
                     * @returns {Boolean} - true if validations passed.
                     */

                }, {
                    key: "matchValidation",
                    value: function matchValidation($el, validators, required) {
                        var _this6 = this;

                        required = required ? true : false;
                        var clear = validators.split(' ').map(function (v) {
                            return _this6.options.validators[v]($el, required, $el.parent());
                        });
                        return clear.indexOf(false) === -1;
                    }
                    /**
                     * Resets form inputs and styles
                     * @fires Abide#formreset
                     */

                }, {
                    key: "resetForm",
                    value: function resetForm() {
                        var $form = this.$element,
                            opts = this.options;
                        (0, _jquery2.default)(".".concat(opts.labelErrorClass), $form).not('small').removeClass(opts.labelErrorClass);
                        (0, _jquery2.default)(".".concat(opts.inputErrorClass), $form).not('small').removeClass(opts.inputErrorClass);
                        (0, _jquery2.default)("".concat(opts.formErrorSelector, ".").concat(opts.formErrorClass)).removeClass(opts.formErrorClass);
                        $form.find('[data-abide-error]').css('display', 'none');
                        (0, _jquery2.default)(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').attr({
                            'data-invalid': null,
                            'aria-invalid': null
                        });
                        (0, _jquery2.default)(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).attr({
                            'data-invalid': null,
                            'aria-invalid': null
                        });
                        (0, _jquery2.default)(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).attr({
                            'data-invalid': null,
                            'aria-invalid': null
                        });
                        /**
                         * Fires when the form has been reset.
                         * @event Abide#formreset
                         */

                        $form.trigger('formreset.zf.abide', [$form]);
                    }
                    /**
                     * Destroys an instance of Abide.
                     * Removes error styles and classes from elements, without resetting their values.
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        var _this = this;

                        this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');
                        this.$inputs.off('.abide').each(function () {
                            _this.removeErrorClasses((0, _jquery2.default)(this));
                        });
                    }
                }]);

                return Abide;
            }(Plugin);
        /**
         * Default settings for plugin
         */

        Abide.defaults = {
            /**
             * The default event to validate inputs. Checkboxes and radios validate immediately.
             * Remove or change this value for manual validation.
             * @option
             * @type {?string}
             * @default 'fieldChange'
             */
            validateOn: 'fieldChange',

            /**
             * Class to be applied to input labels on failed validation.
             * @option
             * @type {string}
             * @default 'is-invalid-label'
             */
            labelErrorClass: 'is-invalid-label',

            /**
             * Class to be applied to inputs on failed validation.
             * @option
             * @type {string}
             * @default 'is-invalid-input'
             */
            inputErrorClass: 'is-invalid-input',

            /**
             * Class selector to use to target Form Errors for show/hide.
             * @option
             * @type {string}
             * @default '.form-error'
             */
            formErrorSelector: '.form-error',

            /**
             * Class added to Form Errors on failed validation.
             * @option
             * @type {string}
             * @default 'is-visible'
             */
            formErrorClass: 'is-visible',

            /**
             * If true, automatically insert when possible:
             * - `[aria-describedby]` on fields
             * - `[role=alert]` on form errors and `[for]` on form error labels
             * - `[aria-live]` on global errors `[data-abide-error]` (see option `a11yErrorLevel`).
             * @option
             * @type {boolean}
             * @default true
             */
            a11yAttributes: true,

            /**
             * [aria-live] attribute value to be applied on global errors `[data-abide-error]`.
             * Options are: 'assertive', 'polite' and 'off'/null
             * @option
             * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions
             * @type {string}
             * @default 'assertive'
             */
            a11yErrorLevel: 'assertive',

            /**
             * Set to true to validate text inputs on any value change.
             * @option
             * @type {boolean}
             * @default false
             */
            liveValidate: false,

            /**
             * Set to true to validate inputs on blur.
             * @option
             * @type {boolean}
             * @default false
             */
            validateOnBlur: false,
            patterns: {
                alpha: /^[a-zA-Z]+$/,
                alpha_numeric: /^[a-zA-Z0-9]+$/,
                integer: /^[-+]?\d+$/,
                number: /^[-+]?\d*(?:[\.\,]\d+)?$/,
                // amex, visa, diners
                card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
                cvv: /^([0-9]){3,4}$/,
                // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
                email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,
                // From CommonRegexJS (@talyssonoc)
                // https://github.com/talyssonoc/CommonRegexJS/blob/e2901b9f57222bc14069dc8f0598d5f412555411/lib/commonregex.js#L76
                // For more restrictive URL Regexs, see https://mathiasbynens.be/demo/url-regex.
                url: /^((?:(https?|ftps?|file|ssh|sftp):\/\/|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\((?:[^\s()<>]+|(?:\([^\s()<>]+\)))*\))+(?:\((?:[^\s()<>]+|(?:\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:\'".,<>?\xab\xbb\u201c\u201d\u2018\u2019]))$/,
                // abc.de
                domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,
                datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
                // YYYY-MM-DD
                date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
                // HH:MM:SS
                time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
                dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
                // MM/DD/YYYY
                month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
                // DD/MM/YYYY
                day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,
                // #FFF or #FFFFFF
                color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,
                // Domain || URL
                website: {
                    test: function test(text) {
                        return Abide.defaults.patterns['domain'].test(text) || Abide.defaults.patterns['url'].test(text);
                    }
                }
            },

            /**
             * Optional validation functions to be used. `equalTo` being the only default included function.
             * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
             * el : The jQuery element to validate.
             * required : Boolean value of the required attribute be present or not.
             * parent : The direct parent of the input.
             * @option
             */
            validators: {
                equalTo: function equalTo(el, required, parent) {
                    return (0, _jquery2.default)("#".concat(el.attr('data-equalto'))).val() === el.val();
                }
            }
        };

        /**
         * Accordion module.
         * @module foundation.accordion
         * @requires foundation.util.keyboard
         */

        var Accordion =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Accordion, _Plugin);

                function Accordion() {
                    _classCallCheck(this, Accordion);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Accordion).apply(this, arguments));
                }

                _createClass(Accordion, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of an accordion.
                     * @class
                     * @name Accordion
                     * @fires Accordion#init
                     * @param {jQuery} element - jQuery object to make into an accordion.
                     * @param {Object} options - a plain object with settings to override the default options.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Accordion.defaults, this.$element.data(), options);
                        this.className = 'Accordion'; // ie9 back compat

                        this._init();

                        Keyboard.register('Accordion', {
                            'ENTER': 'toggle',
                            'SPACE': 'toggle',
                            'ARROW_DOWN': 'next',
                            'ARROW_UP': 'previous'
                        });
                    }
                    /**
                     * Initializes the accordion by animating the preset active pane(s).
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var _this2 = this;

                        this._isInitializing = true;
                        this.$element.attr('role', 'tablist');
                        this.$tabs = this.$element.children('[data-accordion-item]');
                        this.$tabs.each(function (idx, el) {
                            var $el = (0, _jquery2.default)(el),
                                $content = $el.children('[data-tab-content]'),
                                id = $content[0].id || GetYoDigits(6, 'accordion'),
                                linkId = el.id ? "".concat(el.id, "-label") : "".concat(id, "-label");
                            $el.find('a:first').attr({
                                'aria-controls': id,
                                'role': 'tab',
                                'id': linkId,
                                'aria-expanded': false,
                                'aria-selected': false
                            });
                            $content.attr({
                                'role': 'tabpanel',
                                'aria-labelledby': linkId,
                                'aria-hidden': true,
                                'id': id
                            });
                        });
                        var $initActive = this.$element.find('.is-active').children('[data-tab-content]');

                        if ($initActive.length) {
                            // Save up the initial hash to return to it later when going back in history
                            this._initialAnchor = $initActive.prev('a').attr('href');

                            this._openSingleTab($initActive);
                        }

                        this._checkDeepLink = function () {
                            var anchor = window.location.hash;

                            if (!anchor.length) {
                                // If we are still initializing and there is no anchor, then there is nothing to do
                                if (_this2._isInitializing) return; // Otherwise, move to the initial anchor

                                if (_this2._initialAnchor) anchor = _this2._initialAnchor;
                            }

                            var $anchor = anchor && (0, _jquery2.default)(anchor);

                            var $link = anchor && _this2.$element.find("[href$=\"".concat(anchor, "\"]")); // Whether the anchor element that has been found is part of this element


                            var isOwnAnchor = !!($anchor.length && $link.length); // If there is an anchor for the hash, open it (if not already active)

                            if ($anchor && $link && $link.length) {
                                if (!$link.parent('[data-accordion-item]').hasClass('is-active')) {
                                    _this2._openSingleTab($anchor);
                                }
                            } // Otherwise, close everything
                            else {
                                _this2._closeAllTabs();
                            }

                            if (isOwnAnchor) {
                                // Roll up a little to show the titles
                                if (_this2.options.deepLinkSmudge) {
                                    onLoad((0, _jquery2.default)(window), function () {
                                        var offset = _this2.$element.offset();

                                        (0, _jquery2.default)('html, body').animate({
                                            scrollTop: offset.top
                                        }, _this2.options.deepLinkSmudgeDelay);
                                    });
                                }
                                /**
                                 * Fires when the plugin has deeplinked at pageload
                                 * @event Accordion#deeplink
                                 */

                                _this2.$element.trigger('deeplink.zf.accordion', [$link, $anchor]);
                            }
                        }; //use browser to open a tab, if it exists in this tabset


                        if (this.options.deepLink) {
                            this._checkDeepLink();
                        }

                        this._events();

                        this._isInitializing = false;
                    }
                    /**
                     * Adds event handlers for items within the accordion.
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this = this;

                        this.$tabs.each(function () {
                            var $elem = (0, _jquery2.default)(this);
                            var $tabContent = $elem.children('[data-tab-content]');

                            if ($tabContent.length) {
                                $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
                                    e.preventDefault();

                                    _this.toggle($tabContent);
                                }).on('keydown.zf.accordion', function (e) {
                                    Keyboard.handleKey(e, 'Accordion', {
                                        toggle: function toggle() {
                                            _this.toggle($tabContent);
                                        },
                                        next: function next() {
                                            var $a = $elem.next().find('a').focus();

                                            if (!_this.options.multiExpand) {
                                                $a.trigger('click.zf.accordion');
                                            }
                                        },
                                        previous: function previous() {
                                            var $a = $elem.prev().find('a').focus();

                                            if (!_this.options.multiExpand) {
                                                $a.trigger('click.zf.accordion');
                                            }
                                        },
                                        handled: function handled() {
                                            e.preventDefault();
                                            e.stopPropagation();
                                        }
                                    });
                                });
                            }
                        });

                        if (this.options.deepLink) {
                            (0, _jquery2.default)(window).on('hashchange', this._checkDeepLink);
                        }
                    }
                    /**
                     * Toggles the selected content pane's open/close state.
                     * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
                     * @function
                     */

                }, {
                    key: "toggle",
                    value: function toggle($target) {
                        if ($target.closest('[data-accordion]').is('[disabled]')) {
                            console.info('Cannot toggle an accordion that is disabled.');
                            return;
                        }

                        if ($target.parent().hasClass('is-active')) {
                            this.up($target);
                        } else {
                            this.down($target);
                        } //either replace or update browser history


                        if (this.options.deepLink) {
                            var anchor = $target.prev('a').attr('href');

                            if (this.options.updateHistory) {
                                history.pushState({}, '', anchor);
                            } else {
                                history.replaceState({}, '', anchor);
                            }
                        }
                    }
                    /**
                     * Opens the accordion tab defined by `$target`.
                     * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
                     * @fires Accordion#down
                     * @function
                     */

                }, {
                    key: "down",
                    value: function down($target) {
                        if ($target.closest('[data-accordion]').is('[disabled]')) {
                            console.info('Cannot call down on an accordion that is disabled.');
                            return;
                        }

                        if (this.options.multiExpand) this._openTab($target); else this._openSingleTab($target);
                    }
                    /**
                     * Closes the tab defined by `$target`.
                     * It may be ignored if the Accordion options don't allow it.
                     *
                     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
                     * @fires Accordion#up
                     * @function
                     */

                }, {
                    key: "up",
                    value: function up($target) {
                        if (this.$element.is('[disabled]')) {
                            console.info('Cannot call up on an accordion that is disabled.');
                            return;
                        } // Don't close the item if it is already closed


                        var $targetItem = $target.parent();
                        if (!$targetItem.hasClass('is-active')) return; // Don't close the item if there is no other active item (unless with `allowAllClosed`)

                        var $othersItems = $targetItem.siblings();
                        if (!this.options.allowAllClosed && !$othersItems.hasClass('is-active')) return;

                        this._closeTab($target);
                    }
                    /**
                     * Make the tab defined by `$target` the only opened tab, closing all others tabs.
                     * @param {jQuery} $target - Accordion tab to open (`.accordion-content`).
                     * @function
                     * @private
                     */

                }, {
                    key: "_openSingleTab",
                    value: function _openSingleTab($target) {
                        // Close all the others active tabs.
                        var $activeContents = this.$element.children('.is-active').children('[data-tab-content]');

                        if ($activeContents.length) {
                            this._closeTab($activeContents.not($target));
                        } // Then open the target.


                        this._openTab($target);
                    }
                    /**
                     * Opens the tab defined by `$target`.
                     * @param {jQuery} $target - Accordion tab to open (`.accordion-content`).
                     * @fires Accordion#down
                     * @function
                     * @private
                     */

                }, {
                    key: "_openTab",
                    value: function _openTab($target) {
                        var _this3 = this;

                        var $targetItem = $target.parent();
                        var targetContentId = $target.attr('aria-labelledby');
                        $target.attr('aria-hidden', false);
                        $targetItem.addClass('is-active');
                        (0, _jquery2.default)("#".concat(targetContentId)).attr({
                            'aria-expanded': true,
                            'aria-selected': true
                        });
                        $target.slideDown(this.options.slideSpeed, function () {
                            /**
                             * Fires when the tab is done opening.
                             * @event Accordion#down
                             */
                            _this3.$element.trigger('down.zf.accordion', [$target]);
                        });
                    }
                    /**
                     * Closes the tab defined by `$target`.
                     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
                     * @fires Accordion#up
                     * @function
                     * @private
                     */

                }, {
                    key: "_closeTab",
                    value: function _closeTab($target) {
                        var _this4 = this;

                        var $targetItem = $target.parent();
                        var targetContentId = $target.attr('aria-labelledby');
                        $target.attr('aria-hidden', true);
                        $targetItem.removeClass('is-active');
                        (0, _jquery2.default)("#".concat(targetContentId)).attr({
                            'aria-expanded': false,
                            'aria-selected': false
                        });
                        $target.slideUp(this.options.slideSpeed, function () {
                            /**
                             * Fires when the tab is done collapsing up.
                             * @event Accordion#up
                             */
                            _this4.$element.trigger('up.zf.accordion', [$target]);
                        });
                    }
                    /**
                     * Closes all active tabs
                     * @fires Accordion#up
                     * @function
                     * @private
                     */

                }, {
                    key: "_closeAllTabs",
                    value: function _closeAllTabs() {
                        var $activeTabs = this.$element.children('.is-active').children('[data-tab-content]');

                        if ($activeTabs.length) {
                            this._closeTab($activeTabs);
                        }
                    }
                    /**
                     * Destroys an instance of an accordion.
                     * @fires Accordion#destroyed
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
                        this.$element.find('a').off('.zf.accordion');

                        if (this.options.deepLink) {
                            (0, _jquery2.default)(window).off('hashchange', this._checkDeepLink);
                        }
                    }
                }]);

                return Accordion;
            }(Plugin);

        Accordion.defaults = {
            /**
             * Amount of time to animate the opening of an accordion pane.
             * @option
             * @type {number}
             * @default 250
             */
            slideSpeed: 250,

            /**
             * Allow the accordion to have multiple open panes.
             * @option
             * @type {boolean}
             * @default false
             */
            multiExpand: false,

            /**
             * Allow the accordion to close all panes.
             * @option
             * @type {boolean}
             * @default false
             */
            allowAllClosed: false,

            /**
             * Link the location hash to the open pane.
             * Set the location hash when the opened pane changes, and open and scroll to the corresponding pane when the location changes.
             * @option
             * @type {boolean}
             * @default false
             */
            deepLink: false,

            /**
             * If `deepLink` is enabled, adjust the deep link scroll to make sure the top of the accordion panel is visible
             * @option
             * @type {boolean}
             * @default false
             */
            deepLinkSmudge: false,

            /**
             * If `deepLinkSmudge` is enabled, animation time (ms) for the deep link adjustment
             * @option
             * @type {number}
             * @default 300
             */
            deepLinkSmudgeDelay: 300,

            /**
             * If `deepLink` is enabled, update the browser history with the open accordion
             * @option
             * @type {boolean}
             * @default false
             */
            updateHistory: false
        };

        /**
         * AccordionMenu module.
         * @module foundation.accordionMenu
         * @requires foundation.util.keyboard
         * @requires foundation.util.nest
         */

        var AccordionMenu =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(AccordionMenu, _Plugin);

                function AccordionMenu() {
                    _classCallCheck(this, AccordionMenu);

                    return _possibleConstructorReturn(this, _getPrototypeOf(AccordionMenu).apply(this, arguments));
                }

                _createClass(AccordionMenu, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of an accordion menu.
                     * @class
                     * @name AccordionMenu
                     * @fires AccordionMenu#init
                     * @param {jQuery} element - jQuery object to make into an accordion menu.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, AccordionMenu.defaults, this.$element.data(), options);
                        this.className = 'AccordionMenu'; // ie9 back compat

                        this._init();

                        Keyboard.register('AccordionMenu', {
                            'ENTER': 'toggle',
                            'SPACE': 'toggle',
                            'ARROW_RIGHT': 'open',
                            'ARROW_UP': 'up',
                            'ARROW_DOWN': 'down',
                            'ARROW_LEFT': 'close',
                            'ESCAPE': 'closeAll'
                        });
                    }
                    /**
                     * Initializes the accordion menu by hiding all nested menus.
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        Nest.Feather(this.$element, 'accordion');

                        var _this = this;

                        this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');

                        this.$element.attr({
                            'role': 'tree',
                            'aria-multiselectable': this.options.multiOpen
                        });
                        this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
                        this.$menuLinks.each(function () {
                            var linkId = this.id || GetYoDigits(6, 'acc-menu-link'),
                                $elem = (0, _jquery2.default)(this),
                                $sub = $elem.children('[data-submenu]'),
                                subId = $sub[0].id || GetYoDigits(6, 'acc-menu'),
                                isActive = $sub.hasClass('is-active');

                            if (_this.options.parentLink) {
                                var $anchor = $elem.children('a');
                                $anchor.clone().prependTo($sub).wrap('<li data-is-parent-link class="is-submenu-parent-item is-submenu-item is-accordion-submenu-item"></li>');
                            }

                            if (_this.options.submenuToggle) {
                                $elem.addClass('has-submenu-toggle');
                                $elem.children('a').after('<button id="' + linkId + '" class="submenu-toggle" aria-controls="' + subId + '" aria-expanded="' + isActive + '" title="' + _this.options.submenuToggleText + '"><span class="submenu-toggle-text">' + _this.options.submenuToggleText + '</span></button>');
                            } else {
                                $elem.attr({
                                    'aria-controls': subId,
                                    'aria-expanded': isActive,
                                    'id': linkId
                                });
                            }

                            $sub.attr({
                                'aria-labelledby': linkId,
                                'aria-hidden': !isActive,
                                'role': 'group',
                                'id': subId
                            });
                        });
                        this.$element.find('li').attr({
                            'role': 'treeitem'
                        });
                        var initPanes = this.$element.find('.is-active');

                        if (initPanes.length) {
                            var _this = this;

                            initPanes.each(function () {
                                _this.down((0, _jquery2.default)(this));
                            });
                        }

                        this._events();
                    }
                    /**
                     * Adds event handlers for items within the menu.
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this = this;

                        this.$element.find('li').each(function () {
                            var $submenu = (0, _jquery2.default)(this).children('[data-submenu]');

                            if ($submenu.length) {
                                if (_this.options.submenuToggle) {
                                    (0, _jquery2.default)(this).children('.submenu-toggle').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
                                        _this.toggle($submenu);
                                    });
                                } else {
                                    (0, _jquery2.default)(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
                                        e.preventDefault();

                                        _this.toggle($submenu);
                                    });
                                }
                            }
                        }).on('keydown.zf.accordionmenu', function (e) {
                            var $element = (0, _jquery2.default)(this),
                                $elements = $element.parent('ul').children('li'),
                                $prevElement,
                                $nextElement,
                                $target = $element.children('[data-submenu]');
                            $elements.each(function (i) {
                                if ((0, _jquery2.default)(this).is($element)) {
                                    $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
                                    $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

                                    if ((0, _jquery2.default)(this).children('[data-submenu]:visible').length) {
                                        // has open sub menu
                                        $nextElement = $element.find('li:first-child').find('a').first();
                                    }

                                    if ((0, _jquery2.default)(this).is(':first-child')) {
                                        // is first element of sub menu
                                        $prevElement = $element.parents('li').first().find('a').first();
                                    } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
                                        // if previous element has open sub menu
                                        $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
                                    }

                                    if ((0, _jquery2.default)(this).is(':last-child')) {
                                        // is last element of sub menu
                                        $nextElement = $element.parents('li').first().next('li').find('a').first();
                                    }

                                    return;
                                }
                            });
                            Keyboard.handleKey(e, 'AccordionMenu', {
                                open: function open() {
                                    if ($target.is(':hidden')) {
                                        _this.down($target);

                                        $target.find('li').first().find('a').first().focus();
                                    }
                                },
                                close: function close() {
                                    if ($target.length && !$target.is(':hidden')) {
                                        // close active sub of this item
                                        _this.up($target);
                                    } else if ($element.parent('[data-submenu]').length) {
                                        // close currently open sub
                                        _this.up($element.parent('[data-submenu]'));

                                        $element.parents('li').first().find('a').first().focus();
                                    }
                                },
                                up: function up() {
                                    $prevElement.focus();
                                    return true;
                                },
                                down: function down() {
                                    $nextElement.focus();
                                    return true;
                                },
                                toggle: function toggle() {
                                    if (_this.options.submenuToggle) {
                                        return false;
                                    }

                                    if ($element.children('[data-submenu]').length) {
                                        _this.toggle($element.children('[data-submenu]'));

                                        return true;
                                    }
                                },
                                closeAll: function closeAll() {
                                    _this.hideAll();
                                },
                                handled: function handled(preventDefault) {
                                    if (preventDefault) {
                                        e.preventDefault();
                                    }

                                    e.stopImmediatePropagation();
                                }
                            });
                        }); //.attr('tabindex', 0);
                    }
                    /**
                     * Closes all panes of the menu.
                     * @function
                     */

                }, {
                    key: "hideAll",
                    value: function hideAll() {
                        this.up(this.$element.find('[data-submenu]'));
                    }
                    /**
                     * Opens all panes of the menu.
                     * @function
                     */

                }, {
                    key: "showAll",
                    value: function showAll() {
                        this.down(this.$element.find('[data-submenu]'));
                    }
                    /**
                     * Toggles the open/close state of a submenu.
                     * @function
                     * @param {jQuery} $target - the submenu to toggle
                     */

                }, {
                    key: "toggle",
                    value: function toggle($target) {
                        if (!$target.is(':animated')) {
                            if (!$target.is(':hidden')) {
                                this.up($target);
                            } else {
                                this.down($target);
                            }
                        }
                    }
                    /**
                     * Opens the sub-menu defined by `$target`.
                     * @param {jQuery} $target - Sub-menu to open.
                     * @fires AccordionMenu#down
                     */

                }, {
                    key: "down",
                    value: function down($target) {
                        var _this2 = this;

                        if (!this.options.multiOpen) {
                            this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
                        }

                        $target.addClass('is-active').attr({
                            'aria-hidden': false
                        });

                        if (this.options.submenuToggle) {
                            $target.prev('.submenu-toggle').attr({
                                'aria-expanded': true
                            });
                        } else {
                            $target.parent('.is-accordion-submenu-parent').attr({
                                'aria-expanded': true
                            });
                        }

                        $target.slideDown(this.options.slideSpeed, function () {
                            /**
                             * Fires when the menu is done opening.
                             * @event AccordionMenu#down
                             */
                            _this2.$element.trigger('down.zf.accordionMenu', [$target]);
                        });
                    }
                    /**
                     * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
                     * @param {jQuery} $target - Sub-menu to close.
                     * @fires AccordionMenu#up
                     */

                }, {
                    key: "up",
                    value: function up($target) {
                        var _this3 = this;

                        var $submenus = $target.find('[data-submenu]');
                        var $allmenus = $target.add($submenus);
                        $submenus.slideUp(0);
                        $allmenus.removeClass('is-active').attr('aria-hidden', true);

                        if (this.options.submenuToggle) {
                            $allmenus.prev('.submenu-toggle').attr('aria-expanded', false);
                        } else {
                            $allmenus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
                        }

                        $target.slideUp(this.options.slideSpeed, function () {
                            /**
                             * Fires when the menu is done collapsing up.
                             * @event AccordionMenu#up
                             */
                            _this3.$element.trigger('up.zf.accordionMenu', [$target]);
                        });
                    }
                    /**
                     * Destroys an instance of accordion menu.
                     * @fires AccordionMenu#destroyed
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.find('[data-submenu]').slideDown(0).css('display', '');
                        this.$element.find('a').off('click.zf.accordionMenu');
                        this.$element.find('[data-is-parent-link]').detach();

                        if (this.options.submenuToggle) {
                            this.$element.find('.has-submenu-toggle').removeClass('has-submenu-toggle');
                            this.$element.find('.submenu-toggle').remove();
                        }

                        Nest.Burn(this.$element, 'accordion');
                    }
                }]);

                return AccordionMenu;
            }(Plugin);

        AccordionMenu.defaults = {
            /**
             * Adds the parent link to the submenu.
             * @option
             * @type {boolean}
             * @default false
             */
            parentLink: false,

            /**
             * Amount of time to animate the opening of a submenu in ms.
             * @option
             * @type {number}
             * @default 250
             */
            slideSpeed: 250,

            /**
             * Adds a separate submenu toggle button. This allows the parent item to have a link.
             * @option
             * @example true
             */
            submenuToggle: false,

            /**
             * The text used for the submenu toggle if enabled. This is used for screen readers only.
             * @option
             * @example true
             */
            submenuToggleText: 'Toggle menu',

            /**
             * Allow the menu to have multiple open panes.
             * @option
             * @type {boolean}
             * @default true
             */
            multiOpen: true
        };

        /**
         * Drilldown module.
         * @module foundation.drilldown
         * @requires foundation.util.keyboard
         * @requires foundation.util.nest
         * @requires foundation.util.box
         */

        var Drilldown =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Drilldown, _Plugin);

                function Drilldown() {
                    _classCallCheck(this, Drilldown);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Drilldown).apply(this, arguments));
                }

                _createClass(Drilldown, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of a drilldown menu.
                     * @class
                     * @name Drilldown
                     * @param {jQuery} element - jQuery object to make into an accordion menu.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Drilldown.defaults, this.$element.data(), options);
                        this.className = 'Drilldown'; // ie9 back compat

                        this._init();

                        Keyboard.register('Drilldown', {
                            'ENTER': 'open',
                            'SPACE': 'open',
                            'ARROW_RIGHT': 'next',
                            'ARROW_UP': 'up',
                            'ARROW_DOWN': 'down',
                            'ARROW_LEFT': 'previous',
                            'ESCAPE': 'close',
                            'TAB': 'down',
                            'SHIFT_TAB': 'up'
                        });
                    }
                    /**
                     * Initializes the drilldown by creating jQuery collections of elements
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        Nest.Feather(this.$element, 'drilldown');

                        if (this.options.autoApplyClass) {
                            this.$element.addClass('drilldown');
                        }

                        this.$element.attr({
                            'role': 'tree',
                            'aria-multiselectable': false
                        });
                        this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');
                        this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]').attr('role', 'group');
                        this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'treeitem').find('a'); // Set the main menu as current by default (unless a submenu is selected)
                        // Used to set the wrapper height when the drilldown is closed/reopened from any (sub)menu

                        this.$currentMenu = this.$element;
                        this.$element.attr('data-mutate', this.$element.attr('data-drilldown') || GetYoDigits(6, 'drilldown'));

                        this._prepareMenu();

                        this._registerEvents();

                        this._keyboardEvents();
                    }
                    /**
                     * prepares drilldown menu by setting attributes to links and elements
                     * sets a min height to prevent content jumping
                     * wraps the element if not already wrapped
                     * @private
                     * @function
                     */

                }, {
                    key: "_prepareMenu",
                    value: function _prepareMenu() {
                        var _this = this; // if(!this.options.holdOpen){
                        //   this._menuLinkEvents();
                        // }


                        this.$submenuAnchors.each(function () {
                            var $link = (0, _jquery2.default)(this);
                            var $sub = $link.parent();

                            if (_this.options.parentLink) {
                                $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li data-is-parent-link class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menuitem"></li>');
                            }

                            $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);
                            $link.children('[data-submenu]').attr({
                                'aria-hidden': true,
                                'tabindex': 0,
                                'role': 'group'
                            });

                            _this._events($link);
                        });
                        this.$submenus.each(function () {
                            var $menu = (0, _jquery2.default)(this),
                                $back = $menu.find('.js-drilldown-back');

                            if (!$back.length) {
                                switch (_this.options.backButtonPosition) {
                                    case "bottom":
                                        $menu.append(_this.options.backButton);
                                        break;

                                    case "top":
                                        $menu.prepend(_this.options.backButton);
                                        break;

                                    default:
                                        console.error("Unsupported backButtonPosition value '" + _this.options.backButtonPosition + "'");
                                }
                            }

                            _this._back($menu);
                        });
                        this.$submenus.addClass('invisible');

                        if (!this.options.autoHeight) {
                            this.$submenus.addClass('drilldown-submenu-cover-previous');
                        } // create a wrapper on element if it doesn't exist.


                        if (!this.$element.parent().hasClass('is-drilldown')) {
                            this.$wrapper = (0, _jquery2.default)(this.options.wrapper).addClass('is-drilldown');
                            if (this.options.animateHeight) this.$wrapper.addClass('animate-height');
                            this.$element.wrap(this.$wrapper);
                        } // set wrapper


                        this.$wrapper = this.$element.parent();
                        this.$wrapper.css(this._getMaxDims());
                    }
                }, {
                    key: "_resize",
                    value: function _resize() {
                        this.$wrapper.css({
                            'max-width': 'none',
                            'min-height': 'none'
                        }); // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths

                        this.$wrapper.css(this._getMaxDims());
                    }
                    /**
                     * Adds event handlers to elements in the menu.
                     * @function
                     * @private
                     * @param {jQuery} $elem - the current menu item to add handlers to.
                     */

                }, {
                    key: "_events",
                    value: function _events($elem) {
                        var _this = this;

                        $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
                            if ((0, _jquery2.default)(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
                                e.stopImmediatePropagation();
                                e.preventDefault();
                            } // if(e.target !== e.currentTarget.firstElementChild){
                            //   return false;
                            // }


                            _this._show($elem.parent('li'));

                            if (_this.options.closeOnClick) {
                                var $body = (0, _jquery2.default)('body');
                                $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {
                                    if (e.target === _this.$element[0] || _jquery2.default.contains(_this.$element[0], e.target)) {
                                        return;
                                    }

                                    e.preventDefault();

                                    _this._hideAll();

                                    $body.off('.zf.drilldown');
                                });
                            }
                        });
                    }
                    /**
                     * Adds event handlers to the menu element.
                     * @function
                     * @private
                     */

                }, {
                    key: "_registerEvents",
                    value: function _registerEvents() {
                        if (this.options.scrollTop) {
                            this._bindHandler = this._scrollTop.bind(this);
                            this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown', this._bindHandler);
                        }

                        this.$element.on('mutateme.zf.trigger', this._resize.bind(this));
                    }
                    /**
                     * Scroll to Top of Element or data-scroll-top-element
                     * @function
                     * @fires Drilldown#scrollme
                     */

                }, {
                    key: "_scrollTop",
                    value: function _scrollTop() {
                        var _this = this;

                        var $scrollTopElement = _this.options.scrollTopElement != '' ? (0, _jquery2.default)(_this.options.scrollTopElement) : _this.$element,
                            scrollPos = parseInt($scrollTopElement.offset().top + _this.options.scrollTopOffset, 10);
                        (0, _jquery2.default)('html, body').stop(true).animate({
                            scrollTop: scrollPos
                        }, _this.options.animationDuration, _this.options.animationEasing, function () {
                            /**
                             * Fires after the menu has scrolled
                             * @event Drilldown#scrollme
                             */
                            if (this === (0, _jquery2.default)('html')[0]) _this.$element.trigger('scrollme.zf.drilldown');
                        });
                    }
                    /**
                     * Adds keydown event listener to `li`'s in the menu.
                     * @private
                     */

                }, {
                    key: "_keyboardEvents",
                    value: function _keyboardEvents() {
                        var _this = this;

                        this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function (e) {
                            var $element = (0, _jquery2.default)(this),
                                $elements = $element.parent('li').parent('ul').children('li').children('a'),
                                $prevElement,
                                $nextElement;
                            $elements.each(function (i) {
                                if ((0, _jquery2.default)(this).is($element)) {
                                    $prevElement = $elements.eq(Math.max(0, i - 1));
                                    $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
                                    return;
                                }
                            });
                            Keyboard.handleKey(e, 'Drilldown', {
                                next: function next() {
                                    if ($element.is(_this.$submenuAnchors)) {
                                        _this._show($element.parent('li'));

                                        $element.parent('li').one(transitionend($element), function () {
                                            $element.parent('li').find('ul li a').not('.js-drilldown-back a').first().focus();
                                        });
                                        return true;
                                    }
                                },
                                previous: function previous() {
                                    _this._hide($element.parent('li').parent('ul'));

                                    $element.parent('li').parent('ul').one(transitionend($element), function () {
                                        setTimeout(function () {
                                            $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                                        }, 1);
                                    });
                                    return true;
                                },
                                up: function up() {
                                    $prevElement.focus(); // Don't tap focus on first element in root ul

                                    return !$element.is(_this.$element.find('> li:first-child > a'));
                                },
                                down: function down() {
                                    $nextElement.focus(); // Don't tap focus on last element in root ul

                                    return !$element.is(_this.$element.find('> li:last-child > a'));
                                },
                                close: function close() {
                                    // Don't close on element in root ul
                                    if (!$element.is(_this.$element.find('> li > a'))) {
                                        _this._hide($element.parent().parent());

                                        $element.parent().parent().siblings('a').focus();
                                    }
                                },
                                open: function open() {
                                    if (_this.options.parentLink && $element.attr('href')) {
                                        // Link with href
                                        return false;
                                    } else if (!$element.is(_this.$menuItems)) {
                                        // not menu item means back button
                                        _this._hide($element.parent('li').parent('ul'));

                                        $element.parent('li').parent('ul').one(transitionend($element), function () {
                                            setTimeout(function () {
                                                $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                                            }, 1);
                                        });
                                        return true;
                                    } else if ($element.is(_this.$submenuAnchors)) {
                                        // Sub menu item
                                        _this._show($element.parent('li'));

                                        $element.parent('li').one(transitionend($element), function () {
                                            $element.parent('li').find('ul li a').not('.js-drilldown-back a').first().focus();
                                        });
                                        return true;
                                    }
                                },
                                handled: function handled(preventDefault) {
                                    if (preventDefault) {
                                        e.preventDefault();
                                    }

                                    e.stopImmediatePropagation();
                                }
                            });
                        }); // end keyboardAccess
                    }
                    /**
                     * Closes all open elements, and returns to root menu.
                     * @function
                     * @fires Drilldown#closed
                     */

                }, {
                    key: "_hideAll",
                    value: function _hideAll() {
                        var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');
                        if (this.options.autoHeight) this.$wrapper.css({
                            height: $elem.parent().closest('ul').data('calcHeight')
                        });
                        $elem.one(transitionend($elem), function (e) {
                            $elem.removeClass('is-active is-closing');
                        });
                        /**
                         * Fires when the menu is fully closed.
                         * @event Drilldown#closed
                         */

                        this.$element.trigger('closed.zf.drilldown');
                    }
                    /**
                     * Adds event listener for each `back` button, and closes open menus.
                     * @function
                     * @fires Drilldown#back
                     * @param {jQuery} $elem - the current sub-menu to add `back` event.
                     */

                }, {
                    key: "_back",
                    value: function _back($elem) {
                        var _this = this;

                        $elem.off('click.zf.drilldown');
                        $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {
                            e.stopImmediatePropagation(); // console.log('mouseup on back');

                            _this._hide($elem); // If there is a parent submenu, call show


                            var parentSubMenu = $elem.parent('li').parent('ul').parent('li');

                            if (parentSubMenu.length) {
                                _this._show(parentSubMenu);
                            }
                        });
                    }
                    /**
                     * Adds event listener to menu items w/o submenus to close open menus on click.
                     * @function
                     * @private
                     */

                }, {
                    key: "_menuLinkEvents",
                    value: function _menuLinkEvents() {
                        var _this = this;

                        this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
                            // e.stopImmediatePropagation();
                            setTimeout(function () {
                                _this._hideAll();
                            }, 0);
                        });
                    }
                    /**
                     * Sets the CSS classes for submenu to show it.
                     * @function
                     * @private
                     * @param {jQuery} $elem - the target submenu (`ul` tag)
                     * @param {boolean} trigger - trigger drilldown event
                     */

                }, {
                    key: "_setShowSubMenuClasses",
                    value: function _setShowSubMenuClasses($elem, trigger) {
                        $elem.addClass('is-active').removeClass('invisible').attr('aria-hidden', false);
                        $elem.parent('li').attr('aria-expanded', true);

                        if (trigger === true) {
                            this.$element.trigger('open.zf.drilldown', [$elem]);
                        }
                    }
                    /**
                     * Sets the CSS classes for submenu to hide it.
                     * @function
                     * @private
                     * @param {jQuery} $elem - the target submenu (`ul` tag)
                     * @param {boolean} trigger - trigger drilldown event
                     */

                }, {
                    key: "_setHideSubMenuClasses",
                    value: function _setHideSubMenuClasses($elem, trigger) {
                        $elem.removeClass('is-active').addClass('invisible').attr('aria-hidden', true);
                        $elem.parent('li').attr('aria-expanded', false);

                        if (trigger === true) {
                            $elem.trigger('hide.zf.drilldown', [$elem]);
                        }
                    }
                    /**
                     * Opens a specific drilldown (sub)menu no matter which (sub)menu in it is currently visible.
                     * Compared to _show() this lets you jump into any submenu without clicking through every submenu on the way to it.
                     * @function
                     * @fires Drilldown#open
                     * @param {jQuery} $elem - the target (sub)menu (`ul` tag)
                     * @param {boolean} autoFocus - if true the first link in the target (sub)menu gets auto focused
                     */

                }, {
                    key: "_showMenu",
                    value: function _showMenu($elem, autoFocus) {
                        var _this = this; // Reset drilldown


                        var $expandedSubmenus = this.$element.find('li[aria-expanded="true"] > ul[data-submenu]');
                        $expandedSubmenus.each(function (index) {
                            _this._setHideSubMenuClasses((0, _jquery2.default)(this));
                        }); // Save the menu as the currently displayed one.

                        this.$currentMenu = $elem; // If target menu is root, focus first link & exit

                        if ($elem.is('[data-drilldown]')) {
                            if (autoFocus === true) $elem.find('li[role="treeitem"] > a').first().focus();
                            if (this.options.autoHeight) this.$wrapper.css('height', $elem.data('calcHeight'));
                            return;
                        } // Find all submenus on way to root incl. the element itself


                        var $submenus = $elem.children().first().parentsUntil('[data-drilldown]', '[data-submenu]'); // Open target menu and all submenus on its way to root

                        $submenus.each(function (index) {
                            // Update height of first child (target menu) if autoHeight option true
                            if (index === 0 && _this.options.autoHeight) {
                                _this.$wrapper.css('height', (0, _jquery2.default)(this).data('calcHeight'));
                            }

                            var isLastChild = index == $submenus.length - 1; // Add transitionsend listener to last child (root due to reverse order) to open target menu's first link
                            // Last child makes sure the event gets always triggered even if going through several menus

                            if (isLastChild === true) {
                                (0, _jquery2.default)(this).one(transitionend((0, _jquery2.default)(this)), function () {
                                    if (autoFocus === true) {
                                        $elem.find('li[role="treeitem"] > a').first().focus();
                                    }
                                });
                            }

                            _this._setShowSubMenuClasses((0, _jquery2.default)(this), isLastChild);
                        });
                    }
                    /**
                     * Opens a submenu.
                     * @function
                     * @fires Drilldown#open
                     * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
                     */

                }, {
                    key: "_show",
                    value: function _show($elem) {
                        var $submenu = $elem.children('[data-submenu]');
                        $elem.attr('aria-expanded', true);
                        this.$currentMenu = $submenu;
                        $submenu.addClass('is-active').removeClass('invisible').attr('aria-hidden', false);

                        if (this.options.autoHeight) {
                            this.$wrapper.css({
                                height: $submenu.data('calcHeight')
                            });
                        }
                        /**
                         * Fires when the submenu has opened.
                         * @event Drilldown#open
                         */

                        this.$element.trigger('open.zf.drilldown', [$elem]);
                    }
                    /**
                     * Hides a submenu
                     * @function
                     * @fires Drilldown#hide
                     * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
                     */

                }, {
                    key: "_hide",
                    value: function _hide($elem) {
                        if (this.options.autoHeight) this.$wrapper.css({
                            height: $elem.parent().closest('ul').data('calcHeight')
                        });

                        $elem.parent('li').attr('aria-expanded', false);
                        $elem.attr('aria-hidden', true);
                        $elem.addClass('is-closing').one(transitionend($elem), function () {
                            $elem.removeClass('is-active is-closing');
                            $elem.blur().addClass('invisible');
                        });
                        /**
                         * Fires when the submenu has closed.
                         * @event Drilldown#hide
                         */

                        $elem.trigger('hide.zf.drilldown', [$elem]);
                    }
                    /**
                     * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
                     * Prevents content jumping.
                     * @function
                     * @private
                     */

                }, {
                    key: "_getMaxDims",
                    value: function _getMaxDims() {
                        var maxHeight = 0,
                            result = {},
                            _this = this; // Recalculate menu heights and total max height


                        this.$submenus.add(this.$element).each(function () {
                            var numOfElems = (0, _jquery2.default)(this).children('li').length;
                            var height = Box.GetDimensions(this).height;
                            maxHeight = height > maxHeight ? height : maxHeight;

                            if (_this.options.autoHeight) {
                                (0, _jquery2.default)(this).data('calcHeight', height);
                            }
                        });
                        if (this.options.autoHeight) result['height'] = this.$currentMenu.data('calcHeight'); else result['min-height'] = "".concat(maxHeight, "px");
                        result['max-width'] = "".concat(this.$element[0].getBoundingClientRect().width, "px");
                        return result;
                    }
                    /**
                     * Destroys the Drilldown Menu
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        if (this.options.scrollTop) this.$element.off('.zf.drilldown', this._bindHandler);

                        this._hideAll();

                        this.$element.off('mutateme.zf.trigger');
                        Nest.Burn(this.$element, 'drilldown');
                        this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
                        this.$submenuAnchors.each(function () {
                            (0, _jquery2.default)(this).off('.zf.drilldown');
                        });
                        this.$element.find('[data-is-parent-link]').detach();
                        this.$submenus.removeClass('drilldown-submenu-cover-previous invisible');
                        this.$element.find('a').each(function () {
                            var $link = (0, _jquery2.default)(this);
                            $link.removeAttr('tabindex');

                            if ($link.data('savedHref')) {
                                $link.attr('href', $link.data('savedHref')).removeData('savedHref');
                            } else {
                                return;
                            }
                        });
                    }
                }]);

                return Drilldown;
            }(Plugin);

        Drilldown.defaults = {
            /**
             * Drilldowns depend on styles in order to function properly; in the default build of Foundation these are
             * on the `drilldown` class. This option auto-applies this class to the drilldown upon initialization.
             * @option
             * @type {boolian}
             * @default true
             */
            autoApplyClass: true,

            /**
             * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
             * @option
             * @type {string}
             * @default '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>'
             */
            backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',

            /**
             * Position the back button either at the top or bottom of drilldown submenus. Can be `'left'` or `'bottom'`.
             * @option
             * @type {string}
             * @default top
             */
            backButtonPosition: 'top',

            /**
             * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
             * @option
             * @type {string}
             * @default '<div></div>'
             */
            wrapper: '<div></div>',

            /**
             * Adds the parent link to the submenu.
             * @option
             * @type {boolean}
             * @default false
             */
            parentLink: false,

            /**
             * Allow the menu to return to root list on body click.
             * @option
             * @type {boolean}
             * @default false
             */
            closeOnClick: false,

            /**
             * Allow the menu to auto adjust height.
             * @option
             * @type {boolean}
             * @default false
             */
            autoHeight: false,

            /**
             * Animate the auto adjust height.
             * @option
             * @type {boolean}
             * @default false
             */
            animateHeight: false,

            /**
             * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button
             * @option
             * @type {boolean}
             * @default false
             */
            scrollTop: false,

            /**
             * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken
             * @option
             * @type {string}
             * @default ''
             */
            scrollTopElement: '',

            /**
             * ScrollTop offset
             * @option
             * @type {number}
             * @default 0
             */
            scrollTopOffset: 0,

            /**
             * Scroll animation duration
             * @option
             * @type {number}
             * @default 500
             */
            animationDuration: 500,

            /**
             * Scroll animation easing. Can be `'swing'` or `'linear'`.
             * @option
             * @type {string}
             * @see {@link https://api.jquery.com/animate|JQuery animate}
             * @default 'swing'
             */
            animationEasing: 'swing' // holdOpen: false

        };

        var POSITIONS = ['left', 'right', 'top', 'bottom'];
        var VERTICAL_ALIGNMENTS = ['top', 'bottom', 'center'];
        var HORIZONTAL_ALIGNMENTS = ['left', 'right', 'center'];
        var ALIGNMENTS = {
            'left': VERTICAL_ALIGNMENTS,
            'right': VERTICAL_ALIGNMENTS,
            'top': HORIZONTAL_ALIGNMENTS,
            'bottom': HORIZONTAL_ALIGNMENTS
        };

        function nextItem(item, array) {
            var currentIdx = array.indexOf(item);

            if (currentIdx === array.length - 1) {
                return array[0];
            } else {
                return array[currentIdx + 1];
            }
        }

        var Positionable =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Positionable, _Plugin);

                function Positionable() {
                    _classCallCheck(this, Positionable);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Positionable).apply(this, arguments));
                }

                _createClass(Positionable, [{
                    key: "_init",

                    /**
                     * Abstract class encapsulating the tether-like explicit positioning logic
                     * including repositioning based on overlap.
                     * Expects classes to define defaults for vOffset, hOffset, position,
                     * alignment, allowOverlap, and allowBottomOverlap. They can do this by
                     * extending the defaults, or (for now recommended due to the way docs are
                     * generated) by explicitly declaring them.
                     *
                     **/
                    value: function _init() {
                        this.triedPositions = {};
                        this.position = this.options.position === 'auto' ? this._getDefaultPosition() : this.options.position;
                        this.alignment = this.options.alignment === 'auto' ? this._getDefaultAlignment() : this.options.alignment;
                        this.originalPosition = this.position;
                        this.originalAlignment = this.alignment;
                    }
                }, {
                    key: "_getDefaultPosition",
                    value: function _getDefaultPosition() {
                        return 'bottom';
                    }
                }, {
                    key: "_getDefaultAlignment",
                    value: function _getDefaultAlignment() {
                        switch (this.position) {
                            case 'bottom':
                            case 'top':
                                return rtl() ? 'right' : 'left';

                            case 'left':
                            case 'right':
                                return 'bottom';
                        }
                    }
                    /**
                     * Adjusts the positionable possible positions by iterating through alignments
                     * and positions.
                     * @function
                     * @private
                     */

                }, {
                    key: "_reposition",
                    value: function _reposition() {
                        if (this._alignmentsExhausted(this.position)) {
                            this.position = nextItem(this.position, POSITIONS);
                            this.alignment = ALIGNMENTS[this.position][0];
                        } else {
                            this._realign();
                        }
                    }
                    /**
                     * Adjusts the dropdown pane possible positions by iterating through alignments
                     * on the current position.
                     * @function
                     * @private
                     */

                }, {
                    key: "_realign",
                    value: function _realign() {
                        this._addTriedPosition(this.position, this.alignment);

                        this.alignment = nextItem(this.alignment, ALIGNMENTS[this.position]);
                    }
                }, {
                    key: "_addTriedPosition",
                    value: function _addTriedPosition(position, alignment) {
                        this.triedPositions[position] = this.triedPositions[position] || [];
                        this.triedPositions[position].push(alignment);
                    }
                }, {
                    key: "_positionsExhausted",
                    value: function _positionsExhausted() {
                        var isExhausted = true;

                        for (var i = 0; i < POSITIONS.length; i++) {
                            isExhausted = isExhausted && this._alignmentsExhausted(POSITIONS[i]);
                        }

                        return isExhausted;
                    }
                }, {
                    key: "_alignmentsExhausted",
                    value: function _alignmentsExhausted(position) {
                        return this.triedPositions[position] && this.triedPositions[position].length == ALIGNMENTS[position].length;
                    } // When we're trying to center, we don't want to apply offset that's going to
                    // take us just off center, so wrap around to return 0 for the appropriate
                    // offset in those alignments.  TODO: Figure out if we want to make this
                    // configurable behavior... it feels more intuitive, especially for tooltips, but
                    // it's possible someone might actually want to start from center and then nudge
                    // slightly off.

                }, {
                    key: "_getVOffset",
                    value: function _getVOffset() {
                        return this.options.vOffset;
                    }
                }, {
                    key: "_getHOffset",
                    value: function _getHOffset() {
                        return this.options.hOffset;
                    }
                }, {
                    key: "_setPosition",
                    value: function _setPosition($anchor, $element, $parent) {
                        if ($anchor.attr('aria-expanded') === 'false') {
                            return false;
                        }

                        var $eleDims = Box.GetDimensions($element),
                            $anchorDims = Box.GetDimensions($anchor);

                        if (!this.options.allowOverlap) {
                            // restore original position & alignment before checking overlap
                            this.position = this.originalPosition;
                            this.alignment = this.originalAlignment;
                        }

                        $element.offset(Box.GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));

                        if (!this.options.allowOverlap) {
                            var minOverlap = 100000000; // default coordinates to how we start, in case we can't figure out better

                            var minCoordinates = {
                                position: this.position,
                                alignment: this.alignment
                            };

                            while (!this._positionsExhausted()) {
                                var overlap = Box.OverlapArea($element, $parent, false, false, this.options.allowBottomOverlap);

                                if (overlap === 0) {
                                    return;
                                }

                                if (overlap < minOverlap) {
                                    minOverlap = overlap;
                                    minCoordinates = {
                                        position: this.position,
                                        alignment: this.alignment
                                    };
                                }

                                this._reposition();

                                $element.offset(Box.GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
                            } // If we get through the entire loop, there was no non-overlapping
                            // position available. Pick the version with least overlap.


                            this.position = minCoordinates.position;
                            this.alignment = minCoordinates.alignment;
                            $element.offset(Box.GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
                        }
                    }
                }]);

                return Positionable;
            }(Plugin);

        Positionable.defaults = {
            /**
             * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.
             * @option
             * @type {string}
             * @default 'auto'
             */
            position: 'auto',

            /**
             * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.
             * @option
             * @type {string}
             * @default 'auto'
             */
            alignment: 'auto',

            /**
             * Allow overlap of container/window. If false, dropdown positionable first
             * try to position as defined by data-position and data-alignment, but
             * reposition if it would cause an overflow.
             * @option
             * @type {boolean}
             * @default false
             */
            allowOverlap: false,

            /**
             * Allow overlap of only the bottom of the container. This is the most common
             * behavior for dropdowns, allowing the dropdown to extend the bottom of the
             * screen but not otherwise influence or break out of the container.
             * @option
             * @type {boolean}
             * @default true
             */
            allowBottomOverlap: true,

            /**
             * Number of pixels the positionable should be separated vertically from anchor
             * @option
             * @type {number}
             * @default 0
             */
            vOffset: 0,

            /**
             * Number of pixels the positionable should be separated horizontally from anchor
             * @option
             * @type {number}
             * @default 0
             */
            hOffset: 0
        };

        /**
         * Dropdown module.
         * @module foundation.dropdown
         * @requires foundation.util.keyboard
         * @requires foundation.util.box
         * @requires foundation.util.triggers
         */

        var Dropdown =
            /*#__PURE__*/
            function (_Positionable) {
                _inherits(Dropdown, _Positionable);

                function Dropdown() {
                    _classCallCheck(this, Dropdown);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).apply(this, arguments));
                }

                _createClass(Dropdown, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of a dropdown.
                     * @class
                     * @name Dropdown
                     * @param {jQuery} element - jQuery object to make into a dropdown.
                     *        Object should be of the dropdown panel, rather than its anchor.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Dropdown.defaults, this.$element.data(), options);
                        this.className = 'Dropdown'; // ie9 back compat
                        // Triggers init is idempotent, just need to make sure it is initialized

                        Triggers.init(_jquery2.default);

                        this._init();

                        Keyboard.register('Dropdown', {
                            'ENTER': 'toggle',
                            'SPACE': 'toggle',
                            'ESCAPE': 'close'
                        });
                    }
                    /**
                     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var $id = this.$element.attr('id');
                        this.$anchors = (0, _jquery2.default)("[data-toggle=\"".concat($id, "\"]")).length ? (0, _jquery2.default)("[data-toggle=\"".concat($id, "\"]")) : (0, _jquery2.default)("[data-open=\"".concat($id, "\"]"));
                        this.$anchors.attr({
                            'aria-controls': $id,
                            'data-is-focus': false,
                            'data-yeti-box': $id,
                            'aria-haspopup': true,
                            'aria-expanded': false
                        });

                        this._setCurrentAnchor(this.$anchors.first());

                        if (this.options.parentClass) {
                            this.$parent = this.$element.parents('.' + this.options.parentClass);
                        } else {
                            this.$parent = null;
                        } // Set [aria-labelledby] on the Dropdown if it is not set


                        if (typeof this.$element.attr('aria-labelledby') === 'undefined') {
                            // Get the anchor ID or create one
                            if (typeof this.$currentAnchor.attr('id') === 'undefined') {
                                this.$currentAnchor.attr('id', GetYoDigits(6, 'dd-anchor'));
                            }
                            this.$element.attr('aria-labelledby', this.$currentAnchor.attr('id'));
                        }

                        this.$element.attr({
                            'aria-hidden': 'true',
                            'data-yeti-box': $id,
                            'data-resize': $id
                        });

                        _get(_getPrototypeOf(Dropdown.prototype), "_init", this).call(this);

                        this._events();
                    }
                }, {
                    key: "_getDefaultPosition",
                    value: function _getDefaultPosition() {
                        // handle legacy classnames
                        var position = this.$element[0].className.match(/(top|left|right|bottom)/g);

                        if (position) {
                            return position[0];
                        } else {
                            return 'bottom';
                        }
                    }
                }, {
                    key: "_getDefaultAlignment",
                    value: function _getDefaultAlignment() {
                        // handle legacy float approach
                        var horizontalPosition = /float-(\S+)/.exec(this.$currentAnchor.attr('class'));

                        if (horizontalPosition) {
                            return horizontalPosition[1];
                        }

                        return _get(_getPrototypeOf(Dropdown.prototype), "_getDefaultAlignment", this).call(this);
                    }
                    /**
                     * Sets the position and orientation of the dropdown pane, checks for collisions if allow-overlap is not true.
                     * Recursively calls itself if a collision is detected, with a new position class.
                     * @function
                     * @private
                     */

                }, {
                    key: "_setPosition",
                    value: function _setPosition() {
                        this.$element.removeClass("has-position-".concat(this.position, " has-alignment-").concat(this.alignment));

                        _get(_getPrototypeOf(Dropdown.prototype), "_setPosition", this).call(this, this.$currentAnchor, this.$element, this.$parent);

                        this.$element.addClass("has-position-".concat(this.position, " has-alignment-").concat(this.alignment));
                    }
                    /**
                     * Make it a current anchor.
                     * Current anchor as the reference for the position of Dropdown panes.
                     * @param {HTML} el - DOM element of the anchor.
                     * @function
                     * @private
                     */

                }, {
                    key: "_setCurrentAnchor",
                    value: function _setCurrentAnchor(el) {
                        this.$currentAnchor = (0, _jquery2.default)(el);
                    }
                    /**
                     * Adds event listeners to the element utilizing the triggers utility library.
                     * @function
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this = this;

                        this.$element.on({
                            'open.zf.trigger': this.open.bind(this),
                            'close.zf.trigger': this.close.bind(this),
                            'toggle.zf.trigger': this.toggle.bind(this),
                            'resizeme.zf.trigger': this._setPosition.bind(this)
                        });
                        this.$anchors.off('click.zf.trigger').on('click.zf.trigger', function () {
                            _this._setCurrentAnchor(this);
                        });

                        if (this.options.hover) {
                            this.$anchors.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
                                _this._setCurrentAnchor(this);

                                var bodyData = (0, _jquery2.default)('body').data();

                                if (typeof bodyData.whatinput === 'undefined' || bodyData.whatinput === 'mouse') {
                                    clearTimeout(_this.timeout);
                                    _this.timeout = setTimeout(function () {
                                        _this.open();

                                        _this.$anchors.data('hover', true);
                                    }, _this.options.hoverDelay);
                                }
                            }).on('mouseleave.zf.dropdown', ignoreMousedisappear(function () {
                                clearTimeout(_this.timeout);
                                _this.timeout = setTimeout(function () {
                                    _this.close();

                                    _this.$anchors.data('hover', false);
                                }, _this.options.hoverDelay);
                            }));

                            if (this.options.hoverPane) {
                                this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
                                    clearTimeout(_this.timeout);
                                }).on('mouseleave.zf.dropdown', ignoreMousedisappear(function () {
                                    clearTimeout(_this.timeout);
                                    _this.timeout = setTimeout(function () {
                                        _this.close();

                                        _this.$anchors.data('hover', false);
                                    }, _this.options.hoverDelay);
                                }));
                            }
                        }

                        this.$anchors.add(this.$element).on('keydown.zf.dropdown', function (e) {
                            var $target = (0, _jquery2.default)(this),
                                visibleFocusableElements = Keyboard.findFocusable(_this.$element);
                            Keyboard.handleKey(e, 'Dropdown', {
                                open: function open() {
                                    if ($target.is(_this.$anchors) && !$target.is('input, textarea')) {
                                        _this.open();

                                        _this.$element.attr('tabindex', -1).focus();

                                        e.preventDefault();
                                    }
                                },
                                close: function close() {
                                    _this.close();

                                    _this.$anchors.focus();
                                }
                            });
                        });
                    }
                    /**
                     * Adds an event handler to the body to close any dropdowns on a click.
                     * @function
                     * @private
                     */

                }, {
                    key: "_addBodyHandler",
                    value: function _addBodyHandler() {
                        var $body = (0, _jquery2.default)(document.body).not(this.$element),
                            _this = this;

                        $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
                            if (_this.$anchors.is(e.target) || _this.$anchors.find(e.target).length) {
                                return;
                            }

                            if (_this.$element.is(e.target) || _this.$element.find(e.target).length) {
                                return;
                            }

                            _this.close();

                            $body.off('click.zf.dropdown');
                        });
                    }
                    /**
                     * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
                     * @function
                     * @fires Dropdown#closeme
                     * @fires Dropdown#show
                     */

                }, {
                    key: "open",
                    value: function open() {
                        // var _this = this;

                        /**
                         * Fires to close other open dropdowns, typically when dropdown is opening
                         * @event Dropdown#closeme
                         */
                        this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
                        this.$anchors.addClass('hover').attr({
                            'aria-expanded': true
                        }); // this.$element/*.show()*/;

                        this.$element.addClass('is-opening');

                        this._setPosition();

                        this.$element.removeClass('is-opening').addClass('is-open').attr({
                            'aria-hidden': false
                        });

                        if (this.options.autoFocus) {
                            var $focusable = Keyboard.findFocusable(this.$element);

                            if ($focusable.length) {
                                $focusable.eq(0).focus();
                            }
                        }

                        if (this.options.closeOnClick) {
                            this._addBodyHandler();
                        }

                        if (this.options.trapFocus) {
                            Keyboard.trapFocus(this.$element);
                        }
                        /**
                         * Fires once the dropdown is visible.
                         * @event Dropdown#show
                         */

                        this.$element.trigger('show.zf.dropdown', [this.$element]);
                    }
                    /**
                     * Closes the open dropdown pane.
                     * @function
                     * @fires Dropdown#hide
                     */

                }, {
                    key: "close",
                    value: function close() {
                        if (!this.$element.hasClass('is-open')) {
                            return false;
                        }

                        this.$element.removeClass('is-open').attr({
                            'aria-hidden': true
                        });
                        this.$anchors.removeClass('hover').attr('aria-expanded', false);
                        /**
                         * Fires once the dropdown is no longer visible.
                         * @event Dropdown#hide
                         */

                        this.$element.trigger('hide.zf.dropdown', [this.$element]);

                        if (this.options.trapFocus) {
                            Keyboard.releaseFocus(this.$element);
                        }
                    }
                    /**
                     * Toggles the dropdown pane's visibility.
                     * @function
                     */

                }, {
                    key: "toggle",
                    value: function toggle() {
                        if (this.$element.hasClass('is-open')) {
                            if (this.$anchors.data('hover')) return;
                            this.close();
                        } else {
                            this.open();
                        }
                    }
                    /**
                     * Destroys the dropdown.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.off('.zf.trigger').hide();
                        this.$anchors.off('.zf.dropdown');
                        (0, _jquery2.default)(document.body).off('click.zf.dropdown');
                    }
                }]);

                return Dropdown;
            }(Positionable);

        Dropdown.defaults = {
            /**
             * Class that designates bounding container of Dropdown (default: window)
             * @option
             * @type {?string}
             * @default null
             */
            parentClass: null,

            /**
             * Amount of time to delay opening a submenu on hover event.
             * @option
             * @type {number}
             * @default 250
             */
            hoverDelay: 250,

            /**
             * Allow submenus to open on hover events
             * @option
             * @type {boolean}
             * @default false
             */
            hover: false,

            /**
             * Don't close dropdown when hovering over dropdown pane
             * @option
             * @type {boolean}
             * @default false
             */
            hoverPane: false,

            /**
             * Number of pixels between the dropdown pane and the triggering element on open.
             * @option
             * @type {number}
             * @default 0
             */
            vOffset: 0,

            /**
             * Number of pixels between the dropdown pane and the triggering element on open.
             * @option
             * @type {number}
             * @default 0
             */
            hOffset: 0,

            /**
             * Position of dropdown. Can be left, right, bottom, top, or auto.
             * @option
             * @type {string}
             * @default 'auto'
             */
            position: 'auto',

            /**
             * Alignment of dropdown relative to anchor. Can be left, right, bottom, top, center, or auto.
             * @option
             * @type {string}
             * @default 'auto'
             */
            alignment: 'auto',

            /**
             * Allow overlap of container/window. If false, dropdown will first try to position as defined by data-position and data-alignment, but reposition if it would cause an overflow.
             * @option
             * @type {boolean}
             * @default false
             */
            allowOverlap: false,

            /**
             * Allow overlap of only the bottom of the container. This is the most common
             * behavior for dropdowns, allowing the dropdown to extend the bottom of the
             * screen but not otherwise influence or break out of the container.
             * @option
             * @type {boolean}
             * @default true
             */
            allowBottomOverlap: true,

            /**
             * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
             * @option
             * @type {boolean}
             * @default false
             */
            trapFocus: false,

            /**
             * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
             * @option
             * @type {boolean}
             * @default false
             */
            autoFocus: false,

            /**
             * Allows a click on the body to close the dropdown.
             * @option
             * @type {boolean}
             * @default false
             */
            closeOnClick: false
        };

        /**
         * DropdownMenu module.
         * @module foundation.dropdown-menu
         * @requires foundation.util.keyboard
         * @requires foundation.util.box
         * @requires foundation.util.nest
         */

        var DropdownMenu =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(DropdownMenu, _Plugin);

                function DropdownMenu() {
                    _classCallCheck(this, DropdownMenu);

                    return _possibleConstructorReturn(this, _getPrototypeOf(DropdownMenu).apply(this, arguments));
                }

                _createClass(DropdownMenu, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of DropdownMenu.
                     * @class
                     * @name DropdownMenu
                     * @fires DropdownMenu#init
                     * @param {jQuery} element - jQuery object to make into a dropdown menu.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, DropdownMenu.defaults, this.$element.data(), options);
                        this.className = 'DropdownMenu'; // ie9 back compat

                        this._init();

                        Keyboard.register('DropdownMenu', {
                            'ENTER': 'open',
                            'SPACE': 'open',
                            'ARROW_RIGHT': 'next',
                            'ARROW_UP': 'up',
                            'ARROW_DOWN': 'down',
                            'ARROW_LEFT': 'previous',
                            'ESCAPE': 'close'
                        });
                    }
                    /**
                     * Initializes the plugin, and calls _prepareMenu
                     * @private
                     * @function
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        Nest.Feather(this.$element, 'dropdown');
                        var subs = this.$element.find('li.is-dropdown-submenu-parent');
                        this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');
                        this.$menuItems = this.$element.find('[role="menuitem"]');
                        this.$tabs = this.$element.children('[role="menuitem"]');
                        this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

                        if (this.options.alignment === 'auto') {
                            if (this.$element.hasClass(this.options.rightClass) || rtl() || this.$element.parents('.top-bar-right').is('*')) {
                                this.options.alignment = 'right';
                                subs.addClass('opens-left');
                            } else {
                                this.options.alignment = 'left';
                                subs.addClass('opens-right');
                            }
                        } else {
                            if (this.options.alignment === 'right') {
                                subs.addClass('opens-left');
                            } else {
                                subs.addClass('opens-right');
                            }
                        }

                        this.changed = false;

                        this._events();
                    }
                }, {
                    key: "_isVertical",
                    value: function _isVertical() {
                        return this.$tabs.css('display') === 'block' || this.$element.css('flex-direction') === 'column';
                    }
                }, {
                    key: "_isRtl",
                    value: function _isRtl() {
                        return this.$element.hasClass('align-right') || rtl() && !this.$element.hasClass('align-left');
                    }
                    /**
                     * Adds event listeners to elements within the menu
                     * @private
                     * @function
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this = this,
                            hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
                            parClass = 'is-dropdown-submenu-parent'; // used for onClick and in the keyboard handlers


                        var handleClickFn = function handleClickFn(e) {
                            var $elem = (0, _jquery2.default)(e.target).parentsUntil('ul', ".".concat(parClass)),
                                hasSub = $elem.hasClass(parClass),
                                hasClicked = $elem.attr('data-is-click') === 'true',
                                $sub = $elem.children('.is-dropdown-submenu');

                            if (hasSub) {
                                if (hasClicked) {
                                    if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
                                        return;
                                    } else {
                                        e.stopImmediatePropagation();
                                        e.preventDefault();

                                        _this._hide($elem);
                                    }
                                } else {
                                    e.preventDefault();
                                    e.stopImmediatePropagation();

                                    _this._show($sub);

                                    $elem.add($elem.parentsUntil(_this.$element, ".".concat(parClass))).attr('data-is-click', true);
                                }
                            }
                        };

                        if (this.options.clickOpen || hasTouch) {
                            this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
                        } // Handle Leaf element Clicks


                        if (_this.options.closeOnClickInside) {
                            this.$menuItems.on('click.zf.dropdownmenu', function (e) {
                                var $elem = (0, _jquery2.default)(this),
                                    hasSub = $elem.hasClass(parClass);

                                if (!hasSub) {
                                    _this._hide();
                                }
                            });
                        }

                        if (!this.options.disableHover) {
                            this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
                                var $elem = (0, _jquery2.default)(this),
                                    hasSub = $elem.hasClass(parClass);

                                if (hasSub) {
                                    clearTimeout($elem.data('_delay'));
                                    $elem.data('_delay', setTimeout(function () {
                                        _this._show($elem.children('.is-dropdown-submenu'));
                                    }, _this.options.hoverDelay));
                                }
                            }).on('mouseleave.zf.dropdownMenu', ignoreMousedisappear(function (e) {
                                var $elem = (0, _jquery2.default)(this),
                                    hasSub = $elem.hasClass(parClass);

                                if (hasSub && _this.options.autoclose) {
                                    if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
                                        return false;
                                    }

                                    clearTimeout($elem.data('_delay'));
                                    $elem.data('_delay', setTimeout(function () {
                                        _this._hide($elem);
                                    }, _this.options.closingTime));
                                }
                            }));
                        }

                        this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
                            var $element = (0, _jquery2.default)(e.target).parentsUntil('ul', '[role="menuitem"]'),
                                isTab = _this.$tabs.index($element) > -1,
                                $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
                                $prevElement,
                                $nextElement;
                            $elements.each(function (i) {
                                if ((0, _jquery2.default)(this).is($element)) {
                                    $prevElement = $elements.eq(i - 1);
                                    $nextElement = $elements.eq(i + 1);
                                    return;
                                }
                            });

                            var nextSibling = function nextSibling() {
                                    $nextElement.children('a:first').focus();
                                    e.preventDefault();
                                },
                                prevSibling = function prevSibling() {
                                    $prevElement.children('a:first').focus();
                                    e.preventDefault();
                                },
                                openSub = function openSub() {
                                    var $sub = $element.children('ul.is-dropdown-submenu');

                                    if ($sub.length) {
                                        _this._show($sub);

                                        $element.find('li > a:first').focus();
                                        e.preventDefault();
                                    } else {
                                        return;
                                    }
                                },
                                closeSub = function closeSub() {
                                    //if ($element.is(':first-child')) {
                                    var close = $element.parent('ul').parent('li');
                                    close.children('a:first').focus();

                                    _this._hide(close);

                                    e.preventDefault(); //}
                                };

                            var functions = {
                                open: openSub,
                                close: function close() {
                                    _this._hide(_this.$element);

                                    _this.$menuItems.eq(0).children('a').focus(); // focus to first element


                                    e.preventDefault();
                                },
                                handled: function handled() {
                                    e.stopImmediatePropagation();
                                }
                            };

                            if (isTab) {
                                if (_this._isVertical()) {
                                    // vertical menu
                                    if (_this._isRtl()) {
                                        // right aligned
                                        _jquery2.default.extend(functions, {
                                            down: nextSibling,
                                            up: prevSibling,
                                            next: closeSub,
                                            previous: openSub
                                        });
                                    } else {
                                        // left aligned
                                        _jquery2.default.extend(functions, {
                                            down: nextSibling,
                                            up: prevSibling,
                                            next: openSub,
                                            previous: closeSub
                                        });
                                    }
                                } else {
                                    // horizontal menu
                                    if (_this._isRtl()) {
                                        // right aligned
                                        _jquery2.default.extend(functions, {
                                            next: prevSibling,
                                            previous: nextSibling,
                                            down: openSub,
                                            up: closeSub
                                        });
                                    } else {
                                        // left aligned
                                        _jquery2.default.extend(functions, {
                                            next: nextSibling,
                                            previous: prevSibling,
                                            down: openSub,
                                            up: closeSub
                                        });
                                    }
                                }
                            } else {
                                // not tabs -> one sub
                                if (_this._isRtl()) {
                                    // right aligned
                                    _jquery2.default.extend(functions, {
                                        next: closeSub,
                                        previous: openSub,
                                        down: nextSibling,
                                        up: prevSibling
                                    });
                                } else {
                                    // left aligned
                                    _jquery2.default.extend(functions, {
                                        next: openSub,
                                        previous: closeSub,
                                        down: nextSibling,
                                        up: prevSibling
                                    });
                                }
                            }

                            Keyboard.handleKey(e, 'DropdownMenu', functions);
                        });
                    }
                    /**
                     * Adds an event handler to the body to close any dropdowns on a click.
                     * @function
                     * @private
                     */

                }, {
                    key: "_addBodyHandler",
                    value: function _addBodyHandler() {
                        var $body = (0, _jquery2.default)(document.body),
                            _this = this;

                        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
                            var $link = _this.$element.find(e.target);

                            if ($link.length) {
                                return;
                            }

                            _this._hide();

                            $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
                        });
                    }
                    /**
                     * Opens a dropdown pane, and checks for collisions first.
                     * @param {jQuery} $sub - ul element that is a submenu to show
                     * @function
                     * @private
                     * @fires Dropdownmenu#show
                     */

                }, {
                    key: "_show",
                    value: function _show($sub) {
                        var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
                            return (0, _jquery2.default)(el).find($sub).length > 0;
                        }));
                        var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');

                        this._hide($sibs, idx);

                        $sub.css('visibility', 'hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');
                        var clear = Box.ImNotTouchingYou($sub, null, true);

                        if (!clear) {
                            var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
                                $parentLi = $sub.parent('.is-dropdown-submenu-parent');
                            $parentLi.removeClass("opens".concat(oldClass)).addClass("opens-".concat(this.options.alignment));
                            clear = Box.ImNotTouchingYou($sub, null, true);

                            if (!clear) {
                                $parentLi.removeClass("opens-".concat(this.options.alignment)).addClass('opens-inner');
                            }

                            this.changed = true;
                        }

                        $sub.css('visibility', '');

                        if (this.options.closeOnClick) {
                            this._addBodyHandler();
                        }
                        /**
                         * Fires when the new dropdown pane is visible.
                         * @event Dropdownmenu#show
                         */

                        this.$element.trigger('show.zf.dropdownmenu', [$sub]);
                    }
                    /**
                     * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
                     * @function
                     * @param {jQuery} $elem - element with a submenu to hide
                     * @param {Number} idx - index of the $tabs collection to hide
                     * @private
                     */

                }, {
                    key: "_hide",
                    value: function _hide($elem, idx) {
                        var $toClose;

                        if ($elem && $elem.length) {
                            $toClose = $elem;
                        } else if (typeof idx !== 'undefined') {
                            $toClose = this.$tabs.not(function (i, el) {
                                return i === idx;
                            });
                        } else {
                            $toClose = this.$element;
                        }

                        var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

                        if (somethingToClose) {
                            $toClose.find('li.is-active').add($toClose).attr({
                                'data-is-click': false
                            }).removeClass('is-active');
                            $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');

                            if (this.changed || $toClose.find('opens-inner').length) {
                                var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
                                $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass("opens-inner opens-".concat(this.options.alignment)).addClass("opens-".concat(oldClass));
                                this.changed = false;
                            }
                            /**
                             * Fires when the open menus are closed.
                             * @event Dropdownmenu#hide
                             */

                            this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
                        }
                    }
                    /**
                     * Destroys the plugin.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
                        (0, _jquery2.default)(document.body).off('.zf.dropdownmenu');
                        Nest.Burn(this.$element, 'dropdown');
                    }
                }]);

                return DropdownMenu;
            }(Plugin);
        /**
         * Default settings for plugin
         */

        DropdownMenu.defaults = {
            /**
             * Disallows hover events from opening submenus
             * @option
             * @type {boolean}
             * @default false
             */
            disableHover: false,

            /**
             * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
             * @option
             * @type {boolean}
             * @default true
             */
            autoclose: true,

            /**
             * Amount of time to delay opening a submenu on hover event.
             * @option
             * @type {number}
             * @default 50
             */
            hoverDelay: 50,

            /**
             * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
             * @option
             * @type {boolean}
             * @default false
             */
            clickOpen: false,

            /**
             * Amount of time to delay closing a submenu on a mouseleave event.
             * @option
             * @type {number}
             * @default 500
             */
            closingTime: 500,

            /**
             * Position of the menu relative to what direction the submenus should open. Handled by JS. Can be `'auto'`, `'left'` or `'right'`.
             * @option
             * @type {string}
             * @default 'auto'
             */
            alignment: 'auto',

            /**
             * Allow clicks on the body to close any open submenus.
             * @option
             * @type {boolean}
             * @default true
             */
            closeOnClick: true,

            /**
             * Allow clicks on leaf anchor links to close any open submenus.
             * @option
             * @type {boolean}
             * @default true
             */
            closeOnClickInside: true,

            /**
             * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
             * @option
             * @type {string}
             * @default 'vertical'
             */
            verticalClass: 'vertical',

            /**
             * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
             * @option
             * @type {string}
             * @default 'align-right'
             */
            rightClass: 'align-right',

            /**
             * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
             * @option
             * @type {boolean}
             * @default true
             */
            forceFollow: true
        };

        /**
         * Equalizer module.
         * @module foundation.equalizer
         * @requires foundation.util.mediaQuery
         * @requires foundation.util.imageLoader if equalizer contains images
         */

        var Equalizer =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Equalizer, _Plugin);

                function Equalizer() {
                    _classCallCheck(this, Equalizer);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Equalizer).apply(this, arguments));
                }

                _createClass(Equalizer, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of Equalizer.
                     * @class
                     * @name Equalizer
                     * @fires Equalizer#init
                     * @param {Object} element - jQuery object to add the trigger to.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Equalizer.defaults, this.$element.data(), options);
                        this.className = 'Equalizer'; // ie9 back compat

                        this._init();
                    }
                    /**
                     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var eqId = this.$element.attr('data-equalizer') || '';
                        var $watched = this.$element.find("[data-equalizer-watch=\"".concat(eqId, "\"]"));

                        MediaQuery._init();

                        this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
                        this.$element.attr('data-resize', eqId || GetYoDigits(6, 'eq'));
                        this.$element.attr('data-mutate', eqId || GetYoDigits(6, 'eq'));
                        this.hasNested = this.$element.find('[data-equalizer]').length > 0;
                        this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
                        this.isOn = false;
                        this._bindHandler = {
                            onResizeMeBound: this._onResizeMe.bind(this),
                            onPostEqualizedBound: this._onPostEqualized.bind(this)
                        };
                        var imgs = this.$element.find('img');
                        var tooSmall;

                        if (this.options.equalizeOn) {
                            tooSmall = this._checkMQ();
                            (0, _jquery2.default)(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
                        } else {
                            this._events();
                        }

                        if (typeof tooSmall !== 'undefined' && tooSmall === false || typeof tooSmall === 'undefined') {
                            if (imgs.length) {
                                onImagesLoaded(imgs, this._reflow.bind(this));
                            } else {
                                this._reflow();
                            }
                        }
                    }
                    /**
                     * Removes event listeners if the breakpoint is too small.
                     * @private
                     */

                }, {
                    key: "_pauseEvents",
                    value: function _pauseEvents() {
                        this.isOn = false;
                        this.$element.off({
                            '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
                            'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,
                            'mutateme.zf.trigger': this._bindHandler.onResizeMeBound
                        });
                    }
                    /**
                     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
                     * @private
                     */

                }, {
                    key: "_onResizeMe",
                    value: function _onResizeMe(e) {
                        this._reflow();
                    }
                    /**
                     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
                     * @private
                     */

                }, {
                    key: "_onPostEqualized",
                    value: function _onPostEqualized(e) {
                        if (e.target !== this.$element[0]) {
                            this._reflow();
                        }
                    }
                    /**
                     * Initializes events for Equalizer.
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {

                        this._pauseEvents();

                        if (this.hasNested) {
                            this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
                        } else {
                            this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
                            this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);
                        }

                        this.isOn = true;
                    }
                    /**
                     * Checks the current breakpoint to the minimum required size.
                     * @private
                     */

                }, {
                    key: "_checkMQ",
                    value: function _checkMQ() {
                        var tooSmall = !MediaQuery.is(this.options.equalizeOn);

                        if (tooSmall) {
                            if (this.isOn) {
                                this._pauseEvents();

                                this.$watched.css('height', 'auto');
                            }
                        } else {
                            if (!this.isOn) {
                                this._events();
                            }
                        }

                        return tooSmall;
                    }
                    /**
                     * A noop version for the plugin
                     * @private
                     */

                }, {
                    key: "_killswitch",
                    value: function _killswitch() {
                        return;
                    }
                    /**
                     * Calls necessary functions to update Equalizer upon DOM change
                     * @private
                     */

                }, {
                    key: "_reflow",
                    value: function _reflow() {
                        if (!this.options.equalizeOnStack) {
                            if (this._isStacked()) {
                                this.$watched.css('height', 'auto');
                                return false;
                            }
                        }

                        if (this.options.equalizeByRow) {
                            this.getHeightsByRow(this.applyHeightByRow.bind(this));
                        } else {
                            this.getHeights(this.applyHeight.bind(this));
                        }
                    }
                    /**
                     * Manually determines if the first 2 elements are *NOT* stacked.
                     * @private
                     */

                }, {
                    key: "_isStacked",
                    value: function _isStacked() {
                        if (!this.$watched[0] || !this.$watched[1]) {
                            return true;
                        }

                        return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
                    }
                    /**
                     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
                     * @param {Function} cb - A non-optional callback to return the heights array to.
                     * @returns {Array} heights - An array of heights of children within Equalizer container
                     */

                }, {
                    key: "getHeights",
                    value: function getHeights(cb) {
                        var heights = [];

                        for (var i = 0, len = this.$watched.length; i < len; i++) {
                            this.$watched[i].style.height = 'auto';
                            heights.push(this.$watched[i].offsetHeight);
                        }

                        cb(heights);
                    }
                    /**
                     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
                     * @param {Function} cb - A non-optional callback to return the heights array to.
                     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
                     */

                }, {
                    key: "getHeightsByRow",
                    value: function getHeightsByRow(cb) {
                        var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
                            groups = [],
                            group = 0; //group by Row

                        groups[group] = [];

                        for (var i = 0, len = this.$watched.length; i < len; i++) {
                            this.$watched[i].style.height = 'auto'; //maybe could use this.$watched[i].offsetTop

                            var elOffsetTop = (0, _jquery2.default)(this.$watched[i]).offset().top;

                            if (elOffsetTop != lastElTopOffset) {
                                group++;
                                groups[group] = [];
                                lastElTopOffset = elOffsetTop;
                            }

                            groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
                        }

                        for (var j = 0, ln = groups.length; j < ln; j++) {
                            var heights = (0, _jquery2.default)(groups[j]).map(function () {
                                return this[1];
                            }).get();
                            var max = Math.max.apply(null, heights);
                            groups[j].push(max);
                        }

                        cb(groups);
                    }
                    /**
                     * Changes the CSS height property of each child in an Equalizer parent to match the tallest
                     * @param {array} heights - An array of heights of children within Equalizer container
                     * @fires Equalizer#preequalized
                     * @fires Equalizer#postequalized
                     */

                }, {
                    key: "applyHeight",
                    value: function applyHeight(heights) {
                        var max = Math.max.apply(null, heights);
                        /**
                         * Fires before the heights are applied
                         * @event Equalizer#preequalized
                         */

                        this.$element.trigger('preequalized.zf.equalizer');
                        this.$watched.css('height', max);
                        /**
                         * Fires when the heights have been applied
                         * @event Equalizer#postequalized
                         */

                        this.$element.trigger('postequalized.zf.equalizer');
                    }
                    /**
                     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
                     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
                     * @fires Equalizer#preequalized
                     * @fires Equalizer#preequalizedrow
                     * @fires Equalizer#postequalizedrow
                     * @fires Equalizer#postequalized
                     */

                }, {
                    key: "applyHeightByRow",
                    value: function applyHeightByRow(groups) {
                        /**
                         * Fires before the heights are applied
                         */
                        this.$element.trigger('preequalized.zf.equalizer');

                        for (var i = 0, len = groups.length; i < len; i++) {
                            var groupsILength = groups[i].length,
                                max = groups[i][groupsILength - 1];

                            if (groupsILength <= 2) {
                                (0, _jquery2.default)(groups[i][0][0]).css({
                                    'height': 'auto'
                                });
                                continue;
                            }
                            /**
                             * Fires before the heights per row are applied
                             * @event Equalizer#preequalizedrow
                             */

                            this.$element.trigger('preequalizedrow.zf.equalizer');

                            for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
                                (0, _jquery2.default)(groups[i][j][0]).css({
                                    'height': max
                                });
                            }
                            /**
                             * Fires when the heights per row have been applied
                             * @event Equalizer#postequalizedrow
                             */

                            this.$element.trigger('postequalizedrow.zf.equalizer');
                        }
                        /**
                         * Fires when the heights have been applied
                         */

                        this.$element.trigger('postequalized.zf.equalizer');
                    }
                    /**
                     * Destroys an instance of Equalizer.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this._pauseEvents();

                        this.$watched.css('height', 'auto');
                    }
                }]);

                return Equalizer;
            }(Plugin);
        /**
         * Default settings for plugin
         */

        Equalizer.defaults = {
            /**
             * Enable height equalization when stacked on smaller screens.
             * @option
             * @type {boolean}
             * @default false
             */
            equalizeOnStack: false,

            /**
             * Enable height equalization row by row.
             * @option
             * @type {boolean}
             * @default false
             */
            equalizeByRow: false,

            /**
             * String representing the minimum breakpoint size the plugin should equalize heights on.
             * @option
             * @type {string}
             * @default ''
             */
            equalizeOn: ''
        };

        /**
         * Interchange module.
         * @module foundation.interchange
         * @requires foundation.util.mediaQuery
         */

        var Interchange =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Interchange, _Plugin);

                function Interchange() {
                    _classCallCheck(this, Interchange);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Interchange).apply(this, arguments));
                }

                _createClass(Interchange, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of Interchange.
                     * @class
                     * @name Interchange
                     * @fires Interchange#init
                     * @param {Object} element - jQuery object to add the trigger to.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Interchange.defaults, options);
                        this.rules = [];
                        this.currentPath = '';
                        this.className = 'Interchange'; // ie9 back compat

                        this._init();

                        this._events();
                    }
                    /**
                     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        MediaQuery._init();

                        var id = this.$element[0].id || GetYoDigits(6, 'interchange');
                        this.$element.attr({
                            'data-resize': id,
                            'id': id
                        });

                        this._addBreakpoints();

                        this._generateRules();

                        this._reflow();
                    }
                    /**
                     * Initializes events for Interchange.
                     * @function
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this2 = this;

                        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function () {
                            return _this2._reflow();
                        });
                    }
                    /**
                     * Calls necessary functions to update Interchange upon DOM change
                     * @function
                     * @private
                     */

                }, {
                    key: "_reflow",
                    value: function _reflow() {
                        var match; // Iterate through each rule, but only save the last match

                        for (var i in this.rules) {
                            if (this.rules.hasOwnProperty(i)) {
                                var rule = this.rules[i];

                                if (window.matchMedia(rule.query).matches) {
                                    match = rule;
                                }
                            }
                        }

                        if (match) {
                            this.replace(match.path);
                        }
                    }
                    /**
                     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
                     * @function
                     * @private
                     */

                }, {
                    key: "_addBreakpoints",
                    value: function _addBreakpoints() {
                        for (var i in MediaQuery.queries) {
                            if (MediaQuery.queries.hasOwnProperty(i)) {
                                var query = MediaQuery.queries[i];
                                Interchange.SPECIAL_QUERIES[query.name] = query.value;
                            }
                        }
                    }
                    /**
                     * Checks the Interchange element for the provided media query + content pairings
                     * @function
                     * @private
                     * @param {Object} element - jQuery object that is an Interchange instance
                     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
                     */

                }, {
                    key: "_generateRules",
                    value: function _generateRules(element) {
                        var rulesList = [];
                        var rules;

                        if (this.options.rules) {
                            rules = this.options.rules;
                        } else {
                            rules = this.$element.data('interchange');
                        }

                        rules = typeof rules === 'string' ? rules.match(/\[.*?, .*?\]/g) : rules;

                        for (var i in rules) {
                            if (rules.hasOwnProperty(i)) {
                                var rule = rules[i].slice(1, -1).split(', ');
                                var path = rule.slice(0, -1).join('');
                                var query = rule[rule.length - 1];

                                if (Interchange.SPECIAL_QUERIES[query]) {
                                    query = Interchange.SPECIAL_QUERIES[query];
                                }

                                rulesList.push({
                                    path: path,
                                    query: query
                                });
                            }
                        }

                        this.rules = rulesList;
                    }
                    /**
                     * Update the `src` property of an image, or change the HTML of a container, to the specified path.
                     * @function
                     * @param {String} path - Path to the image or HTML partial.
                     * @fires Interchange#replaced
                     */

                }, {
                    key: "replace",
                    value: function replace(path) {
                        if (this.currentPath === path) return;

                        var _this = this,
                            trigger = 'replaced.zf.interchange'; // Replacing images


                        if (this.$element[0].nodeName === 'IMG') {
                            this.$element.attr('src', path).on('load', function () {
                                _this.currentPath = path;
                            }).trigger(trigger);
                        } // Replacing background images
                        else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
                            path = path.replace(/\(/g, '%28').replace(/\)/g, '%29');
                            this.$element.css({
                                'background-image': 'url(' + path + ')'
                            }).trigger(trigger);
                        } // Replacing HTML
                        else {
                            _jquery2.default.get(path, function (response) {
                                _this.$element.html(response).trigger(trigger);

                                (0, _jquery2.default)(response).foundation();
                                _this.currentPath = path;
                            });
                        }
                        /**
                         * Fires when content in an Interchange element is done being loaded.
                         * @event Interchange#replaced
                         */
                        // this.$element.trigger('replaced.zf.interchange');
                    }
                    /**
                     * Destroys an instance of interchange.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.off('resizeme.zf.trigger');
                    }
                }]);

                return Interchange;
            }(Plugin);
        /**
         * Default settings for plugin
         */

        Interchange.defaults = {
            /**
             * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
             * @option
             * @type {?array}
             * @default null
             */
            rules: null
        };
        Interchange.SPECIAL_QUERIES = {
            'landscape': 'screen and (orientation: landscape)',
            'portrait': 'screen and (orientation: portrait)',
            'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
        };

        /**
         * SmoothScroll module.
         * @module foundation.smooth-scroll
         */

        var SmoothScroll =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(SmoothScroll, _Plugin);

                function SmoothScroll() {
                    _classCallCheck(this, SmoothScroll);

                    return _possibleConstructorReturn(this, _getPrototypeOf(SmoothScroll).apply(this, arguments));
                }

                _createClass(SmoothScroll, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of SmoothScroll.
                     * @class
                     * @name SmoothScroll
                     * @fires SmoothScroll#init
                     * @param {Object} element - jQuery object to add the trigger to.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, SmoothScroll.defaults, this.$element.data(), options);
                        this.className = 'SmoothScroll'; // ie9 back compat

                        this._init();
                    }
                    /**
                     * Initialize the SmoothScroll plugin
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var id = this.$element[0].id || GetYoDigits(6, 'smooth-scroll');
                        this.$element.attr({
                            id: id
                        });

                        this._events();
                    }
                    /**
                     * Initializes events for SmoothScroll.
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        this.$element.on('click.zf.smoothScroll', this._handleLinkClick);
                        this.$element.on('click.zf.smoothScroll', 'a[href^="#"]', this._handleLinkClick);
                    }
                    /**
                     * Handle the given event to smoothly scroll to the anchor pointed by the event target.
                     * @param {*} e - event
                     * @function
                     * @private
                     */

                }, {
                    key: "_handleLinkClick",
                    value: function _handleLinkClick(e) {
                        var _this = this;

                        // Follow the link if it does not point to an anchor.
                        if (!(0, _jquery2.default)(e.currentTarget).is('a[href^="#"]')) return;
                        var arrival = e.currentTarget.getAttribute('href');
                        this._inTransition = true;
                        SmoothScroll.scrollToLoc(arrival, this.options, function () {
                            _this._inTransition = false;
                        });
                        e.preventDefault();
                    }
                }, {
                    key: "_destroy",

                    /**
                     * Destroys the SmoothScroll instance.
                     * @function
                     */
                    value: function _destroy() {
                        this.$element.off('click.zf.smoothScroll', this._handleLinkClick);
                        this.$element.off('click.zf.smoothScroll', 'a[href^="#"]', this._handleLinkClick);
                    }
                }], [{
                    key: "scrollToLoc",

                    /**
                     * Function to scroll to a given location on the page.
                     * @param {String} loc - A properly formatted jQuery id selector. Example: '#foo'
                     * @param {Object} options - The options to use.
                     * @param {Function} callback - The callback function.
                     * @static
                     * @function
                     */
                    value: function scrollToLoc(loc) {
                        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SmoothScroll.defaults;
                        var callback = arguments.length > 2 ? arguments[2] : undefined;
                        var $loc = (0, _jquery2.default)(loc); // Do nothing if target does not exist to prevent errors

                        if (!$loc.length) return false;
                        var scrollPos = Math.round($loc.offset().top - options.threshold / 2 - options.offset);
                        (0, _jquery2.default)('html, body').stop(true).animate({
                            scrollTop: scrollPos
                        }, options.animationDuration, options.animationEasing, function () {
                            if (typeof callback === 'function') {
                                callback();
                            }
                        });
                    }
                }]);

                return SmoothScroll;
            }(Plugin);
        /**
         * Default settings for plugin.
         */

        SmoothScroll.defaults = {
            /**
             * Amount of time, in ms, the animated scrolling should take between locations.
             * @option
             * @type {number}
             * @default 500
             */
            animationDuration: 500,

            /**
             * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
             * @option
             * @type {string}
             * @default 'linear'
             * @see {@link https://api.jquery.com/animate|Jquery animate}
             */
            animationEasing: 'linear',

            /**
             * Number of pixels to use as a marker for location changes.
             * @option
             * @type {number}
             * @default 50
             */
            threshold: 50,

            /**
             * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
             * @option
             * @type {number}
             * @default 0
             */
            offset: 0
        };

        /**
         * Magellan module.
         * @module foundation.magellan
         * @requires foundation.smoothScroll
         */

        var Magellan =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Magellan, _Plugin);

                function Magellan() {
                    _classCallCheck(this, Magellan);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Magellan).apply(this, arguments));
                }

                _createClass(Magellan, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of Magellan.
                     * @class
                     * @name Magellan
                     * @fires Magellan#init
                     * @param {Object} element - jQuery object to add the trigger to.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Magellan.defaults, this.$element.data(), options);
                        this.className = 'Magellan'; // ie9 back compat

                        this._init();

                        this.calcPoints();
                    }
                    /**
                     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var id = this.$element[0].id || GetYoDigits(6, 'magellan');

                        this.$targets = (0, _jquery2.default)('[data-magellan-target]');
                        this.$links = this.$element.find('a');
                        this.$element.attr({
                            'data-resize': id,
                            'data-scroll': id,
                            'id': id
                        });
                        this.$active = (0, _jquery2.default)();
                        this.scrollPos = parseInt(window.pageYOffset, 10);

                        this._events();
                    }
                    /**
                     * Calculates an array of pixel values that are the demarcation lines between locations on the page.
                     * Can be invoked if new elements are added or the size of a location changes.
                     * @function
                     */

                }, {
                    key: "calcPoints",
                    value: function calcPoints() {
                        var _this = this,
                            body = document.body,
                            html = document.documentElement;

                        this.points = [];
                        this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
                        this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));
                        this.$targets.each(function () {
                            var $tar = (0, _jquery2.default)(this),
                                pt = Math.round($tar.offset().top - _this.options.threshold);
                            $tar.targetPoint = pt;

                            _this.points.push(pt);
                        });
                    }
                    /**
                     * Initializes events for Magellan.
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this = this,
                            $body = (0, _jquery2.default)('html, body'),
                            opts = {
                                duration: _this.options.animationDuration,
                                easing: _this.options.animationEasing
                            };

                        (0, _jquery2.default)(window).one('load', function () {
                            if (_this.options.deepLinking) {
                                if (location.hash) {
                                    _this.scrollToLoc(location.hash);
                                }
                            }

                            _this.calcPoints();

                            _this._updateActive();
                        });
                        _this.onLoadListener = onLoad((0, _jquery2.default)(window), function () {
                            _this.$element.on({
                                'resizeme.zf.trigger': _this.reflow.bind(_this),
                                'scrollme.zf.trigger': _this._updateActive.bind(_this)
                            }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
                                e.preventDefault();
                                var arrival = this.getAttribute('href');

                                _this.scrollToLoc(arrival);
                            });
                        });

                        this._deepLinkScroll = function (e) {
                            if (_this.options.deepLinking) {
                                _this.scrollToLoc(window.location.hash);
                            }
                        };

                        (0, _jquery2.default)(window).on('hashchange', this._deepLinkScroll);
                    }
                    /**
                     * Function to scroll to a given location on the page.
                     * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
                     * @function
                     */

                }, {
                    key: "scrollToLoc",
                    value: function scrollToLoc(loc) {
                        this._inTransition = true;

                        var _this = this;

                        var options = {
                            animationEasing: this.options.animationEasing,
                            animationDuration: this.options.animationDuration,
                            threshold: this.options.threshold,
                            offset: this.options.offset
                        };
                        SmoothScroll.scrollToLoc(loc, options, function () {
                            _this._inTransition = false;
                        });
                    }
                    /**
                     * Calls necessary functions to update Magellan upon DOM change
                     * @function
                     */

                }, {
                    key: "reflow",
                    value: function reflow() {
                        this.calcPoints();

                        this._updateActive();
                    }
                    /**
                     * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
                     * @private
                     * @function
                     * @fires Magellan#update
                     */

                }, {
                    key: "_updateActive",
                    value: function _updateActive()
                        /*evt, elem, scrollPos*/ {
                        var _this2 = this;

                        if (this._inTransition) return;
                        var newScrollPos = parseInt(window.pageYOffset, 10);
                        var isScrollingUp = this.scrollPos > newScrollPos;
                        this.scrollPos = newScrollPos;
                        var activeIdx; // Before the first point: no link

                        if (newScrollPos < this.points[0]) ;
                            /* do nothing */
                        // At the bottom of the page: last link
                        else if (newScrollPos + this.winHeight === this.docHeight) {
                            activeIdx = this.points.length - 1;
                        } // Otherwhise, use the last visible link
                        else {
                            var visibleLinks = this.points.filter(function (p, i) {
                                return p - _this2.options.offset - (isScrollingUp ? _this2.options.threshold : 0) <= newScrollPos;
                            });
                            activeIdx = visibleLinks.length ? visibleLinks.length - 1 : 0;
                        } // Get the new active link


                        var $oldActive = this.$active;
                        var activeHash = '';

                        if (typeof activeIdx !== 'undefined') {
                            this.$active = this.$links.filter('[href="#' + this.$targets.eq(activeIdx).data('magellan-target') + '"]');
                            if (this.$active.length) activeHash = this.$active[0].getAttribute('href');
                        } else {
                            this.$active = (0, _jquery2.default)();
                        }

                        var isNewActive = !(!this.$active.length && !$oldActive.length) && !this.$active.is($oldActive);
                        var isNewHash = activeHash !== window.location.hash; // Update the active link element

                        if (isNewActive) {
                            $oldActive.removeClass(this.options.activeClass);
                            this.$active.addClass(this.options.activeClass);
                        } // Update the hash (it may have changed with the same active link)


                        if (this.options.deepLinking && isNewHash) {
                            if (window.history.pushState) {
                                // Set or remove the hash (see: https://stackoverflow.com/a/5298684/4317384
                                var url = activeHash ? activeHash : window.location.pathname + window.location.search;
                                window.history.pushState(null, null, url);
                            } else {
                                window.location.hash = activeHash;
                            }
                        }

                        if (isNewActive) {
                            /**
                             * Fires when magellan is finished updating to the new active element.
                             * @event Magellan#update
                             */
                            this.$element.trigger('update.zf.magellan', [this.$active]);
                        }
                    }
                    /**
                     * Destroys an instance of Magellan and resets the url of the window.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.off('.zf.trigger .zf.magellan').find(".".concat(this.options.activeClass)).removeClass(this.options.activeClass);

                        if (this.options.deepLinking) {
                            var hash = this.$active[0].getAttribute('href');
                            window.location.hash.replace(hash, '');
                        }

                        (0, _jquery2.default)(window).off('hashchange', this._deepLinkScroll);
                        if (this.onLoadListener) (0, _jquery2.default)(window).off(this.onLoadListener);
                    }
                }]);

                return Magellan;
            }(Plugin);
        /**
         * Default settings for plugin
         */

        Magellan.defaults = {
            /**
             * Amount of time, in ms, the animated scrolling should take between locations.
             * @option
             * @type {number}
             * @default 500
             */
            animationDuration: 500,

            /**
             * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
             * @option
             * @type {string}
             * @default 'linear'
             * @see {@link https://api.jquery.com/animate|Jquery animate}
             */
            animationEasing: 'linear',

            /**
             * Number of pixels to use as a marker for location changes.
             * @option
             * @type {number}
             * @default 50
             */
            threshold: 50,

            /**
             * Class applied to the active locations link on the magellan container.
             * @option
             * @type {string}
             * @default 'is-active'
             */
            activeClass: 'is-active',

            /**
             * Allows the script to manipulate the url of the current page, and if supported, alter the history.
             * @option
             * @type {boolean}
             * @default false
             */
            deepLinking: false,

            /**
             * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
             * @option
             * @type {number}
             * @default 0
             */
            offset: 0
        };

        /**
         * OffCanvas module.
         * @module foundation.offcanvas
         * @requires foundation.util.keyboard
         * @requires foundation.util.mediaQuery
         * @requires foundation.util.triggers
         */

        var OffCanvas =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(OffCanvas, _Plugin);

                function OffCanvas() {
                    _classCallCheck(this, OffCanvas);

                    return _possibleConstructorReturn(this, _getPrototypeOf(OffCanvas).apply(this, arguments));
                }

                _createClass(OffCanvas, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of an off-canvas wrapper.
                     * @class
                     * @name OffCanvas
                     * @fires OffCanvas#init
                     * @param {Object} element - jQuery object to initialize.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        var _this2 = this;

                        this.className = 'OffCanvas'; // ie9 back compat

                        this.$element = element;
                        this.options = _jquery2.default.extend({}, OffCanvas.defaults, this.$element.data(), options);
                        this.contentClasses = {
                            base: [],
                            reveal: []
                        };
                        this.$lastTrigger = (0, _jquery2.default)();
                        this.$triggers = (0, _jquery2.default)();
                        this.position = 'left';
                        this.$content = (0, _jquery2.default)();
                        this.nested = !!this.options.nested; // Defines the CSS transition/position classes of the off-canvas content container.

                        (0, _jquery2.default)(['push', 'overlap']).each(function (index, val) {
                            _this2.contentClasses.base.push('has-transition-' + val);
                        });
                        (0, _jquery2.default)(['left', 'right', 'top', 'bottom']).each(function (index, val) {
                            _this2.contentClasses.base.push('has-position-' + val);

                            _this2.contentClasses.reveal.push('has-reveal-' + val);
                        }); // Triggers init is idempotent, just need to make sure it is initialized

                        Triggers.init(_jquery2.default);

                        MediaQuery._init();

                        this._init();

                        this._events();

                        Keyboard.register('OffCanvas', {
                            'ESCAPE': 'close'
                        });
                    }
                    /**
                     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var id = this.$element.attr('id');
                        this.$element.attr('aria-hidden', 'true'); // Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)

                        if (this.options.contentId) {
                            this.$content = (0, _jquery2.default)('#' + this.options.contentId);
                        } else if (this.$element.siblings('[data-off-canvas-content]').length) {
                            this.$content = this.$element.siblings('[data-off-canvas-content]').first();
                        } else {
                            this.$content = this.$element.closest('[data-off-canvas-content]').first();
                        }

                        if (!this.options.contentId) {
                            // Assume that the off-canvas element is nested if it isn't a sibling of the content
                            this.nested = this.$element.siblings('[data-off-canvas-content]').length === 0;
                        } else if (this.options.contentId && this.options.nested === null) {
                            // Warning if using content ID without setting the nested option
                            // Once the element is nested it is required to work properly in this case
                            console.warn('Remember to use the nested option if using the content ID option!');
                        }

                        if (this.nested === true) {
                            // Force transition overlap if nested
                            this.options.transition = 'overlap'; // Remove appropriate classes if already assigned in markup

                            this.$element.removeClass('is-transition-push');
                        }

                        this.$element.addClass("is-transition-".concat(this.options.transition, " is-closed")); // Find triggers that affect this element and add aria-expanded to them

                        this.$triggers = (0, _jquery2.default)(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id); // Get position by checking for related CSS class

                        this.position = this.$element.is('.position-left, .position-top, .position-right, .position-bottom') ? this.$element.attr('class').match(/position\-(left|top|right|bottom)/)[1] : this.position; // Add an overlay over the content if necessary

                        if (this.options.contentOverlay === true) {
                            var overlay = document.createElement('div');
                            var overlayPosition = (0, _jquery2.default)(this.$element).css("position") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';
                            overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);
                            this.$overlay = (0, _jquery2.default)(overlay);

                            if (overlayPosition === 'is-overlay-fixed') {
                                (0, _jquery2.default)(this.$overlay).insertAfter(this.$element);
                            } else {
                                this.$content.append(this.$overlay);
                            }
                        } // Get the revealOn option from the class.


                        var revealOnRegExp = new RegExp(RegExpEscape(this.options.revealClass) + '([^\\s]+)', 'g');
                        var revealOnClass = revealOnRegExp.exec(this.$element[0].className);

                        if (revealOnClass) {
                            this.options.isRevealed = true;
                            this.options.revealOn = this.options.revealOn || revealOnClass[1];
                        } // Ensure the `reveal-on-*` class is set.


                        if (this.options.isRevealed === true && this.options.revealOn) {
                            this.$element.first().addClass("".concat(this.options.revealClass).concat(this.options.revealOn));

                            this._setMQChecker();
                        }

                        if (this.options.transitionTime) {
                            this.$element.css('transition-duration', this.options.transitionTime);
                        } // Initally remove all transition/position CSS classes from off-canvas content container.


                        this._removeContentClasses();
                    }
                    /**
                     * Adds event handlers to the off-canvas wrapper and the exit overlay.
                     * @function
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        this.$element.off('.zf.trigger .zf.offcanvas').on({
                            'open.zf.trigger': this.open.bind(this),
                            'close.zf.trigger': this.close.bind(this),
                            'toggle.zf.trigger': this.toggle.bind(this),
                            'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
                        });

                        if (this.options.closeOnClick === true) {
                            var $target = this.options.contentOverlay ? this.$overlay : this.$content;
                            $target.on({
                                'click.zf.offcanvas': this.close.bind(this)
                            });
                        }
                    }
                    /**
                     * Applies event listener for elements that will reveal at certain breakpoints.
                     * @private
                     */

                }, {
                    key: "_setMQChecker",
                    value: function _setMQChecker() {
                        var _this = this;

                        this.onLoadListener = onLoad((0, _jquery2.default)(window), function () {
                            if (MediaQuery.atLeast(_this.options.revealOn)) {
                                _this.reveal(true);
                            }
                        });
                        (0, _jquery2.default)(window).on('changed.zf.mediaquery', function () {
                            if (MediaQuery.atLeast(_this.options.revealOn)) {
                                _this.reveal(true);
                            } else {
                                _this.reveal(false);
                            }
                        });
                    }
                    /**
                     * Removes the CSS transition/position classes of the off-canvas content container.
                     * Removing the classes is important when another off-canvas gets opened that uses the same content container.
                     * @param {Boolean} hasReveal - true if related off-canvas element is revealed.
                     * @private
                     */

                }, {
                    key: "_removeContentClasses",
                    value: function _removeContentClasses(hasReveal) {
                        if (typeof hasReveal !== 'boolean') {
                            this.$content.removeClass(this.contentClasses.base.join(' '));
                        } else if (hasReveal === false) {
                            this.$content.removeClass("has-reveal-".concat(this.position));
                        }
                    }
                    /**
                     * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.
                     * Beforehand any transition/position class gets removed.
                     * @param {Boolean} hasReveal - true if related off-canvas element is revealed.
                     * @private
                     */

                }, {
                    key: "_addContentClasses",
                    value: function _addContentClasses(hasReveal) {
                        this._removeContentClasses(hasReveal);

                        if (typeof hasReveal !== 'boolean') {
                            this.$content.addClass("has-transition-".concat(this.options.transition, " has-position-").concat(this.position));
                        } else if (hasReveal === true) {
                            this.$content.addClass("has-reveal-".concat(this.position));
                        }
                    }
                    /**
                     * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
                     * @param {Boolean} isRevealed - true if element should be revealed.
                     * @function
                     */

                }, {
                    key: "reveal",
                    value: function reveal(isRevealed) {
                        if (isRevealed) {
                            this.close();
                            this.isRevealed = true;
                            this.$element.attr('aria-hidden', 'false');
                            this.$element.off('open.zf.trigger toggle.zf.trigger');
                            this.$element.removeClass('is-closed');
                        } else {
                            this.isRevealed = false;
                            this.$element.attr('aria-hidden', 'true');
                            this.$element.off('open.zf.trigger toggle.zf.trigger').on({
                                'open.zf.trigger': this.open.bind(this),
                                'toggle.zf.trigger': this.toggle.bind(this)
                            });
                            this.$element.addClass('is-closed');
                        }

                        this._addContentClasses(isRevealed);
                    }
                    /**
                     * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.
                     * @private
                     */

                }, {
                    key: "_stopScrolling",
                    value: function _stopScrolling(event) {
                        return false;
                    } // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios
                    // Only really works for y, not sure how to extend to x or if we need to.

                }, {
                    key: "_recordScrollable",
                    value: function _recordScrollable(event) {
                        var elem = this; // called from event handler context with this as elem
                        // If the element is scrollable (content overflows), then...

                        if (elem.scrollHeight !== elem.clientHeight) {
                            // If we're at the top, scroll down one pixel to allow scrolling up
                            if (elem.scrollTop === 0) {
                                elem.scrollTop = 1;
                            } // If we're at the bottom, scroll up one pixel to allow scrolling down


                            if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {
                                elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;
                            }
                        }

                        elem.allowUp = elem.scrollTop > 0;
                        elem.allowDown = elem.scrollTop < elem.scrollHeight - elem.clientHeight;
                        elem.lastY = event.originalEvent.pageY;
                    }
                }, {
                    key: "_stopScrollPropagation",
                    value: function _stopScrollPropagation(event) {
                        var elem = this; // called from event handler context with this as elem

                        var up = event.pageY < elem.lastY;
                        var down = !up;
                        elem.lastY = event.pageY;

                        if (up && elem.allowUp || down && elem.allowDown) {
                            event.stopPropagation();
                        } else {
                            event.preventDefault();
                        }
                    }
                    /**
                     * Opens the off-canvas menu.
                     * @function
                     * @param {Object} event - Event object passed from listener.
                     * @param {jQuery} trigger - element that triggered the off-canvas to open.
                     * @fires Offcanvas#opened
                     * @todo also trigger 'open' event?
                     */

                }, {
                    key: "open",
                    value: function open(event, trigger) {
                        if (this.$element.hasClass('is-open') || this.isRevealed) {
                            return;
                        }

                        var _this = this;

                        if (trigger) {
                            this.$lastTrigger = trigger;
                        }

                        if (this.options.forceTo === 'top') {
                            window.scrollTo(0, 0);
                        } else if (this.options.forceTo === 'bottom') {
                            window.scrollTo(0, document.body.scrollHeight);
                        }

                        if (this.options.transitionTime && this.options.transition !== 'overlap') {
                            this.$element.siblings('[data-off-canvas-content]').css('transition-duration', this.options.transitionTime);
                        } else {
                            this.$element.siblings('[data-off-canvas-content]').css('transition-duration', '');
                        }

                        this.$element.addClass('is-open').removeClass('is-closed');
                        this.$triggers.attr('aria-expanded', 'true');
                        this.$element.attr('aria-hidden', 'false');
                        this.$content.addClass('is-open-' + this.position); // If `contentScroll` is set to false, add class and disable scrolling on touch devices.

                        if (this.options.contentScroll === false) {
                            (0, _jquery2.default)('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);
                            this.$element.on('touchstart', this._recordScrollable);
                            this.$element.on('touchmove', this._stopScrollPropagation);
                        }

                        if (this.options.contentOverlay === true) {
                            this.$overlay.addClass('is-visible');
                        }

                        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
                            this.$overlay.addClass('is-closable');
                        }

                        if (this.options.autoFocus === true) {
                            this.$element.one(transitionend(this.$element), function () {
                                if (!_this.$element.hasClass('is-open')) {
                                    return; // exit if prematurely closed
                                }

                                var canvasFocus = _this.$element.find('[data-autofocus]');

                                if (canvasFocus.length) {
                                    canvasFocus.eq(0).focus();
                                } else {
                                    _this.$element.find('a, button').eq(0).focus();
                                }
                            });
                        }

                        if (this.options.trapFocus === true) {
                            this.$content.attr('tabindex', '-1');
                            Keyboard.trapFocus(this.$element);
                        }

                        this._addContentClasses();
                        /**
                         * Fires when the off-canvas menu opens.
                         * @event Offcanvas#opened
                         */

                        this.$element.trigger('opened.zf.offcanvas');
                    }
                    /**
                     * Closes the off-canvas menu.
                     * @function
                     * @param {Function} cb - optional cb to fire after closure.
                     * @fires Offcanvas#closed
                     */

                }, {
                    key: "close",
                    value: function close(cb) {
                        if (!this.$element.hasClass('is-open') || this.isRevealed) {
                            return;
                        }

                        var _this = this;

                        this.$element.removeClass('is-open');
                        this.$element.attr('aria-hidden', 'true')
                            /**
                             * Fires when the off-canvas menu opens.
                             * @event Offcanvas#closed
                             */
                            .trigger('closed.zf.offcanvas');
                        this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom'); // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.

                        if (this.options.contentScroll === false) {
                            (0, _jquery2.default)('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);
                            this.$element.off('touchstart', this._recordScrollable);
                            this.$element.off('touchmove', this._stopScrollPropagation);
                        }

                        if (this.options.contentOverlay === true) {
                            this.$overlay.removeClass('is-visible');
                        }

                        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
                            this.$overlay.removeClass('is-closable');
                        }

                        this.$triggers.attr('aria-expanded', 'false');

                        if (this.options.trapFocus === true) {
                            this.$content.removeAttr('tabindex');
                            Keyboard.releaseFocus(this.$element);
                        } // Listen to transitionEnd and add class when done.


                        this.$element.one(transitionend(this.$element), function (e) {
                            _this.$element.addClass('is-closed');

                            _this._removeContentClasses();
                        });
                    }
                    /**
                     * Toggles the off-canvas menu open or closed.
                     * @function
                     * @param {Object} event - Event object passed from listener.
                     * @param {jQuery} trigger - element that triggered the off-canvas to open.
                     */

                }, {
                    key: "toggle",
                    value: function toggle(event, trigger) {
                        if (this.$element.hasClass('is-open')) {
                            this.close(event, trigger);
                        } else {
                            this.open(event, trigger);
                        }
                    }
                    /**
                     * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
                     * @function
                     * @private
                     */

                }, {
                    key: "_handleKeyboard",
                    value: function _handleKeyboard(e) {
                        var _this3 = this;

                        Keyboard.handleKey(e, 'OffCanvas', {
                            close: function close() {
                                _this3.close();

                                _this3.$lastTrigger.focus();

                                return true;
                            },
                            handled: function handled() {
                                e.stopPropagation();
                                e.preventDefault();
                            }
                        });
                    }
                    /**
                     * Destroys the offcanvas plugin.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.close();
                        this.$element.off('.zf.trigger .zf.offcanvas');
                        this.$overlay.off('.zf.offcanvas');
                        if (this.onLoadListener) (0, _jquery2.default)(window).off(this.onLoadListener);
                    }
                }]);

                return OffCanvas;
            }(Plugin);

        OffCanvas.defaults = {
            /**
             * Allow the user to click outside of the menu to close it.
             * @option
             * @type {boolean}
             * @default true
             */
            closeOnClick: true,

            /**
             * Adds an overlay on top of `[data-off-canvas-content]`.
             * @option
             * @type {boolean}
             * @default true
             */
            contentOverlay: true,

            /**
             * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.
             * @option
             * @type {?string}
             * @default null
             */
            contentId: null,

            /**
             * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.
             * @option
             * @type {boolean}
             * @default null
             */
            nested: null,

            /**
             * Enable/disable scrolling of the main content when an off canvas panel is open.
             * @option
             * @type {boolean}
             * @default true
             */
            contentScroll: true,

            /**
             * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
             * @option
             * @type {number}
             * @default null
             */
            transitionTime: null,

            /**
             * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.
             * @option
             * @type {string}
             * @default push
             */
            transition: 'push',

            /**
             * Force the page to scroll to top or bottom on open.
             * @option
             * @type {?string}
             * @default null
             */
            forceTo: null,

            /**
             * Allow the offcanvas to remain open for certain breakpoints.
             * @option
             * @type {boolean}
             * @default false
             */
            isRevealed: false,

            /**
             * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
             * @option
             * @type {?string}
             * @default null
             */
            revealOn: null,

            /**
             * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.
             * @option
             * @type {boolean}
             * @default true
             */
            autoFocus: true,

            /**
             * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
             * @option
             * @type {string}
             * @default reveal-for-
             * @todo improve the regex testing for this.
             */
            revealClass: 'reveal-for-',

            /**
             * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
             * @option
             * @type {boolean}
             * @default false
             */
            trapFocus: false
        };

        /**
         * Orbit module.
         * @module foundation.orbit
         * @requires foundation.util.keyboard
         * @requires foundation.util.motion
         * @requires foundation.util.timer
         * @requires foundation.util.imageLoader
         * @requires foundation.util.touch
         */

        var Orbit =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Orbit, _Plugin);

                function Orbit() {
                    _classCallCheck(this, Orbit);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Orbit).apply(this, arguments));
                }

                _createClass(Orbit, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of an orbit carousel.
                     * @class
                     * @name Orbit
                     * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Orbit.defaults, this.$element.data(), options);
                        this.className = 'Orbit'; // ie9 back compat

                        Touch.init(_jquery2.default); // Touch init is idempotent, we just need to make sure it's initialied.

                        this._init();

                        Keyboard.register('Orbit', {
                            'ltr': {
                                'ARROW_RIGHT': 'next',
                                'ARROW_LEFT': 'previous'
                            },
                            'rtl': {
                                'ARROW_LEFT': 'next',
                                'ARROW_RIGHT': 'previous'
                            }
                        });
                    }
                    /**
                     * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide
                        this._reset();

                        this.$wrapper = this.$element.find(".".concat(this.options.containerClass));
                        this.$slides = this.$element.find(".".concat(this.options.slideClass));
                        var $images = this.$element.find('img'),
                            initActive = this.$slides.filter('.is-active'),
                            id = this.$element[0].id || GetYoDigits(6, 'orbit');
                        this.$element.attr({
                            'data-resize': id,
                            'id': id
                        });

                        if (!initActive.length) {
                            this.$slides.eq(0).addClass('is-active');
                        }

                        if (!this.options.useMUI) {
                            this.$slides.addClass('no-motionui');
                        }

                        if ($images.length) {
                            onImagesLoaded($images, this._prepareForOrbit.bind(this));
                        } else {
                            this._prepareForOrbit(); //hehe
                        }

                        if (this.options.bullets) {
                            this._loadBullets();
                        }

                        this._events();

                        if (this.options.autoPlay && this.$slides.length > 1) {
                            this.geoSync();
                        }

                        if (this.options.accessible) {
                            // allow wrapper to be focusable to enable arrow navigation
                            this.$wrapper.attr('tabindex', 0);
                        }
                    }
                    /**
                     * Creates a jQuery collection of bullets, if they are being used.
                     * @function
                     * @private
                     */

                }, {
                    key: "_loadBullets",
                    value: function _loadBullets() {
                        this.$bullets = this.$element.find(".".concat(this.options.boxOfBullets)).find('button');
                    }
                    /**
                     * Sets a `timer` object on the orbit, and starts the counter for the next slide.
                     * @function
                     */

                }, {
                    key: "geoSync",
                    value: function geoSync() {
                        var _this = this;

                        this.timer = new Timer(this.$element, {
                            duration: this.options.timerDelay,
                            infinite: false
                        }, function () {
                            _this.changeSlide(true);
                        });
                        this.timer.start();
                    }
                    /**
                     * Sets wrapper and slide heights for the orbit.
                     * @function
                     * @private
                     */

                }, {
                    key: "_prepareForOrbit",
                    value: function _prepareForOrbit() {

                        this._setWrapperHeight();
                    }
                    /**
                     * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
                     * @function
                     * @private
                     * @param {Function} cb - a callback function to fire when complete.
                     */

                }, {
                    key: "_setWrapperHeight",
                    value: function _setWrapperHeight(cb) {
                        //rewrite this to `for` loop
                        var max = 0,
                            temp,
                            counter = 0,
                            _this = this;

                        this.$slides.each(function () {
                            temp = this.getBoundingClientRect().height;
                            (0, _jquery2.default)(this).attr('data-slide', counter); // hide all slides but the active one

                            if (!/mui/g.test((0, _jquery2.default)(this)[0].className) && _this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {
                                (0, _jquery2.default)(this).css({
                                    'display': 'none'
                                });
                            }

                            max = temp > max ? temp : max;
                            counter++;
                        });

                        if (counter === this.$slides.length) {
                            this.$wrapper.css({
                                'height': max
                            }); //only change the wrapper height property once.

                            if (cb) {
                                cb(max);
                            } //fire callback with max height dimension.
                        }
                    }
                    /**
                     * Sets the max-height of each slide.
                     * @function
                     * @private
                     */

                }, {
                    key: "_setSlideHeight",
                    value: function _setSlideHeight(height) {
                        this.$slides.each(function () {
                            (0, _jquery2.default)(this).css('max-height', height);
                        });
                    }
                    /**
                     * Adds event listeners to basically everything within the element.
                     * @function
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this = this; //***************************************
                        //**Now using custom event - thanks to:**
                        //**      Yohai Ararat of Toronto      **
                        //***************************************
                        //


                        this.$element.off('.resizeme.zf.trigger').on({
                            'resizeme.zf.trigger': this._prepareForOrbit.bind(this)
                        });

                        if (this.$slides.length > 1) {
                            if (this.options.swipe) {
                                this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {
                                    e.preventDefault();

                                    _this.changeSlide(true);
                                }).on('swiperight.zf.orbit', function (e) {
                                    e.preventDefault();

                                    _this.changeSlide(false);
                                });
                            } //***************************************


                            if (this.options.autoPlay) {
                                this.$slides.on('click.zf.orbit', function () {
                                    _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);

                                    _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();
                                });

                                if (this.options.pauseOnHover) {
                                    this.$element.on('mouseenter.zf.orbit', function () {
                                        _this.timer.pause();
                                    }).on('mouseleave.zf.orbit', function () {
                                        if (!_this.$element.data('clickedOn')) {
                                            _this.timer.start();
                                        }
                                    });
                                }
                            }

                            if (this.options.navButtons) {
                                var $controls = this.$element.find(".".concat(this.options.nextClass, ", .").concat(this.options.prevClass));
                                $controls.attr('tabindex', 0) //also need to handle enter/return and spacebar key presses
                                    .on('click.zf.orbit touchend.zf.orbit', function (e) {
                                        e.preventDefault();

                                        _this.changeSlide((0, _jquery2.default)(this).hasClass(_this.options.nextClass));
                                    });
                            }

                            if (this.options.bullets) {
                                this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {
                                    if (/is-active/g.test(this.className)) {
                                        return false;
                                    } //if this is active, kick out of function.


                                    var idx = (0, _jquery2.default)(this).data('slide'),
                                        ltr = idx > _this.$slides.filter('.is-active').data('slide'),
                                        $slide = _this.$slides.eq(idx);

                                    _this.changeSlide(ltr, $slide, idx);
                                });
                            }

                            if (this.options.accessible) {
                                this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {
                                    // handle keyboard event with keyboard util
                                    Keyboard.handleKey(e, 'Orbit', {
                                        next: function next() {
                                            _this.changeSlide(true);
                                        },
                                        previous: function previous() {
                                            _this.changeSlide(false);
                                        },
                                        handled: function handled() {
                                            // if bullet is focused, make sure focus moves
                                            if ((0, _jquery2.default)(e.target).is(_this.$bullets)) {
                                                _this.$bullets.filter('.is-active').focus();
                                            }
                                        }
                                    });
                                });
                            }
                        }
                    }
                    /**
                     * Resets Orbit so it can be reinitialized
                     */

                }, {
                    key: "_reset",
                    value: function _reset() {
                        // Don't do anything if there are no slides (first run)
                        if (typeof this.$slides == 'undefined') {
                            return;
                        }

                        if (this.$slides.length > 1) {
                            // Remove old events
                            this.$element.off('.zf.orbit').find('*').off('.zf.orbit'); // Restart timer if autoPlay is enabled

                            if (this.options.autoPlay) {
                                this.timer.restart();
                            } // Reset all sliddes


                            this.$slides.each(function (el) {
                                (0, _jquery2.default)(el).removeClass('is-active is-active is-in').removeAttr('aria-live').hide();
                            }); // Show the first slide

                            this.$slides.first().addClass('is-active').show(); // Triggers when the slide has finished animating

                            this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]); // Select first bullet if bullets are present

                            if (this.options.bullets) {
                                this._updateBullets(0);
                            }
                        }
                    }
                    /**
                     * Changes the current slide to a new one.
                     * @function
                     * @param {Boolean} isLTR - if true the slide moves from right to left, if false the slide moves from left to right.
                     * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
                     * @param {Number} idx - the index of the new slide in its collection, if one chosen.
                     * @fires Orbit#slidechange
                     */

                }, {
                    key: "changeSlide",
                    value: function changeSlide(isLTR, chosenSlide, idx) {
                        if (!this.$slides) {
                            return;
                        } // Don't freak out if we're in the middle of cleanup


                        var $curSlide = this.$slides.filter('.is-active').eq(0);

                        if (/mui/g.test($curSlide[0].className)) {
                            return false;
                        } //if the slide is currently animating, kick out of the function


                        var $firstSlide = this.$slides.first(),
                            $lastSlide = this.$slides.last(),
                            dirIn = isLTR ? 'Right' : 'Left',
                            dirOut = isLTR ? 'Left' : 'Right',
                            _this = this,
                            $newSlide;

                        if (!chosenSlide) {
                            //most of the time, this will be auto played or clicked from the navButtons.
                            $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
                                this.options.infiniteWrap ? $curSlide.next(".".concat(this.options.slideClass)).length ? $curSlide.next(".".concat(this.options.slideClass)) : $firstSlide : $curSlide.next(".".concat(this.options.slideClass)) : //pick next slide if moving left to right
                                this.options.infiniteWrap ? $curSlide.prev(".".concat(this.options.slideClass)).length ? $curSlide.prev(".".concat(this.options.slideClass)) : $lastSlide : $curSlide.prev(".".concat(this.options.slideClass)); //pick prev slide if moving right to left
                        } else {
                            $newSlide = chosenSlide;
                        }

                        if ($newSlide.length) {
                            /**
                             * Triggers before the next slide starts animating in and only if a next slide has been found.
                             * @event Orbit#beforeslidechange
                             */
                            this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);

                            if (this.options.bullets) {
                                idx = idx || this.$slides.index($newSlide); //grab index to update bullets

                                this._updateBullets(idx);
                            }

                            if (this.options.useMUI && !this.$element.is(':hidden')) {
                                Motion.animateIn($newSlide.addClass('is-active'), this.options["animInFrom".concat(dirIn)], function () {
                                    $newSlide.css({
                                        'display': 'block'
                                    }).attr('aria-live', 'polite');
                                });
                                Motion.animateOut($curSlide.removeClass('is-active'), this.options["animOutTo".concat(dirOut)], function () {
                                    $curSlide.removeAttr('aria-live');

                                    if (_this.options.autoPlay && !_this.timer.isPaused) {
                                        _this.timer.restart();
                                    } //do stuff?
                                });
                            } else {
                                $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();
                                $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();

                                if (this.options.autoPlay && !this.timer.isPaused) {
                                    this.timer.restart();
                                }
                            }
                            /**
                             * Triggers when the slide has finished animating in.
                             * @event Orbit#slidechange
                             */

                            this.$element.trigger('slidechange.zf.orbit', [$newSlide]);
                        }
                    }
                    /**
                     * Updates the active state of the bullets, if displayed.
                     * @function
                     * @private
                     * @param {Number} idx - the index of the current slide.
                     */

                }, {
                    key: "_updateBullets",
                    value: function _updateBullets(idx) {
                        var $oldBullet = this.$element.find(".".concat(this.options.boxOfBullets)).find('.is-active').removeClass('is-active').blur(),
                            span = $oldBullet.find('span:last').detach(),
                            $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);
                    }
                    /**
                     * Destroys the carousel and hides the element.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();
                    }
                }]);

                return Orbit;
            }(Plugin);

        Orbit.defaults = {
            /**
             * Tells the JS to look for and loadBullets.
             * @option
             * @type {boolean}
             * @default true
             */
            bullets: true,

            /**
             * Tells the JS to apply event listeners to nav buttons
             * @option
             * @type {boolean}
             * @default true
             */
            navButtons: true,

            /**
             * motion-ui animation class to apply
             * @option
             * @type {string}
             * @default 'slide-in-right'
             */
            animInFromRight: 'slide-in-right',

            /**
             * motion-ui animation class to apply
             * @option
             * @type {string}
             * @default 'slide-out-right'
             */
            animOutToRight: 'slide-out-right',

            /**
             * motion-ui animation class to apply
             * @option
             * @type {string}
             * @default 'slide-in-left'
             *
             */
            animInFromLeft: 'slide-in-left',

            /**
             * motion-ui animation class to apply
             * @option
             * @type {string}
             * @default 'slide-out-left'
             */
            animOutToLeft: 'slide-out-left',

            /**
             * Allows Orbit to automatically animate on page load.
             * @option
             * @type {boolean}
             * @default true
             */
            autoPlay: true,

            /**
             * Amount of time, in ms, between slide transitions
             * @option
             * @type {number}
             * @default 5000
             */
            timerDelay: 5000,

            /**
             * Allows Orbit to infinitely loop through the slides
             * @option
             * @type {boolean}
             * @default true
             */
            infiniteWrap: true,

            /**
             * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
             * @option
             * @type {boolean}
             * @default true
             */
            swipe: true,

            /**
             * Allows the timing function to pause animation on hover.
             * @option
             * @type {boolean}
             * @default true
             */
            pauseOnHover: true,

            /**
             * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
             * @option
             * @type {boolean}
             * @default true
             */
            accessible: true,

            /**
             * Class applied to the container of Orbit
             * @option
             * @type {string}
             * @default 'orbit-container'
             */
            containerClass: 'orbit-container',

            /**
             * Class applied to individual slides.
             * @option
             * @type {string}
             * @default 'orbit-slide'
             */
            slideClass: 'orbit-slide',

            /**
             * Class applied to the bullet container. You're welcome.
             * @option
             * @type {string}
             * @default 'orbit-bullets'
             */
            boxOfBullets: 'orbit-bullets',

            /**
             * Class applied to the `next` navigation button.
             * @option
             * @type {string}
             * @default 'orbit-next'
             */
            nextClass: 'orbit-next',

            /**
             * Class applied to the `previous` navigation button.
             * @option
             * @type {string}
             * @default 'orbit-previous'
             */
            prevClass: 'orbit-previous',

            /**
             * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatibility.
             * @option
             * @type {boolean}
             * @default true
             */
            useMUI: true
        };

        var MenuPlugins = {
            dropdown: {
                cssClass: 'dropdown',
                plugin: DropdownMenu
            },
            drilldown: {
                cssClass: 'drilldown',
                plugin: Drilldown
            },
            accordion: {
                cssClass: 'accordion-menu',
                plugin: AccordionMenu
            }
        }; // import "foundation.util.triggers.js";

        /**
         * ResponsiveMenu module.
         * @module foundation.responsiveMenu
         * @requires foundation.util.triggers
         * @requires foundation.util.mediaQuery
         */

        var ResponsiveMenu =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(ResponsiveMenu, _Plugin);

                function ResponsiveMenu() {
                    _classCallCheck(this, ResponsiveMenu);

                    return _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveMenu).apply(this, arguments));
                }

                _createClass(ResponsiveMenu, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of a responsive menu.
                     * @class
                     * @name ResponsiveMenu
                     * @fires ResponsiveMenu#init
                     * @param {jQuery} element - jQuery object to make into a dropdown menu.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = (0, _jquery2.default)(element);
                        this.rules = this.$element.data('responsive-menu');
                        this.currentMq = null;
                        this.currentPlugin = null;
                        this.className = 'ResponsiveMenu'; // ie9 back compat

                        this._init();

                        this._events();
                    }
                    /**
                     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        MediaQuery._init(); // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules


                        if (typeof this.rules === 'string') {
                            var rulesTree = {}; // Parse rules from "classes" pulled from data attribute

                            var rules = this.rules.split(' '); // Iterate through every rule found

                            for (var i = 0; i < rules.length; i++) {
                                var rule = rules[i].split('-');
                                var ruleSize = rule.length > 1 ? rule[0] : 'small';
                                var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

                                if (MenuPlugins[rulePlugin] !== null) {
                                    rulesTree[ruleSize] = MenuPlugins[rulePlugin];
                                }
                            }

                            this.rules = rulesTree;
                        }

                        if (!_jquery2.default.isEmptyObject(this.rules)) {
                            this._checkMediaQueries();
                        } // Add data-mutate since children may need it.


                        this.$element.attr('data-mutate', this.$element.attr('data-mutate') || GetYoDigits(6, 'responsive-menu'));
                    }
                    /**
                     * Initializes events for the Menu.
                     * @function
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this = this;

                        (0, _jquery2.default)(window).on('changed.zf.mediaquery', function () {
                            _this._checkMediaQueries();
                        }); // $(window).on('resize.zf.ResponsiveMenu', function() {
                        //   _this._checkMediaQueries();
                        // });
                    }
                    /**
                     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
                     * @function
                     * @private
                     */

                }, {
                    key: "_checkMediaQueries",
                    value: function _checkMediaQueries() {
                        var matchedMq,
                            _this = this; // Iterate through each rule and find the last matching rule


                        _jquery2.default.each(this.rules, function (key) {
                            if (MediaQuery.atLeast(key)) {
                                matchedMq = key;
                            }
                        }); // No match? No dice

                        if (!matchedMq) return; // Plugin already initialized? We good

                        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return; // Remove existing plugin-specific CSS classes

                        _jquery2.default.each(MenuPlugins, function (key, value) {
                            _this.$element.removeClass(value.cssClass);
                        }); // Add the CSS class for the new plugin

                        this.$element.addClass(this.rules[matchedMq].cssClass); // Create an instance of the new plugin

                        if (this.currentPlugin) this.currentPlugin.destroy();
                        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
                    }
                    /**
                     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.currentPlugin.destroy();
                        (0, _jquery2.default)(window).off('.zf.ResponsiveMenu');
                    }
                }]);

                return ResponsiveMenu;
            }(Plugin);

        ResponsiveMenu.defaults = {};

        /**
         * ResponsiveToggle module.
         * @module foundation.responsiveToggle
         * @requires foundation.util.mediaQuery
         * @requires foundation.util.motion
         */

        var ResponsiveToggle =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(ResponsiveToggle, _Plugin);

                function ResponsiveToggle() {
                    _classCallCheck(this, ResponsiveToggle);

                    return _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveToggle).apply(this, arguments));
                }

                _createClass(ResponsiveToggle, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of Tab Bar.
                     * @class
                     * @name ResponsiveToggle
                     * @fires ResponsiveToggle#init
                     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = (0, _jquery2.default)(element);
                        this.options = _jquery2.default.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);
                        this.className = 'ResponsiveToggle'; // ie9 back compat

                        this._init();

                        this._events();
                    }
                    /**
                     * Initializes the tab bar by finding the target element, toggling element, and running update().
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        MediaQuery._init();

                        var targetID = this.$element.data('responsive-toggle');

                        if (!targetID) {
                            console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
                        }

                        this.$targetMenu = (0, _jquery2.default)("#".concat(targetID));
                        this.$toggler = this.$element.find('[data-toggle]').filter(function () {
                            var target = (0, _jquery2.default)(this).data('toggle');
                            return target === targetID || target === "";
                        });
                        this.options = _jquery2.default.extend({}, this.options, this.$targetMenu.data()); // If they were set, parse the animation classes

                        if (this.options.animate) {
                            var input = this.options.animate.split(' ');
                            this.animationIn = input[0];
                            this.animationOut = input[1] || null;
                        }

                        this._update();
                    }
                    /**
                     * Adds necessary event handlers for the tab bar to work.
                     * @function
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {

                        this._updateMqHandler = this._update.bind(this);
                        (0, _jquery2.default)(window).on('changed.zf.mediaquery', this._updateMqHandler);
                        this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
                    }
                    /**
                     * Checks the current media query to determine if the tab bar should be visible or hidden.
                     * @function
                     * @private
                     */

                }, {
                    key: "_update",
                    value: function _update() {
                        // Mobile
                        if (!MediaQuery.atLeast(this.options.hideFor)) {
                            this.$element.show();
                            this.$targetMenu.hide();
                        } // Desktop
                        else {
                            this.$element.hide();
                            this.$targetMenu.show();
                        }
                    }
                    /**
                     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
                     * @function
                     * @fires ResponsiveToggle#toggled
                     */

                }, {
                    key: "toggleMenu",
                    value: function toggleMenu() {
                        var _this2 = this;

                        if (!MediaQuery.atLeast(this.options.hideFor)) {
                            /**
                             * Fires when the element attached to the tab bar toggles.
                             * @event ResponsiveToggle#toggled
                             */
                            if (this.options.animate) {
                                if (this.$targetMenu.is(':hidden')) {
                                    Motion.animateIn(this.$targetMenu, this.animationIn, function () {
                                        _this2.$element.trigger('toggled.zf.responsiveToggle');

                                        _this2.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');
                                    });
                                } else {
                                    Motion.animateOut(this.$targetMenu, this.animationOut, function () {
                                        _this2.$element.trigger('toggled.zf.responsiveToggle');
                                    });
                                }
                            } else {
                                this.$targetMenu.toggle(0);
                                this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');
                                this.$element.trigger('toggled.zf.responsiveToggle');
                            }
                        }
                    }
                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.off('.zf.responsiveToggle');
                        this.$toggler.off('.zf.responsiveToggle');
                        (0, _jquery2.default)(window).off('changed.zf.mediaquery', this._updateMqHandler);
                    }
                }]);

                return ResponsiveToggle;
            }(Plugin);

        ResponsiveToggle.defaults = {
            /**
             * The breakpoint after which the menu is always shown, and the tab bar is hidden.
             * @option
             * @type {string}
             * @default 'medium'
             */
            hideFor: 'medium',

            /**
             * To decide if the toggle should be animated or not.
             * @option
             * @type {boolean}
             * @default false
             */
            animate: false
        };

        /**
         * Reveal module.
         * @module foundation.reveal
         * @requires foundation.util.keyboard
         * @requires foundation.util.triggers
         * @requires foundation.util.mediaQuery
         * @requires foundation.util.motion if using animations
         */

        var Reveal =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Reveal, _Plugin);

                function Reveal() {
                    _classCallCheck(this, Reveal);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Reveal).apply(this, arguments));
                }

                _createClass(Reveal, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of Reveal.
                     * @class
                     * @name Reveal
                     * @param {jQuery} element - jQuery object to use for the modal.
                     * @param {Object} options - optional parameters.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Reveal.defaults, this.$element.data(), options);
                        this.className = 'Reveal'; // ie9 back compat

                        this._init(); // Triggers init is idempotent, just need to make sure it is initialized


                        Triggers.init(_jquery2.default);
                        Keyboard.register('Reveal', {
                            'ESCAPE': 'close'
                        });
                    }
                    /**
                     * Initializes the modal by adding the overlay and close buttons, (if selected).
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var _this2 = this;

                        MediaQuery._init();

                        this.id = this.$element.attr('id');
                        this.isActive = false;
                        this.cached = {
                            mq: MediaQuery.current
                        };
                        this.$anchor = (0, _jquery2.default)("[data-open=\"".concat(this.id, "\"]")).length ? (0, _jquery2.default)("[data-open=\"".concat(this.id, "\"]")) : (0, _jquery2.default)("[data-toggle=\"".concat(this.id, "\"]"));
                        this.$anchor.attr({
                            'aria-controls': this.id,
                            'aria-haspopup': true,
                            'tabindex': 0
                        });

                        if (this.options.fullScreen || this.$element.hasClass('full')) {
                            this.options.fullScreen = true;
                            this.options.overlay = false;
                        }

                        if (this.options.overlay && !this.$overlay) {
                            this.$overlay = this._makeOverlay(this.id);
                        }

                        this.$element.attr({
                            'role': 'dialog',
                            'aria-hidden': true,
                            'data-yeti-box': this.id,
                            'data-resize': this.id
                        });

                        if (this.$overlay) {
                            this.$element.detach().appendTo(this.$overlay);
                        } else {
                            this.$element.detach().appendTo((0, _jquery2.default)(this.options.appendTo));
                            this.$element.addClass('without-overlay');
                        }

                        this._events();

                        if (this.options.deepLink && window.location.hash === "#".concat(this.id)) {
                            this.onLoadListener = onLoad((0, _jquery2.default)(window), function () {
                                return _this2.open();
                            });
                        }
                    }
                    /**
                     * Creates an overlay div to display behind the modal.
                     * @private
                     */

                }, {
                    key: "_makeOverlay",
                    value: function _makeOverlay() {
                        var additionalOverlayClasses = '';

                        if (this.options.additionalOverlayClasses) {
                            additionalOverlayClasses = ' ' + this.options.additionalOverlayClasses;
                        }

                        return (0, _jquery2.default)('<div></div>').addClass('reveal-overlay' + additionalOverlayClasses).appendTo(this.options.appendTo);
                    }
                    /**
                     * Updates position of modal
                     * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
                     * @private
                     */

                }, {
                    key: "_updatePosition",
                    value: function _updatePosition() {
                        var width = this.$element.outerWidth();
                        var outerWidth = (0, _jquery2.default)(window).width();
                        var height = this.$element.outerHeight();
                        var outerHeight = (0, _jquery2.default)(window).height();
                        var left,
                            top = null;

                        if (this.options.hOffset === 'auto') {
                            left = parseInt((outerWidth - width) / 2, 10);
                        } else {
                            left = parseInt(this.options.hOffset, 10);
                        }

                        if (this.options.vOffset === 'auto') {
                            if (height > outerHeight) {
                                top = parseInt(Math.min(100, outerHeight / 10), 10);
                            } else {
                                top = parseInt((outerHeight - height) / 4, 10);
                            }
                        } else if (this.options.vOffset !== null) {
                            top = parseInt(this.options.vOffset, 10);
                        }

                        if (top !== null) {
                            this.$element.css({
                                top: top + 'px'
                            });
                        } // only worry about left if we don't have an overlay or we have a horizontal offset,
                        // otherwise we're perfectly in the middle


                        if (!this.$overlay || this.options.hOffset !== 'auto') {
                            this.$element.css({
                                left: left + 'px'
                            });
                            this.$element.css({
                                margin: '0px'
                            });
                        }
                    }
                    /**
                     * Adds event handlers for the modal.
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this3 = this;

                        var _this = this;

                        this.$element.on({
                            'open.zf.trigger': this.open.bind(this),
                            'close.zf.trigger': function closeZfTrigger(event, $element) {
                                if (event.target === _this.$element[0] || (0, _jquery2.default)(event.target).parents('[data-closable]')[0] === $element) {
                                    // only close reveal when it's explicitly called
                                    return _this3.close.apply(_this3);
                                }
                            },
                            'toggle.zf.trigger': this.toggle.bind(this),
                            'resizeme.zf.trigger': function resizemeZfTrigger() {
                                _this._updatePosition();
                            }
                        });

                        if (this.options.closeOnClick && this.options.overlay) {
                            this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
                                if (e.target === _this.$element[0] || _jquery2.default.contains(_this.$element[0], e.target) || !_jquery2.default.contains(document, e.target)) {
                                    return;
                                }

                                _this.close();
                            });
                        }

                        if (this.options.deepLink) {
                            (0, _jquery2.default)(window).on("hashchange.zf.reveal:".concat(this.id), this._handleState.bind(this));
                        }
                    }
                    /**
                     * Handles modal methods on back/forward button clicks or any other event that triggers hashchange.
                     * @private
                     */

                }, {
                    key: "_handleState",
                    value: function _handleState(e) {
                        if (window.location.hash === '#' + this.id && !this.isActive) {
                            this.open();
                        } else {
                            this.close();
                        }
                    }
                    /**
                     * Disables the scroll when Reveal is shown to prevent the background from shifting
                     * @param {number} scrollTop - Scroll to visually apply, window current scroll by default
                     */

                }, {
                    key: "_disableScroll",
                    value: function _disableScroll(scrollTop) {
                        scrollTop = scrollTop || (0, _jquery2.default)(window).scrollTop();

                        if ((0, _jquery2.default)(document).height() > (0, _jquery2.default)(window).height()) {
                            (0, _jquery2.default)("html").css("top", -scrollTop);
                        }
                    }
                    /**
                     * Reenables the scroll when Reveal closes
                     * @param {number} scrollTop - Scroll to restore, html "top" property by default (as set by `_disableScroll`)
                     */

                }, {
                    key: "_enableScroll",
                    value: function _enableScroll(scrollTop) {
                        scrollTop = scrollTop || parseInt((0, _jquery2.default)("html").css("top"));

                        if ((0, _jquery2.default)(document).height() > (0, _jquery2.default)(window).height()) {
                            (0, _jquery2.default)("html").css("top", "");
                            (0, _jquery2.default)(window).scrollTop(-scrollTop);
                        }
                    }
                    /**
                     * Opens the modal controlled by `this.$anchor`, and closes all others by default.
                     * @function
                     * @fires Reveal#closeme
                     * @fires Reveal#open
                     */

                }, {
                    key: "open",
                    value: function open() {
                        var _this4 = this;

                        // either update or replace browser history
                        var hash = "#".concat(this.id);

                        if (this.options.deepLink && window.location.hash !== hash) {
                            if (window.history.pushState) {
                                if (this.options.updateHistory) {
                                    window.history.pushState({}, '', hash);
                                } else {
                                    window.history.replaceState({}, '', hash);
                                }
                            } else {
                                window.location.hash = hash;
                            }
                        } // Remember anchor that opened it to set focus back later, have general anchors as fallback


                        this.$activeAnchor = (0, _jquery2.default)(document.activeElement).is(this.$anchor) ? (0, _jquery2.default)(document.activeElement) : this.$anchor;
                        this.isActive = true; // Make elements invisible, but remove display: none so we can get size and positioning

                        this.$element.css({
                            'visibility': 'hidden'
                        }).show().scrollTop(0);

                        if (this.options.overlay) {
                            this.$overlay.css({
                                'visibility': 'hidden'
                            }).show();
                        }

                        this._updatePosition();

                        this.$element.hide().css({
                            'visibility': ''
                        });

                        if (this.$overlay) {
                            this.$overlay.css({
                                'visibility': ''
                            }).hide();

                            if (this.$element.hasClass('fast')) {
                                this.$overlay.addClass('fast');
                            } else if (this.$element.hasClass('slow')) {
                                this.$overlay.addClass('slow');
                            }
                        }

                        if (!this.options.multipleOpened) {
                            /**
                             * Fires immediately before the modal opens.
                             * Closes any other modals that are currently open
                             * @event Reveal#closeme
                             */
                            this.$element.trigger('closeme.zf.reveal', this.id);
                        }

                        this._disableScroll();

                        var _this = this; // Motion UI method of reveal


                        if (this.options.animationIn) {
                            var afterAnimation = function afterAnimation() {
                                _this.$element.attr({
                                    'aria-hidden': false,
                                    'tabindex': -1
                                }).focus();

                                _this._addGlobalClasses();

                                Keyboard.trapFocus(_this.$element);
                            };

                            if (this.options.overlay) {
                                Motion.animateIn(this.$overlay, 'fade-in');
                            }

                            Motion.animateIn(this.$element, this.options.animationIn, function () {
                                if (_this4.$element) {
                                    // protect against object having been removed
                                    _this4.focusableElements = Keyboard.findFocusable(_this4.$element);
                                    afterAnimation();
                                }
                            });
                        } // jQuery method of reveal
                        else {
                            if (this.options.overlay) {
                                this.$overlay.show(0);
                            }

                            this.$element.show(this.options.showDelay);
                        } // handle accessibility


                        this.$element.attr({
                            'aria-hidden': false,
                            'tabindex': -1
                        }).focus();
                        Keyboard.trapFocus(this.$element);

                        this._addGlobalClasses();

                        this._addGlobalListeners();
                        /**
                         * Fires when the modal has successfully opened.
                         * @event Reveal#open
                         */

                        this.$element.trigger('open.zf.reveal');
                    }
                    /**
                     * Adds classes and listeners on document required by open modals.
                     *
                     * The following classes are added and updated:
                     * - `.is-reveal-open` - Prevents the scroll on document
                     * - `.zf-has-scroll`  - Displays a disabled scrollbar on document if required like if the
                     *                       scroll was not disabled. This prevent a "shift" of the page content due
                     *                       the scrollbar disappearing when the modal opens.
                     *
                     * @private
                     */

                }, {
                    key: "_addGlobalClasses",
                    value: function _addGlobalClasses() {
                        var updateScrollbarClass = function updateScrollbarClass() {
                            (0, _jquery2.default)('html').toggleClass('zf-has-scroll', !!((0, _jquery2.default)(document).height() > (0, _jquery2.default)(window).height()));
                        };

                        this.$element.on('resizeme.zf.trigger.revealScrollbarListener', function () {
                            return updateScrollbarClass();
                        });
                        updateScrollbarClass();
                        (0, _jquery2.default)('html').addClass('is-reveal-open');
                    }
                    /**
                     * Removes classes and listeners on document that were required by open modals.
                     * @private
                     */

                }, {
                    key: "_removeGlobalClasses",
                    value: function _removeGlobalClasses() {
                        this.$element.off('resizeme.zf.trigger.revealScrollbarListener');
                        (0, _jquery2.default)('html').removeClass('is-reveal-open');
                        (0, _jquery2.default)('html').removeClass('zf-has-scroll');
                    }
                    /**
                     * Adds extra event handlers for the body and window if necessary.
                     * @private
                     */

                }, {
                    key: "_addGlobalListeners",
                    value: function _addGlobalListeners() {
                        var _this = this;

                        if (!this.$element) {
                            return;
                        } // If we're in the middle of cleanup, don't freak out


                        this.focusableElements = Keyboard.findFocusable(this.$element);

                        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
                            (0, _jquery2.default)('body').on('click.zf.reveal', function (e) {
                                if (e.target === _this.$element[0] || _jquery2.default.contains(_this.$element[0], e.target) || !_jquery2.default.contains(document, e.target)) {
                                    return;
                                }

                                _this.close();
                            });
                        }

                        if (this.options.closeOnEsc) {
                            (0, _jquery2.default)(window).on('keydown.zf.reveal', function (e) {
                                Keyboard.handleKey(e, 'Reveal', {
                                    close: function close() {
                                        if (_this.options.closeOnEsc) {
                                            _this.close();
                                        }
                                    }
                                });
                            });
                        }
                    }
                    /**
                     * Closes the modal.
                     * @function
                     * @fires Reveal#closed
                     */

                }, {
                    key: "close",
                    value: function close() {
                        if (!this.isActive || !this.$element.is(':visible')) {
                            return false;
                        }

                        var _this = this; // Motion UI method of hiding


                        if (this.options.animationOut) {
                            if (this.options.overlay) {
                                Motion.animateOut(this.$overlay, 'fade-out');
                            }

                            Motion.animateOut(this.$element, this.options.animationOut, finishUp);
                        } // jQuery method of hiding
                        else {
                            this.$element.hide(this.options.hideDelay);

                            if (this.options.overlay) {
                                this.$overlay.hide(0, finishUp);
                            } else {
                                finishUp();
                            }
                        } // Conditionals to remove extra event listeners added on open


                        if (this.options.closeOnEsc) {
                            (0, _jquery2.default)(window).off('keydown.zf.reveal');
                        }

                        if (!this.options.overlay && this.options.closeOnClick) {
                            (0, _jquery2.default)('body').off('click.zf.reveal');
                        }

                        this.$element.off('keydown.zf.reveal');

                        function finishUp() {
                            // Get the current top before the modal is closed and restore the scroll after.
                            // TODO: use component properties instead of HTML properties
                            // See https://github.com/zurb/foundation-sites/pull/10786
                            var scrollTop = parseInt((0, _jquery2.default)("html").css("top"));

                            if ((0, _jquery2.default)('.reveal:visible').length === 0) {
                                _this._removeGlobalClasses(); // also remove .is-reveal-open from the html element when there is no opened reveal
                            }

                            Keyboard.releaseFocus(_this.$element);

                            _this.$element.attr('aria-hidden', true);

                            _this._enableScroll(scrollTop);
                            /**
                             * Fires when the modal is done closing.
                             * @event Reveal#closed
                             */

                            _this.$element.trigger('closed.zf.reveal');
                        }

                        /**
                         * Resets the modal content
                         * This prevents a running video to keep going in the background
                         */

                        if (this.options.resetOnClose) {
                            this.$element.html(this.$element.html());
                        }

                        this.isActive = false; // If deepLink and we did not switched to an other modal...

                        if (_this.options.deepLink && window.location.hash === "#".concat(this.id)) {
                            // Remove the history hash
                            if (window.history.replaceState) {
                                var urlWithoutHash = window.location.pathname + window.location.search;

                                if (this.options.updateHistory) {
                                    window.history.pushState({}, '', urlWithoutHash); // remove the hash
                                } else {
                                    window.history.replaceState('', document.title, urlWithoutHash);
                                }
                            } else {
                                window.location.hash = '';
                            }
                        }

                        this.$activeAnchor.focus();
                    }
                    /**
                     * Toggles the open/closed state of a modal.
                     * @function
                     */

                }, {
                    key: "toggle",
                    value: function toggle() {
                        if (this.isActive) {
                            this.close();
                        } else {
                            this.open();
                        }
                    }
                }, {
                    key: "_destroy",

                    /**
                     * Destroys an instance of a modal.
                     * @function
                     */
                    value: function _destroy() {
                        if (this.options.overlay) {
                            this.$element.appendTo((0, _jquery2.default)(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()

                            this.$overlay.hide().off().remove();
                        }

                        this.$element.hide().off();
                        this.$anchor.off('.zf');
                        (0, _jquery2.default)(window).off(".zf.reveal:".concat(this.id));
                        if (this.onLoadListener) (0, _jquery2.default)(window).off(this.onLoadListener);

                        if ((0, _jquery2.default)('.reveal:visible').length === 0) {
                            this._removeGlobalClasses(); // also remove .is-reveal-open from the html element when there is no opened reveal
                        }
                    }
                }]);

                return Reveal;
            }(Plugin);

        Reveal.defaults = {
            /**
             * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
             * @option
             * @type {string}
             * @default ''
             */
            animationIn: '',

            /**
             * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
             * @option
             * @type {string}
             * @default ''
             */
            animationOut: '',

            /**
             * Time, in ms, to delay the opening of a modal after a click if no animation used.
             * @option
             * @type {number}
             * @default 0
             */
            showDelay: 0,

            /**
             * Time, in ms, to delay the closing of a modal after a click if no animation used.
             * @option
             * @type {number}
             * @default 0
             */
            hideDelay: 0,

            /**
             * Allows a click on the body/overlay to close the modal.
             * @option
             * @type {boolean}
             * @default true
             */
            closeOnClick: true,

            /**
             * Allows the modal to close if the user presses the `ESCAPE` key.
             * @option
             * @type {boolean}
             * @default true
             */
            closeOnEsc: true,

            /**
             * If true, allows multiple modals to be displayed at once.
             * @option
             * @type {boolean}
             * @default false
             */
            multipleOpened: false,

            /**
             * Distance, in pixels, the modal should push down from the top of the screen.
             * @option
             * @type {number|string}
             * @default auto
             */
            vOffset: 'auto',

            /**
             * Distance, in pixels, the modal should push in from the side of the screen.
             * @option
             * @type {number|string}
             * @default auto
             */
            hOffset: 'auto',

            /**
             * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
             * @option
             * @type {boolean}
             * @default false
             */
            fullScreen: false,

            /**
             * Allows the modal to generate an overlay div, which will cover the view when modal opens.
             * @option
             * @type {boolean}
             * @default true
             */
            overlay: true,

            /**
             * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
             * @option
             * @type {boolean}
             * @default false
             */
            resetOnClose: false,

            /**
             * Link the location hash to the modal.
             * Set the location hash when the modal is opened/closed, and open/close the modal when the location changes.
             * @option
             * @type {boolean}
             * @default false
             */
            deepLink: false,

            /**
             * If `deepLink` is enabled, update the browser history with the open modal
             * @option
             * @default false
             */
            updateHistory: false,

            /**
             * Allows the modal to append to custom div.
             * @option
             * @type {string}
             * @default "body"
             */
            appendTo: "body",

            /**
             * Allows adding additional class names to the reveal overlay.
             * @option
             * @type {string}
             * @default ''
             */
            additionalOverlayClasses: ''
        };

        /**
         * Slider module.
         * @module foundation.slider
         * @requires foundation.util.motion
         * @requires foundation.util.triggers
         * @requires foundation.util.keyboard
         * @requires foundation.util.touch
         */

        var Slider =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Slider, _Plugin);

                function Slider() {
                    _classCallCheck(this, Slider);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Slider).apply(this, arguments));
                }

                _createClass(Slider, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of a slider control.
                     * @class
                     * @name Slider
                     * @param {jQuery} element - jQuery object to make into a slider control.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Slider.defaults, this.$element.data(), options);
                        this.className = 'Slider'; // ie9 back compat
                        // Touch and Triggers inits are idempotent, we just need to make sure it's initialied.

                        Touch.init(_jquery2.default);
                        Triggers.init(_jquery2.default);

                        this._init();

                        Keyboard.register('Slider', {
                            'ltr': {
                                'ARROW_RIGHT': 'increase',
                                'ARROW_UP': 'increase',
                                'ARROW_DOWN': 'decrease',
                                'ARROW_LEFT': 'decrease',
                                'SHIFT_ARROW_RIGHT': 'increase_fast',
                                'SHIFT_ARROW_UP': 'increase_fast',
                                'SHIFT_ARROW_DOWN': 'decrease_fast',
                                'SHIFT_ARROW_LEFT': 'decrease_fast',
                                'HOME': 'min',
                                'END': 'max'
                            },
                            'rtl': {
                                'ARROW_LEFT': 'increase',
                                'ARROW_RIGHT': 'decrease',
                                'SHIFT_ARROW_LEFT': 'increase_fast',
                                'SHIFT_ARROW_RIGHT': 'decrease_fast'
                            }
                        });
                    }
                    /**
                     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        this.inputs = this.$element.find('input');
                        this.handles = this.$element.find('[data-slider-handle]');
                        this.$handle = this.handles.eq(0);
                        this.$input = this.inputs.length ? this.inputs.eq(0) : (0, _jquery2.default)("#".concat(this.$handle.attr('aria-controls')));
                        this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);

                        if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
                            this.options.disabled = true;
                            this.$element.addClass(this.options.disabledClass);
                        }

                        if (!this.inputs.length) {
                            this.inputs = (0, _jquery2.default)().add(this.$input);
                            this.options.binding = true;
                        }

                        this._setInitAttr(0);

                        if (this.handles[1]) {
                            this.options.doubleSided = true;
                            this.$handle2 = this.handles.eq(1);
                            this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : (0, _jquery2.default)("#".concat(this.$handle2.attr('aria-controls')));

                            if (!this.inputs[1]) {
                                this.inputs = this.inputs.add(this.$input2);
                            }

                            this._setInitAttr(1);
                        } // Set handle positions


                        this.setHandles();

                        this._events();
                    }
                }, {
                    key: "setHandles",
                    value: function setHandles() {
                        var _this2 = this;

                        if (this.handles[1]) {
                            this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {
                                _this2._setHandlePos(_this2.$handle2, _this2.inputs.eq(1).val(), true);
                            });
                        } else {
                            this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);
                        }
                    }
                }, {
                    key: "_reflow",
                    value: function _reflow() {
                        this.setHandles();
                    }
                    /**
                     * @function
                     * @private
                     * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)
                     */

                }, {
                    key: "_pctOfBar",
                    value: function _pctOfBar(value) {
                        var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);

                        switch (this.options.positionValueFunction) {
                            case "pow":
                                pctOfBar = this._logTransform(pctOfBar);
                                break;

                            case "log":
                                pctOfBar = this._powTransform(pctOfBar);
                                break;
                        }

                        return pctOfBar.toFixed(2);
                    }
                    /**
                     * @function
                     * @private
                     * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value
                     */

                }, {
                    key: "_value",
                    value: function _value(pctOfBar) {
                        switch (this.options.positionValueFunction) {
                            case "pow":
                                pctOfBar = this._powTransform(pctOfBar);
                                break;

                            case "log":
                                pctOfBar = this._logTransform(pctOfBar);
                                break;
                        }

                        var value = (this.options.end - this.options.start) * pctOfBar + parseFloat(this.options.start);
                        return value;
                    }
                    /**
                     * @function
                     * @private
                     * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function
                     */

                }, {
                    key: "_logTransform",
                    value: function _logTransform(value) {
                        return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);
                    }
                    /**
                     * @function
                     * @private
                     * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function
                     */

                }, {
                    key: "_powTransform",
                    value: function _powTransform(value) {
                        return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);
                    }
                    /**
                     * Sets the position of the selected handle and fill bar.
                     * @function
                     * @private
                     * @param {jQuery} $hndl - the selected handle to move.
                     * @param {Number} location - floating point between the start and end values of the slider bar.
                     * @param {Function} cb - callback function to fire on completion.
                     * @fires Slider#moved
                     * @fires Slider#changed
                     */

                }, {
                    key: "_setHandlePos",
                    value: function _setHandlePos($hndl, location, noInvert, cb) {
                        // don't move if the slider has been disabled since its initialization
                        if (this.$element.hasClass(this.options.disabledClass)) {
                            return;
                        } //might need to alter that slightly for bars that will have odd number selections.


                        location = parseFloat(location); //on input change events, convert string to number...grumble.
                        // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max

                        if (location < this.options.start) {
                            location = this.options.start;
                        } else if (location > this.options.end) {
                            location = this.options.end;
                        }

                        var isDbl = this.options.doubleSided; //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
                        //for click and drag events, it's weird due to the scale(-1, 1) css property

                        if (this.options.vertical && !noInvert) {
                            location = this.options.end - location;
                        }

                        if (isDbl) {
                            //this block is to prevent 2 handles from crossing eachother. Could/should be improved.
                            if (this.handles.index($hndl) === 0) {
                                var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));
                                location = location >= h2Val ? h2Val - this.options.step : location;
                            } else {
                                var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));
                                location = location <= h1Val ? h1Val + this.options.step : location;
                            }
                        }

                        var _this = this,
                            vert = this.options.vertical,
                            hOrW = vert ? 'height' : 'width',
                            lOrT = vert ? 'top' : 'left',
                            handleDim = $hndl[0].getBoundingClientRect()[hOrW],
                            elemDim = this.$element[0].getBoundingClientRect()[hOrW],

                            //percentage of bar min/max value based on click or drag point
                            pctOfBar = this._pctOfBar(location),

                            //number of actual pixels to shift the handle, based on the percentage obtained above
                            pxToMove = (elemDim - handleDim) * pctOfBar,

                            //percentage of bar to shift the handle
                            movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal); //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value


                        location = parseFloat(location.toFixed(this.options.decimal)); // declare empty object for css adjustments, only used with 2 handled-sliders

                        var css = {};

                        this._setValues($hndl, location); // TODO update to calculate based on values set to respective inputs??


                        if (isDbl) {
                            var isLeftHndl = this.handles.index($hndl) === 0,

                                //empty variable, will be used for min-height/width for fill bar
                                dim,

                                //percentage w/h of the handle compared to the slider bar
                                handlePct = ~~(percent(handleDim, elemDim) * 100); //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar

                            if (isLeftHndl) {
                                //left or top percentage value to apply to the fill bar.
                                css[lOrT] = "".concat(movement, "%"); //calculate the new min-height/width for the fill bar.

                                dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct; //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
                                //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.

                                if (cb && typeof cb === 'function') {
                                    cb();
                                } //this is only needed for the initialization of 2 handled sliders
                            } else {
                                //just caching the value of the left/bottom handle's left/top property
                                var handlePos = parseFloat(this.$handle[0].style[lOrT]); //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
                                //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself

                                dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
                            } // assign the min-height/width to our css object


                            css["min-".concat(hOrW)] = "".concat(dim, "%");
                        }

                        this.$element.one('finished.zf.animate', function () {
                            /**
                             * Fires when the handle is done moving.
                             * @event Slider#moved
                             */
                            _this.$element.trigger('moved.zf.slider', [$hndl]);
                        }); //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.

                        var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;
                        Move(moveTime, $hndl, function () {
                            // adjusting the left/top property of the handle, based on the percentage calculated above
                            // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,
                            // fall back to next best guess.
                            if (isNaN(movement)) {
                                $hndl.css(lOrT, "".concat(pctOfBar * 100, "%"));
                            } else {
                                $hndl.css(lOrT, "".concat(movement, "%"));
                            }

                            if (!_this.options.doubleSided) {
                                //if single-handled, a simple method to expand the fill bar
                                _this.$fill.css(hOrW, "".concat(pctOfBar * 100, "%"));
                            } else {
                                //otherwise, use the css object we created above
                                _this.$fill.css(css);
                            }
                        });
                        /**
                         * Fires when the value has not been change for a given time.
                         * @event Slider#changed
                         */

                        clearTimeout(_this.timeout);
                        _this.timeout = setTimeout(function () {
                            _this.$element.trigger('changed.zf.slider', [$hndl]);
                        }, _this.options.changedDelay);
                    }
                    /**
                     * Sets the initial attribute for the slider element.
                     * @function
                     * @private
                     * @param {Number} idx - index of the current handle/input to use.
                     */

                }, {
                    key: "_setInitAttr",
                    value: function _setInitAttr(idx) {
                        var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;
                        var id = this.inputs.eq(idx).attr('id') || GetYoDigits(6, 'slider');
                        this.inputs.eq(idx).attr({
                            'id': id,
                            'max': this.options.end,
                            'min': this.options.start,
                            'step': this.options.step
                        });
                        this.inputs.eq(idx).val(initVal);
                        this.handles.eq(idx).attr({
                            'role': 'slider',
                            'aria-controls': id,
                            'aria-valuemax': this.options.end,
                            'aria-valuemin': this.options.start,
                            'aria-valuenow': initVal,
                            'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',
                            'tabindex': 0
                        });
                    }
                    /**
                     * Sets the input and `aria-valuenow` values for the slider element.
                     * @function
                     * @private
                     * @param {jQuery} $handle - the currently selected handle.
                     * @param {Number} val - floating point of the new value.
                     */

                }, {
                    key: "_setValues",
                    value: function _setValues($handle, val) {
                        var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
                        this.inputs.eq(idx).val(val);
                        $handle.attr('aria-valuenow', val);
                    }
                    /**
                     * Handles events on the slider element.
                     * Calculates the new location of the current handle.
                     * If there are two handles and the bar was clicked, it determines which handle to move.
                     * @function
                     * @private
                     * @param {Object} e - the `event` object passed from the listener.
                     * @param {jQuery} $handle - the current handle to calculate for, if selected.
                     * @param {Number} val - floating point number for the new value of the slider.
                     * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
                     */

                }, {
                    key: "_handleEvent",
                    value: function _handleEvent(e, $handle, val) {
                        var value, hasVal;

                        if (!val) {
                            //click or drag events
                            e.preventDefault();

                            var _this = this,
                                vertical = this.options.vertical,
                                param = vertical ? 'height' : 'width',
                                direction = vertical ? 'top' : 'left',
                                eventOffset = vertical ? e.pageY : e.pageX,
                                halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,
                                barDim = this.$element[0].getBoundingClientRect()[param],
                                windowScroll = vertical ? (0, _jquery2.default)(window).scrollTop() : (0, _jquery2.default)(window).scrollLeft();

                            var elemOffset = this.$element.offset()[direction]; // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
                            // best way to guess this is simulated is if clientY == pageY

                            if (e.clientY === e.pageY) {
                                eventOffset = eventOffset + windowScroll;
                            }

                            var eventFromBar = eventOffset - elemOffset;
                            var barXY;

                            if (eventFromBar < 0) {
                                barXY = 0;
                            } else if (eventFromBar > barDim) {
                                barXY = barDim;
                            } else {
                                barXY = eventFromBar;
                            }

                            var offsetPct = percent(barXY, barDim);
                            value = this._value(offsetPct); // turn everything around for RTL, yay math!

                            if (rtl() && !this.options.vertical) {
                                value = this.options.end - value;
                            }

                            value = _this._adjustValue(null, value); //boolean flag for the setHandlePos fn, specifically for vertical sliders

                            hasVal = false;

                            if (!$handle) {
                                //figure out which handle it is, pass it to the next function.
                                var firstHndlPos = absPosition(this.$handle, direction, barXY, param),
                                    secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
                                $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
                            }
                        } else {
                            //change event on input
                            value = this._adjustValue(null, val);
                            hasVal = true;
                        }

                        this._setHandlePos($handle, value, hasVal);
                    }
                    /**
                     * Adjustes value for handle in regard to step value. returns adjusted value
                     * @function
                     * @private
                     * @param {jQuery} $handle - the selected handle.
                     * @param {Number} value - value to adjust. used if $handle is falsy
                     */

                }, {
                    key: "_adjustValue",
                    value: function _adjustValue($handle, value) {
                        var val,
                            step = this.options.step,
                            div = parseFloat(step / 2),
                            left,
                            prev_val,
                            next_val;

                        if (!!$handle) {
                            val = parseFloat($handle.attr('aria-valuenow'));
                        } else {
                            val = value;
                        }

                        if (val >= 0) {
                            left = val % step;
                        } else {
                            left = step + val % step;
                        }

                        prev_val = val - left;
                        next_val = prev_val + step;

                        if (left === 0) {
                            return val;
                        }

                        val = val >= prev_val + div ? next_val : prev_val;
                        return val;
                    }
                    /**
                     * Adds event listeners to the slider elements.
                     * @function
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        this._eventsForHandle(this.$handle);

                        if (this.handles[1]) {
                            this._eventsForHandle(this.$handle2);
                        }
                    }
                    /**
                     * Adds event listeners a particular handle
                     * @function
                     * @private
                     * @param {jQuery} $handle - the current handle to apply listeners to.
                     */

                }, {
                    key: "_eventsForHandle",
                    value: function _eventsForHandle($handle) {
                        var _this = this,
                            curHandle;

                        var handleChangeEvent = function handleChangeEvent(e) {
                            var idx = _this.inputs.index((0, _jquery2.default)(this));

                            _this._handleEvent(e, _this.handles.eq(idx), (0, _jquery2.default)(this).val());
                        }; // IE only triggers the change event when the input loses focus which strictly follows the HTML specification
                        // listen for the enter key and trigger a change
                        // @see https://html.spec.whatwg.org/multipage/input.html#common-input-element-events


                        this.inputs.off('keyup.zf.slider').on('keyup.zf.slider', function (e) {
                            if (e.keyCode == 13) handleChangeEvent.call(this, e);
                        });
                        this.inputs.off('change.zf.slider').on('change.zf.slider', handleChangeEvent);

                        if (this.options.clickSelect) {
                            this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {
                                if (_this.$element.data('dragging')) {
                                    return false;
                                }

                                if (!(0, _jquery2.default)(e.target).is('[data-slider-handle]')) {
                                    if (_this.options.doubleSided) {
                                        _this._handleEvent(e);
                                    } else {
                                        _this._handleEvent(e, _this.$handle);
                                    }
                                }
                            });
                        }

                        if (this.options.draggable) {
                            this.handles.addTouch();
                            var $body = (0, _jquery2.default)('body');
                            $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {
                                $handle.addClass('is-dragging');

                                _this.$fill.addClass('is-dragging'); //


                                _this.$element.data('dragging', true);

                                curHandle = (0, _jquery2.default)(e.currentTarget);
                                $body.on('mousemove.zf.slider', function (e) {
                                    e.preventDefault();

                                    _this._handleEvent(e, curHandle);
                                }).on('mouseup.zf.slider', function (e) {
                                    _this._handleEvent(e, curHandle);

                                    $handle.removeClass('is-dragging');

                                    _this.$fill.removeClass('is-dragging');

                                    _this.$element.data('dragging', false);

                                    $body.off('mousemove.zf.slider mouseup.zf.slider');
                                });
                            }) // prevent events triggered by touch
                                .on('selectstart.zf.slider touchmove.zf.slider', function (e) {
                                    e.preventDefault();
                                });
                        }

                        $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {
                            var _$handle = (0, _jquery2.default)(this),
                                idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,
                                oldValue = parseFloat(_this.inputs.eq(idx).val()),
                                newValue; // handle keyboard event with keyboard util


                            Keyboard.handleKey(e, 'Slider', {
                                decrease: function decrease() {
                                    newValue = oldValue - _this.options.step;
                                },
                                increase: function increase() {
                                    newValue = oldValue + _this.options.step;
                                },
                                decrease_fast: function decrease_fast() {
                                    newValue = oldValue - _this.options.step * 10;
                                },
                                increase_fast: function increase_fast() {
                                    newValue = oldValue + _this.options.step * 10;
                                },
                                min: function min() {
                                    newValue = _this.options.start;
                                },
                                max: function max() {
                                    newValue = _this.options.end;
                                },
                                handled: function handled() {
                                    // only set handle pos when event was handled specially
                                    e.preventDefault();

                                    _this._setHandlePos(_$handle, newValue, true);
                                }
                            });
                            /*if (newValue) { // if pressed key has special function, update value
          e.preventDefault();
          _this._setHandlePos(_$handle, newValue);
        }*/
                        });
                    }
                    /**
                     * Destroys the slider plugin.
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.handles.off('.zf.slider');
                        this.inputs.off('.zf.slider');
                        this.$element.off('.zf.slider');
                        clearTimeout(this.timeout);
                    }
                }]);

                return Slider;
            }(Plugin);

        Slider.defaults = {
            /**
             * Minimum value for the slider scale.
             * @option
             * @type {number}
             * @default 0
             */
            start: 0,

            /**
             * Maximum value for the slider scale.
             * @option
             * @type {number}
             * @default 100
             */
            end: 100,

            /**
             * Minimum value change per change event.
             * @option
             * @type {number}
             * @default 1
             */
            step: 1,

            /**
             * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
             * @option
             * @type {number}
             * @default 0
             */
            initialStart: 0,

            /**
             * Value at which the right handle/second input should be set to on initialization.
             * @option
             * @type {number}
             * @default 100
             */
            initialEnd: 100,

            /**
             * Allows the input to be located outside the container and visible. Set to by the JS
             * @option
             * @type {boolean}
             * @default false
             */
            binding: false,

            /**
             * Allows the user to click/tap on the slider bar to select a value.
             * @option
             * @type {boolean}
             * @default true
             */
            clickSelect: true,

            /**
             * Set to true and use the `vertical` class to change alignment to vertical.
             * @option
             * @type {boolean}
             * @default false
             */
            vertical: false,

            /**
             * Allows the user to drag the slider handle(s) to select a value.
             * @option
             * @type {boolean}
             * @default true
             */
            draggable: true,

            /**
             * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
             * @option
             * @type {boolean}
             * @default false
             */
            disabled: false,

            /**
             * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
             * @option
             * @type {boolean}
             * @default false
             */
            doubleSided: false,

            /**
             * Potential future feature.
             */
            // steps: 100,

            /**
             * Number of decimal places the plugin should go to for floating point precision.
             * @option
             * @type {number}
             * @default 2
             */
            decimal: 2,

            /**
             * Time delay for dragged elements.
             */
            // dragDelay: 0,

            /**
             * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
             * @option
             * @type {number}
             * @default 200
             */
            moveTime: 200,
            //update this if changing the transition time in the sass

            /**
             * Class applied to disabled sliders.
             * @option
             * @type {string}
             * @default 'disabled'
             */
            disabledClass: 'disabled',

            /**
             * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
             * @option
             * @type {boolean}
             * @default false
             */
            invertVertical: false,

            /**
             * Milliseconds before the `changed.zf-slider` event is triggered after value change.
             * @option
             * @type {number}
             * @default 500
             */
            changedDelay: 500,

            /**
             * Basevalue for non-linear sliders
             * @option
             * @type {number}
             * @default 5
             */
            nonLinearBase: 5,

            /**
             * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.
             * @option
             * @type {string}
             * @default 'linear'
             */
            positionValueFunction: 'linear'
        };

        function percent(frac, num) {
            return frac / num;
        }

        function absPosition($handle, dir, clickPos, param) {
            return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
        }

        function baseLog(base, value) {
            return Math.log(value) / Math.log(base);
        }

        /**
         * Sticky module.
         * @module foundation.sticky
         * @requires foundation.util.triggers
         * @requires foundation.util.mediaQuery
         */

        var Sticky =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Sticky, _Plugin);

                function Sticky() {
                    _classCallCheck(this, Sticky);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Sticky).apply(this, arguments));
                }

                _createClass(Sticky, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of a sticky thing.
                     * @class
                     * @name Sticky
                     * @param {jQuery} element - jQuery object to make sticky.
                     * @param {Object} options - options object passed when creating the element programmatically.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Sticky.defaults, this.$element.data(), options);
                        this.className = 'Sticky'; // ie9 back compat
                        // Triggers init is idempotent, just need to make sure it is initialized

                        Triggers.init(_jquery2.default);

                        this._init();
                    }
                    /**
                     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        MediaQuery._init();

                        var $parent = this.$element.parent('[data-sticky-container]'),
                            id = this.$element[0].id || GetYoDigits(6, 'sticky'),
                            _this = this;

                        if ($parent.length) {
                            this.$container = $parent;
                        } else {
                            this.wasWrapped = true;
                            this.$element.wrap(this.options.container);
                            this.$container = this.$element.parent();
                        }

                        this.$container.addClass(this.options.containerClass);
                        this.$element.addClass(this.options.stickyClass).attr({
                            'data-resize': id,
                            'data-mutate': id
                        });

                        if (this.options.anchor !== '') {
                            (0, _jquery2.default)('#' + _this.options.anchor).attr({
                                'data-mutate': id
                            });
                        }

                        this.scrollCount = this.options.checkEvery;
                        this.isStuck = false;
                        this.onLoadListener = onLoad((0, _jquery2.default)(window), function () {
                            //We calculate the container height to have correct values for anchor points offset calculation.
                            _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;

                            _this.$container.css('height', _this.containerHeight);

                            _this.elemHeight = _this.containerHeight;

                            if (_this.options.anchor !== '') {
                                _this.$anchor = (0, _jquery2.default)('#' + _this.options.anchor);
                            } else {
                                _this._parsePoints();
                            }

                            _this._setSizes(function () {
                                var scroll = window.pageYOffset;

                                _this._calc(false, scroll); //Unstick the element will ensure that proper classes are set.


                                if (!_this.isStuck) {
                                    _this._removeSticky(scroll >= _this.topPoint ? false : true);
                                }
                            });

                            _this._events(id.split('-').reverse().join('-'));
                        });
                    }
                    /**
                     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
                     * @function
                     * @private
                     */

                }, {
                    key: "_parsePoints",
                    value: function _parsePoints() {
                        var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
                            btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
                            pts = [top, btm],
                            breaks = {};

                        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
                            var pt;

                            if (typeof pts[i] === 'number') {
                                pt = pts[i];
                            } else {
                                var place = pts[i].split(':'),
                                    anchor = (0, _jquery2.default)("#".concat(place[0]));
                                pt = anchor.offset().top;

                                if (place[1] && place[1].toLowerCase() === 'bottom') {
                                    pt += anchor[0].getBoundingClientRect().height;
                                }
                            }

                            breaks[i] = pt;
                        }

                        this.points = breaks;
                        return;
                    }
                    /**
                     * Adds event handlers for the scrolling element.
                     * @private
                     * @param {String} id - pseudo-random id for unique scroll event listener.
                     */

                }, {
                    key: "_events",
                    value: function _events(id) {
                        var _this = this,
                            scrollListener = this.scrollListener = "scroll.zf.".concat(id);

                        if (this.isOn) {
                            return;
                        }

                        if (this.canStick) {
                            this.isOn = true;
                            (0, _jquery2.default)(window).off(scrollListener).on(scrollListener, function (e) {
                                if (_this.scrollCount === 0) {
                                    _this.scrollCount = _this.options.checkEvery;

                                    _this._setSizes(function () {
                                        _this._calc(false, window.pageYOffset);
                                    });
                                } else {
                                    _this.scrollCount--;

                                    _this._calc(false, window.pageYOffset);
                                }
                            });
                        }

                        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
                            _this._eventsHandler(id);
                        });
                        this.$element.on('mutateme.zf.trigger', function (e, el) {
                            _this._eventsHandler(id);
                        });

                        if (this.$anchor) {
                            this.$anchor.on('mutateme.zf.trigger', function (e, el) {
                                _this._eventsHandler(id);
                            });
                        }
                    }
                    /**
                     * Handler for events.
                     * @private
                     * @param {String} id - pseudo-random id for unique scroll event listener.
                     */

                }, {
                    key: "_eventsHandler",
                    value: function _eventsHandler(id) {
                        var _this = this,
                            scrollListener = this.scrollListener = "scroll.zf.".concat(id);

                        _this._setSizes(function () {
                            _this._calc(false);

                            if (_this.canStick) {
                                if (!_this.isOn) {
                                    _this._events(id);
                                }
                            } else if (_this.isOn) {
                                _this._pauseListeners(scrollListener);
                            }
                        });
                    }
                    /**
                     * Removes event handlers for scroll and change events on anchor.
                     * @fires Sticky#pause
                     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
                     */

                }, {
                    key: "_pauseListeners",
                    value: function _pauseListeners(scrollListener) {
                        this.isOn = false;
                        (0, _jquery2.default)(window).off(scrollListener);
                        /**
                         * Fires when the plugin is paused due to resize event shrinking the view.
                         * @event Sticky#pause
                         * @private
                         */

                        this.$element.trigger('pause.zf.sticky');
                    }
                    /**
                     * Called on every `scroll` event and on `_init`
                     * fires functions based on booleans and cached values
                     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
                     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
                     */

                }, {
                    key: "_calc",
                    value: function _calc(checkSizes, scroll) {
                        if (checkSizes) {
                            this._setSizes();
                        }

                        if (!this.canStick) {
                            if (this.isStuck) {
                                this._removeSticky(true);
                            }

                            return false;
                        }

                        if (!scroll) {
                            scroll = window.pageYOffset;
                        }

                        if (scroll >= this.topPoint) {
                            if (scroll <= this.bottomPoint) {
                                if (!this.isStuck) {
                                    this._setSticky();
                                }
                            } else {
                                if (this.isStuck) {
                                    this._removeSticky(false);
                                }
                            }
                        } else {
                            if (this.isStuck) {
                                this._removeSticky(true);
                            }
                        }
                    }
                    /**
                     * Causes the $element to become stuck.
                     * Adds `position: fixed;`, and helper classes.
                     * @fires Sticky#stuckto
                     * @function
                     * @private
                     */

                }, {
                    key: "_setSticky",
                    value: function _setSticky() {
                        var _this = this,
                            stickTo = this.options.stickTo,
                            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
                            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
                            css = {};

                        css[mrgn] = "".concat(this.options[mrgn], "em");
                        css[stickTo] = 0;
                        css[notStuckTo] = 'auto';
                        this.isStuck = true;
                        this.$element.removeClass("is-anchored is-at-".concat(notStuckTo)).addClass("is-stuck is-at-".concat(stickTo)).css(css)
                            /**
                             * Fires when the $element has become `position: fixed;`
                             * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
                             * @event Sticky#stuckto
                             */
                            .trigger("sticky.zf.stuckto:".concat(stickTo));
                        this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
                            _this._setSizes();
                        });
                    }
                    /**
                     * Causes the $element to become unstuck.
                     * Removes `position: fixed;`, and helper classes.
                     * Adds other helper classes.
                     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
                     * @fires Sticky#unstuckfrom
                     * @private
                     */

                }, {
                    key: "_removeSticky",
                    value: function _removeSticky(isTop) {
                        var stickTo = this.options.stickTo,
                            stickToTop = stickTo === 'top',
                            css = {},
                            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
                            mrgn = stickToTop ? 'marginTop' : 'marginBottom',
                            topOrBottom = isTop ? 'top' : 'bottom';
                        css[mrgn] = 0;
                        css['bottom'] = 'auto';

                        if (isTop) {
                            css['top'] = 0;
                        } else {
                            css['top'] = anchorPt;
                        }

                        this.isStuck = false;
                        this.$element.removeClass("is-stuck is-at-".concat(stickTo)).addClass("is-anchored is-at-".concat(topOrBottom)).css(css)
                            /**
                             * Fires when the $element has become anchored.
                             * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
                             * @event Sticky#unstuckfrom
                             */
                            .trigger("sticky.zf.unstuckfrom:".concat(topOrBottom));
                    }
                    /**
                     * Sets the $element and $container sizes for plugin.
                     * Calls `_setBreakPoints`.
                     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
                     * @private
                     */

                }, {
                    key: "_setSizes",
                    value: function _setSizes(cb) {
                        this.canStick = MediaQuery.is(this.options.stickyOn);

                        if (!this.canStick) {
                            if (cb && typeof cb === 'function') {
                                cb();
                            }
                        }

                        var newElemWidth = this.$container[0].getBoundingClientRect().width,
                            comp = window.getComputedStyle(this.$container[0]),
                            pdngl = parseInt(comp['padding-left'], 10),
                            pdngr = parseInt(comp['padding-right'], 10);

                        if (this.$anchor && this.$anchor.length) {
                            this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
                        } else {
                            this._parsePoints();
                        }

                        this.$element.css({
                            'max-width': "".concat(newElemWidth - pdngl - pdngr, "px")
                        });
                        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;

                        if (this.$element.css("display") == "none") {
                            newContainerHeight = 0;
                        }

                        this.containerHeight = newContainerHeight;
                        this.$container.css({
                            height: newContainerHeight
                        });
                        this.elemHeight = newContainerHeight;

                        if (!this.isStuck) {
                            if (this.$element.hasClass('is-at-bottom')) {
                                var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
                                this.$element.css('top', anchorPt);
                            }
                        }

                        this._setBreakPoints(newContainerHeight, function () {
                            if (cb && typeof cb === 'function') {
                                cb();
                            }
                        });
                    }
                    /**
                     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
                     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
                     * @param {Function} cb - optional callback function to be called on completion.
                     * @private
                     */

                }, {
                    key: "_setBreakPoints",
                    value: function _setBreakPoints(elemHeight, cb) {
                        if (!this.canStick) {
                            if (cb && typeof cb === 'function') {
                                cb();
                            } else {
                                return false;
                            }
                        }

                        var mTop = emCalc(this.options.marginTop),
                            mBtm = emCalc(this.options.marginBottom),
                            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
                            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

                            // topPoint = this.$anchor.offset().top || this.points[0],
                            // bottomPoint = topPoint + this.anchorHeight || this.points[1],
                            winHeight = window.innerHeight;

                        if (this.options.stickTo === 'top') {
                            topPoint -= mTop;
                            bottomPoint -= elemHeight + mTop;
                        } else if (this.options.stickTo === 'bottom') {
                            topPoint -= winHeight - (elemHeight + mBtm);
                            bottomPoint -= winHeight - mBtm;
                        }

                        this.topPoint = topPoint;
                        this.bottomPoint = bottomPoint;

                        if (cb && typeof cb === 'function') {
                            cb();
                        }
                    }
                    /**
                     * Destroys the current sticky element.
                     * Resets the element to the top position first.
                     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this._removeSticky(true);

                        this.$element.removeClass("".concat(this.options.stickyClass, " is-anchored is-at-top")).css({
                            height: '',
                            top: '',
                            bottom: '',
                            'max-width': ''
                        }).off('resizeme.zf.trigger').off('mutateme.zf.trigger');

                        if (this.$anchor && this.$anchor.length) {
                            this.$anchor.off('change.zf.sticky');
                        }

                        if (this.scrollListener) (0, _jquery2.default)(window).off(this.scrollListener);
                        if (this.onLoadListener) (0, _jquery2.default)(window).off(this.onLoadListener);

                        if (this.wasWrapped) {
                            this.$element.unwrap();
                        } else {
                            this.$container.removeClass(this.options.containerClass).css({
                                height: ''
                            });
                        }
                    }
                }]);

                return Sticky;
            }(Plugin);

        Sticky.defaults = {
            /**
             * Customizable container template. Add your own classes for styling and sizing.
             * @option
             * @type {string}
             * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'
             */
            container: '<div data-sticky-container></div>',

            /**
             * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.
             * @option
             * @type {string}
             * @default 'top'
             */
            stickTo: 'top',

            /**
             * If anchored to a single element, the id of that element.
             * @option
             * @type {string}
             * @default ''
             */
            anchor: '',

            /**
             * If using more than one element as anchor points, the id of the top anchor.
             * @option
             * @type {string}
             * @default ''
             */
            topAnchor: '',

            /**
             * If using more than one element as anchor points, the id of the bottom anchor.
             * @option
             * @type {string}
             * @default ''
             */
            btmAnchor: '',

            /**
             * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
             * @option
             * @type {number}
             * @default 1
             */
            marginTop: 1,

            /**
             * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
             * @option
             * @type {number}
             * @default 1
             */
            marginBottom: 1,

            /**
             * Breakpoint string that is the minimum screen size an element should become sticky.
             * @option
             * @type {string}
             * @default 'medium'
             */
            stickyOn: 'medium',

            /**
             * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
             * @option
             * @type {string}
             * @default 'sticky'
             */
            stickyClass: 'sticky',

            /**
             * Class applied to sticky container. Foundation defaults to `sticky-container`.
             * @option
             * @type {string}
             * @default 'sticky-container'
             */
            containerClass: 'sticky-container',

            /**
             * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
             * @option
             * @type {number}
             * @default -1
             */
            checkEvery: -1
        };

        /**
         * Helper function to calculate em values
         * @param Number {em} - number of em's to calculate into pixels
         */

        function emCalc(em) {
            return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
        }

        /**
         * Tabs module.
         * @module foundation.tabs
         * @requires foundation.util.keyboard
         * @requires foundation.util.imageLoader if tabs contain images
         */

        var Tabs =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Tabs, _Plugin);

                function Tabs() {
                    _classCallCheck(this, Tabs);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Tabs).apply(this, arguments));
                }

                _createClass(Tabs, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of tabs.
                     * @class
                     * @name Tabs
                     * @fires Tabs#init
                     * @param {jQuery} element - jQuery object to make into tabs.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Tabs.defaults, this.$element.data(), options);
                        this.className = 'Tabs'; // ie9 back compat

                        this._init();

                        Keyboard.register('Tabs', {
                            'ENTER': 'open',
                            'SPACE': 'open',
                            'ARROW_RIGHT': 'next',
                            'ARROW_UP': 'previous',
                            'ARROW_DOWN': 'next',
                            'ARROW_LEFT': 'previous' // 'TAB': 'next',
                            // 'SHIFT_TAB': 'previous'

                        });
                    }
                    /**
                     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var _this2 = this;

                        var _this = this;

                        this._isInitializing = true;
                        this.$element.attr({
                            'role': 'tablist'
                        });
                        this.$tabTitles = this.$element.find(".".concat(this.options.linkClass));
                        this.$tabContent = (0, _jquery2.default)("[data-tabs-content=\"".concat(this.$element[0].id, "\"]"));
                        this.$tabTitles.each(function () {
                            var $elem = (0, _jquery2.default)(this),
                                $link = $elem.find('a'),
                                isActive = $elem.hasClass("".concat(_this.options.linkActiveClass)),
                                hash = $link.attr('data-tabs-target') || $link[0].hash.slice(1),
                                linkId = $link[0].id ? $link[0].id : "".concat(hash, "-label"),
                                $tabContent = (0, _jquery2.default)("#".concat(hash));
                            $elem.attr({
                                'role': 'presentation'
                            });
                            $link.attr({
                                'role': 'tab',
                                'aria-controls': hash,
                                'aria-selected': isActive,
                                'id': linkId,
                                'tabindex': isActive ? '0' : '-1'
                            });
                            $tabContent.attr({
                                'role': 'tabpanel',
                                'aria-labelledby': linkId
                            }); // Save up the initial hash to return to it later when going back in history

                            if (isActive) {
                                _this._initialAnchor = "#".concat(hash);
                            }

                            if (!isActive) {
                                $tabContent.attr('aria-hidden', 'true');
                            }

                            if (isActive && _this.options.autoFocus) {
                                _this.onLoadListener = onLoad((0, _jquery2.default)(window), function () {
                                    (0, _jquery2.default)('html, body').animate({
                                        scrollTop: $elem.offset().top
                                    }, _this.options.deepLinkSmudgeDelay, function () {
                                        $link.focus();
                                    });
                                });
                            }
                        });

                        if (this.options.matchHeight) {
                            var $images = this.$tabContent.find('img');

                            if ($images.length) {
                                onImagesLoaded($images, this._setHeight.bind(this));
                            } else {
                                this._setHeight();
                            }
                        } // Current context-bound function to open tabs on page load or history hashchange


                        this._checkDeepLink = function () {
                            var anchor = window.location.hash;

                            if (!anchor.length) {
                                // If we are still initializing and there is no anchor, then there is nothing to do
                                if (_this2._isInitializing) return; // Otherwise, move to the initial anchor

                                if (_this2._initialAnchor) anchor = _this2._initialAnchor;
                            }

                            var $anchor = anchor && (0, _jquery2.default)(anchor);

                            var $link = anchor && _this2.$element.find('[href$="' + anchor + '"]'); // Whether the anchor element that has been found is part of this element


                            var isOwnAnchor = !!($anchor.length && $link.length); // If there is an anchor for the hash, select it

                            if ($anchor && $anchor.length && $link && $link.length) {
                                _this2.selectTab($anchor, true);
                            } // Otherwise, collapse everything
                            else {
                                _this2._collapse();
                            }

                            if (isOwnAnchor) {
                                // Roll up a little to show the titles
                                if (_this2.options.deepLinkSmudge) {
                                    var offset = _this2.$element.offset();

                                    (0, _jquery2.default)('html, body').animate({
                                        scrollTop: offset.top
                                    }, _this2.options.deepLinkSmudgeDelay);
                                }
                                /**
                                 * Fires when the plugin has deeplinked at pageload
                                 * @event Tabs#deeplink
                                 */

                                _this2.$element.trigger('deeplink.zf.tabs', [$link, $anchor]);
                            }
                        }; //use browser to open a tab, if it exists in this tabset


                        if (this.options.deepLink) {
                            this._checkDeepLink();
                        }

                        this._events();

                        this._isInitializing = false;
                    }
                    /**
                     * Adds event handlers for items within the tabs.
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        this._addKeyHandler();

                        this._addClickHandler();

                        this._setHeightMqHandler = null;

                        if (this.options.matchHeight) {
                            this._setHeightMqHandler = this._setHeight.bind(this);
                            (0, _jquery2.default)(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
                        }

                        if (this.options.deepLink) {
                            (0, _jquery2.default)(window).on('hashchange', this._checkDeepLink);
                        }
                    }
                    /**
                     * Adds click handlers for items within the tabs.
                     * @private
                     */

                }, {
                    key: "_addClickHandler",
                    value: function _addClickHandler() {
                        var _this = this;

                        this.$element.off('click.zf.tabs').on('click.zf.tabs', ".".concat(this.options.linkClass), function (e) {
                            e.preventDefault();
                            e.stopPropagation();

                            _this._handleTabChange((0, _jquery2.default)(this));
                        });
                    }
                    /**
                     * Adds keyboard event handlers for items within the tabs.
                     * @private
                     */

                }, {
                    key: "_addKeyHandler",
                    value: function _addKeyHandler() {
                        var _this = this;

                        this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
                            if (e.which === 9) return;
                            var $element = (0, _jquery2.default)(this),
                                $elements = $element.parent('ul').children('li'),
                                $prevElement,
                                $nextElement;
                            $elements.each(function (i) {
                                if ((0, _jquery2.default)(this).is($element)) {
                                    if (_this.options.wrapOnKeys) {
                                        $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
                                        $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
                                    } else {
                                        $prevElement = $elements.eq(Math.max(0, i - 1));
                                        $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
                                    }

                                    return;
                                }
                            }); // handle keyboard event with keyboard util

                            Keyboard.handleKey(e, 'Tabs', {
                                open: function open() {
                                    $element.find('[role="tab"]').focus();

                                    _this._handleTabChange($element);
                                },
                                previous: function previous() {
                                    $prevElement.find('[role="tab"]').focus();

                                    _this._handleTabChange($prevElement);
                                },
                                next: function next() {
                                    $nextElement.find('[role="tab"]').focus();

                                    _this._handleTabChange($nextElement);
                                },
                                handled: function handled() {
                                    e.stopPropagation();
                                    e.preventDefault();
                                }
                            });
                        });
                    }
                    /**
                     * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.
                     * @param {jQuery} $target - Tab to open.
                     * @param {boolean} historyHandled - browser has already handled a history update
                     * @fires Tabs#change
                     * @function
                     */

                }, {
                    key: "_handleTabChange",
                    value: function _handleTabChange($target, historyHandled) {
                        // With `activeCollapse`, if the target is the active Tab, collapse it.
                        if ($target.hasClass("".concat(this.options.linkActiveClass))) {
                            if (this.options.activeCollapse) {
                                this._collapse();
                            }

                            return;
                        }

                        var $oldTab = this.$element.find(".".concat(this.options.linkClass, ".").concat(this.options.linkActiveClass)),
                            $tabLink = $target.find('[role="tab"]'),
                            target = $tabLink.attr('data-tabs-target'),
                            anchor = target && target.length ? "#".concat(target) : $tabLink[0].hash,
                            $targetContent = this.$tabContent.find(anchor); //close old tab

                        this._collapseTab($oldTab); //open new tab


                        this._openTab($target); //either replace or update browser history


                        if (this.options.deepLink && !historyHandled) {
                            if (this.options.updateHistory) {
                                history.pushState({}, '', anchor);
                            } else {
                                history.replaceState({}, '', anchor);
                            }
                        }
                        /**
                         * Fires when the plugin has successfully changed tabs.
                         * @event Tabs#change
                         */

                        this.$element.trigger('change.zf.tabs', [$target, $targetContent]); //fire to children a mutation event

                        $targetContent.find("[data-mutate]").trigger("mutateme.zf.trigger");
                    }
                    /**
                     * Opens the tab `$targetContent` defined by `$target`.
                     * @param {jQuery} $target - Tab to open.
                     * @function
                     */

                }, {
                    key: "_openTab",
                    value: function _openTab($target) {
                        var $tabLink = $target.find('[role="tab"]'),
                            hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),
                            $targetContent = this.$tabContent.find("#".concat(hash));
                        $target.addClass("".concat(this.options.linkActiveClass));
                        $tabLink.attr({
                            'aria-selected': 'true',
                            'tabindex': '0'
                        });
                        $targetContent.addClass("".concat(this.options.panelActiveClass)).removeAttr('aria-hidden');
                    }
                    /**
                     * Collapses `$targetContent` defined by `$target`.
                     * @param {jQuery} $target - Tab to collapse.
                     * @function
                     */

                }, {
                    key: "_collapseTab",
                    value: function _collapseTab($target) {
                        var $target_anchor = $target.removeClass("".concat(this.options.linkActiveClass)).find('[role="tab"]').attr({
                            'aria-selected': 'false',
                            'tabindex': -1
                        });
                        (0, _jquery2.default)("#".concat($target_anchor.attr('aria-controls'))).removeClass("".concat(this.options.panelActiveClass)).attr({
                            'aria-hidden': 'true'
                        });
                    }
                    /**
                     * Collapses the active Tab.
                     * @fires Tabs#collapse
                     * @function
                     */

                }, {
                    key: "_collapse",
                    value: function _collapse() {
                        var $activeTab = this.$element.find(".".concat(this.options.linkClass, ".").concat(this.options.linkActiveClass));

                        if ($activeTab.length) {
                            this._collapseTab($activeTab);
                            /**
                             * Fires when the plugin has successfully collapsed tabs.
                             * @event Tabs#collapse
                             */

                            this.$element.trigger('collapse.zf.tabs', [$activeTab]);
                        }
                    }
                    /**
                     * Public method for selecting a content pane to display.
                     * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
                     * @param {boolean} historyHandled - browser has already handled a history update
                     * @function
                     */

                }, {
                    key: "selectTab",
                    value: function selectTab(elem, historyHandled) {
                        var idStr;

                        if (_typeof(elem) === 'object') {
                            idStr = elem[0].id;
                        } else {
                            idStr = elem;
                        }

                        if (idStr.indexOf('#') < 0) {
                            idStr = "#".concat(idStr);
                        }

                        var $target = this.$tabTitles.has("[href$=\"".concat(idStr, "\"]"));

                        this._handleTabChange($target, historyHandled);
                    }
                }, {
                    key: "_setHeight",

                    /**
                     * Sets the height of each panel to the height of the tallest panel.
                     * If enabled in options, gets called on media query change.
                     * If loading content via external source, can be called directly or with _reflow.
                     * If enabled with `data-match-height="true"`, tabs sets to equal height
                     * @function
                     * @private
                     */
                    value: function _setHeight() {
                        var max = 0,
                            _this = this; // Lock down the `this` value for the root tabs object


                        this.$tabContent.find(".".concat(this.options.panelClass)).css('height', '').each(function () {
                            var panel = (0, _jquery2.default)(this),
                                isActive = panel.hasClass("".concat(_this.options.panelActiveClass)); // get the options from the parent instead of trying to get them from the child

                            if (!isActive) {
                                panel.css({
                                    'visibility': 'hidden',
                                    'display': 'block'
                                });
                            }

                            var temp = this.getBoundingClientRect().height;

                            if (!isActive) {
                                panel.css({
                                    'visibility': '',
                                    'display': ''
                                });
                            }

                            max = temp > max ? temp : max;
                        }).css('height', "".concat(max, "px"));
                    }
                    /**
                     * Destroys an instance of tabs.
                     * @fires Tabs#destroyed
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.find(".".concat(this.options.linkClass)).off('.zf.tabs').hide().end().find(".".concat(this.options.panelClass)).hide();

                        if (this.options.matchHeight) {
                            if (this._setHeightMqHandler != null) {
                                (0, _jquery2.default)(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
                            }
                        }

                        if (this.options.deepLink) {
                            (0, _jquery2.default)(window).off('hashchange', this._checkDeepLink);
                        }

                        if (this.onLoadListener) {
                            (0, _jquery2.default)(window).off(this.onLoadListener);
                        }
                    }
                }]);

                return Tabs;
            }(Plugin);

        Tabs.defaults = {
            /**
             * Link the location hash to the active pane.
             * Set the location hash when the active pane changes, and open the corresponding pane when the location changes.
             * @option
             * @type {boolean}
             * @default false
             */
            deepLink: false,

            /**
             * If `deepLink` is enabled, adjust the deep link scroll to make sure the top of the tab panel is visible
             * @option
             * @type {boolean}
             * @default false
             */
            deepLinkSmudge: false,

            /**
             * If `deepLinkSmudge` is enabled, animation time (ms) for the deep link adjustment
             * @option
             * @type {number}
             * @default 300
             */
            deepLinkSmudgeDelay: 300,

            /**
             * If `deepLink` is enabled, update the browser history with the open tab
             * @option
             * @type {boolean}
             * @default false
             */
            updateHistory: false,

            /**
             * Allows the window to scroll to content of active pane on load.
             * Not recommended if more than one tab panel per page.
             * @option
             * @type {boolean}
             * @default false
             */
            autoFocus: false,

            /**
             * Allows keyboard input to 'wrap' around the tab links.
             * @option
             * @type {boolean}
             * @default true
             */
            wrapOnKeys: true,

            /**
             * Allows the tab content panes to match heights if set to true.
             * @option
             * @type {boolean}
             * @default false
             */
            matchHeight: false,

            /**
             * Allows active tabs to collapse when clicked.
             * @option
             * @type {boolean}
             * @default false
             */
            activeCollapse: false,

            /**
             * Class applied to `li`'s in tab link list.
             * @option
             * @type {string}
             * @default 'tabs-title'
             */
            linkClass: 'tabs-title',

            /**
             * Class applied to the active `li` in tab link list.
             * @option
             * @type {string}
             * @default 'is-active'
             */
            linkActiveClass: 'is-active',

            /**
             * Class applied to the content containers.
             * @option
             * @type {string}
             * @default 'tabs-panel'
             */
            panelClass: 'tabs-panel',

            /**
             * Class applied to the active content container.
             * @option
             * @type {string}
             * @default 'is-active'
             */
            panelActiveClass: 'is-active'
        };

        /**
         * Toggler module.
         * @module foundation.toggler
         * @requires foundation.util.motion
         * @requires foundation.util.triggers
         */

        var Toggler =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(Toggler, _Plugin);

                function Toggler() {
                    _classCallCheck(this, Toggler);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Toggler).apply(this, arguments));
                }

                _createClass(Toggler, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of Toggler.
                     * @class
                     * @name Toggler
                     * @fires Toggler#init
                     * @param {Object} element - jQuery object to add the trigger to.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Toggler.defaults, element.data(), options);
                        this.className = '';
                        this.className = 'Toggler'; // ie9 back compat
                        // Triggers init is idempotent, just need to make sure it is initialized

                        Triggers.init(_jquery2.default);

                        this._init();

                        this._events();
                    }
                    /**
                     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        var input; // Parse animation classes if they were set

                        if (this.options.animate) {
                            input = this.options.animate.split(' ');
                            this.animationIn = input[0];
                            this.animationOut = input[1] || null;
                        } // Otherwise, parse toggle class
                        else {
                            input = this.$element.data('toggler'); // Allow for a . at the beginning of the string

                            this.className = input[0] === '.' ? input.slice(1) : input;
                        } // Add ARIA attributes to triggers:


                        var id = this.$element[0].id,
                            $triggers = (0, _jquery2.default)("[data-open~=\"".concat(id, "\"], [data-close~=\"").concat(id, "\"], [data-toggle~=\"").concat(id, "\"]")); // - aria-expanded: according to the element visibility.

                        $triggers.attr('aria-expanded', !this.$element.is(':hidden')); // - aria-controls: adding the element id to it if not already in it.

                        $triggers.each(function (index, trigger) {
                            var $trigger = (0, _jquery2.default)(trigger);
                            var controls = $trigger.attr('aria-controls') || '';
                            var containsId = new RegExp("\\b".concat(RegExpEscape(id), "\\b")).test(controls);
                            if (!containsId) $trigger.attr('aria-controls', controls ? "".concat(controls, " ").concat(id) : id);
                        });
                    }
                    /**
                     * Initializes events for the toggle trigger.
                     * @function
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
                    }
                    /**
                     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
                     * @function
                     * @fires Toggler#on
                     * @fires Toggler#off
                     */

                }, {
                    key: "toggle",
                    value: function toggle() {
                        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
                    }
                }, {
                    key: "_toggleClass",
                    value: function _toggleClass() {
                        this.$element.toggleClass(this.className);
                        var isOn = this.$element.hasClass(this.className);

                        if (isOn) {
                            /**
                             * Fires if the target element has the class after a toggle.
                             * @event Toggler#on
                             */
                            this.$element.trigger('on.zf.toggler');
                        } else {
                            /**
                             * Fires if the target element does not have the class after a toggle.
                             * @event Toggler#off
                             */
                            this.$element.trigger('off.zf.toggler');
                        }

                        this._updateARIA(isOn);

                        this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');
                    }
                }, {
                    key: "_toggleAnimate",
                    value: function _toggleAnimate() {
                        var _this = this;

                        if (this.$element.is(':hidden')) {
                            Motion.animateIn(this.$element, this.animationIn, function () {
                                _this._updateARIA(true);

                                this.trigger('on.zf.toggler');
                                this.find('[data-mutate]').trigger('mutateme.zf.trigger');
                            });
                        } else {
                            Motion.animateOut(this.$element, this.animationOut, function () {
                                _this._updateARIA(false);

                                this.trigger('off.zf.toggler');
                                this.find('[data-mutate]').trigger('mutateme.zf.trigger');
                            });
                        }
                    }
                }, {
                    key: "_updateARIA",
                    value: function _updateARIA(isOn) {
                        var id = this.$element[0].id;
                        (0, _jquery2.default)("[data-open=\"".concat(id, "\"], [data-close=\"").concat(id, "\"], [data-toggle=\"").concat(id, "\"]")).attr({
                            'aria-expanded': isOn ? true : false
                        });
                    }
                    /**
                     * Destroys the instance of Toggler on the element.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.off('.zf.toggler');
                    }
                }]);

                return Toggler;
            }(Plugin);

        Toggler.defaults = {
            /**
             * Tells the plugin if the element should animated when toggled.
             * @option
             * @type {boolean}
             * @default false
             */
            animate: false
        };

        /**
         * Tooltip module.
         * @module foundation.tooltip
         * @requires foundation.util.box
         * @requires foundation.util.mediaQuery
         * @requires foundation.util.triggers
         */

        var Tooltip =
            /*#__PURE__*/
            function (_Positionable) {
                _inherits(Tooltip, _Positionable);

                function Tooltip() {
                    _classCallCheck(this, Tooltip);

                    return _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).apply(this, arguments));
                }

                _createClass(Tooltip, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of a Tooltip.
                     * @class
                     * @name Tooltip
                     * @fires Tooltip#init
                     * @param {jQuery} element - jQuery object to attach a tooltip to.
                     * @param {Object} options - object to extend the default configuration.
                     */
                    value: function _setup(element, options) {
                        this.$element = element;
                        this.options = _jquery2.default.extend({}, Tooltip.defaults, this.$element.data(), options);
                        this.className = 'Tooltip'; // ie9 back compat

                        this.isActive = false;
                        this.isClick = false; // Triggers init is idempotent, just need to make sure it is initialized

                        Triggers.init(_jquery2.default);

                        this._init();
                    }
                    /**
                     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        MediaQuery._init();

                        var elemId = this.$element.attr('aria-describedby') || GetYoDigits(6, 'tooltip');
                        this.options.tipText = this.options.tipText || this.$element.attr('title');
                        this.template = this.options.template ? (0, _jquery2.default)(this.options.template) : this._buildTemplate(elemId);

                        if (this.options.allowHtml) {
                            this.template.appendTo(document.body).html(this.options.tipText).hide();
                        } else {
                            this.template.appendTo(document.body).text(this.options.tipText).hide();
                        }

                        this.$element.attr({
                            'title': '',
                            'aria-describedby': elemId,
                            'data-yeti-box': elemId,
                            'data-toggle': elemId,
                            'data-resize': elemId
                        }).addClass(this.options.triggerClass);

                        _get(_getPrototypeOf(Tooltip.prototype), "_init", this).call(this);

                        this._events();
                    }
                }, {
                    key: "_getDefaultPosition",
                    value: function _getDefaultPosition() {
                        // handle legacy classnames
                        var position = this.$element[0].className.match(/\b(top|left|right|bottom)\b/g);
                        return position ? position[0] : 'top';
                    }
                }, {
                    key: "_getDefaultAlignment",
                    value: function _getDefaultAlignment() {
                        return 'center';
                    }
                }, {
                    key: "_getHOffset",
                    value: function _getHOffset() {
                        if (this.position === 'left' || this.position === 'right') {
                            return this.options.hOffset + this.options.tooltipWidth;
                        } else {
                            return this.options.hOffset;
                        }
                    }
                }, {
                    key: "_getVOffset",
                    value: function _getVOffset() {
                        if (this.position === 'top' || this.position === 'bottom') {
                            return this.options.vOffset + this.options.tooltipHeight;
                        } else {
                            return this.options.vOffset;
                        }
                    }
                    /**
                     * builds the tooltip element, adds attributes, and returns the template.
                     * @private
                     */

                }, {
                    key: "_buildTemplate",
                    value: function _buildTemplate(id) {
                        var templateClasses = "".concat(this.options.tooltipClass, " ").concat(this.options.templateClasses).trim();
                        var $template = (0, _jquery2.default)('<div></div>').addClass(templateClasses).attr({
                            'role': 'tooltip',
                            'aria-hidden': true,
                            'data-is-active': false,
                            'data-is-focus': false,
                            'id': id
                        });
                        return $template;
                    }
                    /**
                     * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
                     * if the tooltip is larger than the screen width, default to full width - any user selected margin
                     * @private
                     */

                }, {
                    key: "_setPosition",
                    value: function _setPosition() {
                        _get(_getPrototypeOf(Tooltip.prototype), "_setPosition", this).call(this, this.$element, this.template);
                    }
                    /**
                     * reveals the tooltip, and fires an event to close any other open tooltips on the page
                     * @fires Tooltip#closeme
                     * @fires Tooltip#show
                     * @function
                     */

                }, {
                    key: "show",
                    value: function show() {
                        if (this.options.showOn !== 'all' && !MediaQuery.is(this.options.showOn)) {
                            // console.error('The screen is too small to display this tooltip');
                            return false;
                        }

                        var _this = this;

                        this.template.css('visibility', 'hidden').show();

                        this._setPosition();

                        this.template.removeClass('top bottom left right').addClass(this.position);
                        this.template.removeClass('align-top align-bottom align-left align-right align-center').addClass('align-' + this.alignment);
                        /**
                         * Fires to close all other open tooltips on the page
                         * @event Closeme#tooltip
                         */

                        this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));
                        this.template.attr({
                            'data-is-active': true,
                            'aria-hidden': false
                        });
                        _this.isActive = true; // console.log(this.template);

                        this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {//maybe do stuff?
                        });
                        /**
                         * Fires when the tooltip is shown
                         * @event Tooltip#show
                         */

                        this.$element.trigger('show.zf.tooltip');
                    }
                    /**
                     * Hides the current tooltip, and resets the positioning class if it was changed due to collision
                     * @fires Tooltip#hide
                     * @function
                     */

                }, {
                    key: "hide",
                    value: function hide() {
                        // console.log('hiding', this.$element.data('yeti-box'));
                        var _this = this;

                        this.template.stop().attr({
                            'aria-hidden': true,
                            'data-is-active': false
                        }).fadeOut(this.options.fadeOutDuration, function () {
                            _this.isActive = false;
                            _this.isClick = false;
                        });
                        /**
                         * fires when the tooltip is hidden
                         * @event Tooltip#hide
                         */

                        this.$element.trigger('hide.zf.tooltip');
                    }
                    /**
                     * adds event listeners for the tooltip and its anchor
                     * TODO combine some of the listeners like focus and mouseenter, etc.
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        var _this = this;

                        var $template = this.template;
                        var isFocus = false;

                        if (!this.options.disableHover) {
                            this.$element.on('mouseenter.zf.tooltip', function (e) {
                                if (!_this.isActive) {
                                    _this.timeout = setTimeout(function () {
                                        _this.show();
                                    }, _this.options.hoverDelay);
                                }
                            }).on('mouseleave.zf.tooltip', ignoreMousedisappear(function (e) {
                                clearTimeout(_this.timeout);

                                if (!isFocus || _this.isClick && !_this.options.clickOpen) {
                                    _this.hide();
                                }
                            }));
                        }

                        if (this.options.clickOpen) {
                            this.$element.on('mousedown.zf.tooltip', function (e) {
                                e.stopImmediatePropagation();

                                if (_this.isClick) ; else {
                                    _this.isClick = true;

                                    if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {
                                        _this.show();
                                    }
                                }
                            });
                        } else {
                            this.$element.on('mousedown.zf.tooltip', function (e) {
                                e.stopImmediatePropagation();
                                _this.isClick = true;
                            });
                        }

                        if (!this.options.disableForTouch) {
                            this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {
                                _this.isActive ? _this.hide() : _this.show();
                            });
                        }

                        this.$element.on({
                            // 'toggle.zf.trigger': this.toggle.bind(this),
                            // 'close.zf.trigger': this.hide.bind(this)
                            'close.zf.trigger': this.hide.bind(this)
                        });
                        this.$element.on('focus.zf.tooltip', function (e) {
                            isFocus = true;

                            if (_this.isClick) {
                                // If we're not showing open on clicks, we need to pretend a click-launched focus isn't
                                // a real focus, otherwise on hover and come back we get bad behavior
                                if (!_this.options.clickOpen) {
                                    isFocus = false;
                                }

                                return false;
                            } else {
                                _this.show();
                            }
                        }).on('focusout.zf.tooltip', function (e) {
                            isFocus = false;
                            _this.isClick = false;

                            _this.hide();
                        }).on('resizeme.zf.trigger', function () {
                            if (_this.isActive) {
                                _this._setPosition();
                            }
                        });
                    }
                    /**
                     * adds a toggle method, in addition to the static show() & hide() functions
                     * @function
                     */

                }, {
                    key: "toggle",
                    value: function toggle() {
                        if (this.isActive) {
                            this.hide();
                        } else {
                            this.show();
                        }
                    }
                    /**
                     * Destroys an instance of tooltip, removes template element from the view.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tooltip').removeClass(this.options.triggerClass).removeClass('top right left bottom').removeAttr('aria-describedby data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');
                        this.template.remove();
                    }
                }]);

                return Tooltip;
            }(Positionable);

        Tooltip.defaults = {
            disableForTouch: false,

            /**
             * Time, in ms, before a tooltip should open on hover.
             * @option
             * @type {number}
             * @default 200
             */
            hoverDelay: 200,

            /**
             * Time, in ms, a tooltip should take to fade into view.
             * @option
             * @type {number}
             * @default 150
             */
            fadeInDuration: 150,

            /**
             * Time, in ms, a tooltip should take to fade out of view.
             * @option
             * @type {number}
             * @default 150
             */
            fadeOutDuration: 150,

            /**
             * Disables hover events from opening the tooltip if set to true
             * @option
             * @type {boolean}
             * @default false
             */
            disableHover: false,

            /**
             * Optional addtional classes to apply to the tooltip template on init.
             * @option
             * @type {string}
             * @default ''
             */
            templateClasses: '',

            /**
             * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
             * @option
             * @type {string}
             * @default 'tooltip'
             */
            tooltipClass: 'tooltip',

            /**
             * Class applied to the tooltip anchor element.
             * @option
             * @type {string}
             * @default 'has-tip'
             */
            triggerClass: 'has-tip',

            /**
             * Minimum breakpoint size at which to open the tooltip.
             * @option
             * @type {string}
             * @default 'small'
             */
            showOn: 'small',

            /**
             * Custom template to be used to generate markup for tooltip.
             * @option
             * @type {string}
             * @default ''
             */
            template: '',

            /**
             * Text displayed in the tooltip template on open.
             * @option
             * @type {string}
             * @default ''
             */
            tipText: '',
            touchCloseText: 'Tap to close.',

            /**
             * Allows the tooltip to remain open if triggered with a click or touch event.
             * @option
             * @type {boolean}
             * @default true
             */
            clickOpen: true,

            /**
             * Position of tooltip. Can be left, right, bottom, top, or auto.
             * @option
             * @type {string}
             * @default 'auto'
             */
            position: 'auto',

            /**
             * Alignment of tooltip relative to anchor. Can be left, right, bottom, top, center, or auto.
             * @option
             * @type {string}
             * @default 'auto'
             */
            alignment: 'auto',

            /**
             * Allow overlap of container/window. If false, tooltip will first try to
             * position as defined by data-position and data-alignment, but reposition if
             * it would cause an overflow.  @option
             * @type {boolean}
             * @default false
             */
            allowOverlap: false,

            /**
             * Allow overlap of only the bottom of the container. This is the most common
             * behavior for dropdowns, allowing the dropdown to extend the bottom of the
             * screen but not otherwise influence or break out of the container.
             * Less common for tooltips.
             * @option
             * @type {boolean}
             * @default false
             */
            allowBottomOverlap: false,

            /**
             * Distance, in pixels, the template should push away from the anchor on the Y axis.
             * @option
             * @type {number}
             * @default 0
             */
            vOffset: 0,

            /**
             * Distance, in pixels, the template should push away from the anchor on the X axis
             * @option
             * @type {number}
             * @default 0
             */
            hOffset: 0,

            /**
             * Distance, in pixels, the template spacing auto-adjust for a vertical tooltip
             * @option
             * @type {number}
             * @default 14
             */
            tooltipHeight: 14,

            /**
             * Distance, in pixels, the template spacing auto-adjust for a horizontal tooltip
             * @option
             * @type {number}
             * @default 12
             */
            tooltipWidth: 12,

            /**
             * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,
             * allowing HTML may open yourself up to XSS attacks.
             * @option
             * @type {boolean}
             * @default false
             */
            allowHtml: false
        };

        var MenuPlugins$1 = {
            tabs: {
                cssClass: 'tabs',
                plugin: Tabs
            },
            accordion: {
                cssClass: 'accordion',
                plugin: Accordion
            }
        };
        /**
         * ResponsiveAccordionTabs module.
         * @module foundation.responsiveAccordionTabs
         * @requires foundation.util.motion
         * @requires foundation.accordion
         * @requires foundation.tabs
         */

        var ResponsiveAccordionTabs =
            /*#__PURE__*/
            function (_Plugin) {
                _inherits(ResponsiveAccordionTabs, _Plugin);

                function ResponsiveAccordionTabs() {
                    _classCallCheck(this, ResponsiveAccordionTabs);

                    return _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveAccordionTabs).apply(this, arguments));
                }

                _createClass(ResponsiveAccordionTabs, [{
                    key: "_setup",

                    /**
                     * Creates a new instance of a responsive accordion tabs.
                     * @class
                     * @name ResponsiveAccordionTabs
                     * @fires ResponsiveAccordionTabs#init
                     * @param {jQuery} element - jQuery object to make into Responsive Accordion Tabs.
                     * @param {Object} options - Overrides to the default plugin settings.
                     */
                    value: function _setup(element, options) {
                        this.$element = (0, _jquery2.default)(element);
                        this.options = _jquery2.default.extend({}, this.$element.data(), options);
                        this.rules = this.$element.data('responsive-accordion-tabs');
                        this.currentMq = null;
                        this.currentPlugin = null;
                        this.className = 'ResponsiveAccordionTabs'; // ie9 back compat

                        if (!this.$element.attr('id')) {
                            this.$element.attr('id', GetYoDigits(6, 'responsiveaccordiontabs'));
                        }

                        this._init();

                        this._events();
                    }
                    /**
                     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.
                     * @function
                     * @private
                     */

                }, {
                    key: "_init",
                    value: function _init() {
                        MediaQuery._init(); // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules


                        if (typeof this.rules === 'string') {
                            var rulesTree = {}; // Parse rules from "classes" pulled from data attribute

                            var rules = this.rules.split(' '); // Iterate through every rule found

                            for (var i = 0; i < rules.length; i++) {
                                var rule = rules[i].split('-');
                                var ruleSize = rule.length > 1 ? rule[0] : 'small';
                                var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

                                if (MenuPlugins$1[rulePlugin] !== null) {
                                    rulesTree[ruleSize] = MenuPlugins$1[rulePlugin];
                                }
                            }

                            this.rules = rulesTree;
                        }

                        this._getAllOptions();

                        if (!_jquery2.default.isEmptyObject(this.rules)) {
                            this._checkMediaQueries();
                        }
                    }
                }, {
                    key: "_getAllOptions",
                    value: function _getAllOptions() {
                        //get all defaults and options
                        var _this = this;

                        _this.allOptions = {};

                        for (var key in MenuPlugins$1) {
                            if (MenuPlugins$1.hasOwnProperty(key)) {
                                var obj = MenuPlugins$1[key];

                                try {
                                    var dummyPlugin = (0, _jquery2.default)('<ul></ul>');
                                    var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);

                                    for (var keyKey in tmpPlugin.options) {
                                        if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {
                                            var objObj = tmpPlugin.options[keyKey];
                                            _this.allOptions[keyKey] = objObj;
                                        }
                                    }

                                    tmpPlugin.destroy();
                                } catch (e) {
                                }
                            }
                        }
                    }
                    /**
                     * Initializes events for the Menu.
                     * @function
                     * @private
                     */

                }, {
                    key: "_events",
                    value: function _events() {
                        this._changedZfMediaQueryHandler = this._checkMediaQueries.bind(this);
                        (0, _jquery2.default)(window).on('changed.zf.mediaquery', this._changedZfMediaQueryHandler);
                    }
                    /**
                     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
                     * @function
                     * @private
                     */

                }, {
                    key: "_checkMediaQueries",
                    value: function _checkMediaQueries() {
                        var matchedMq,
                            _this = this; // Iterate through each rule and find the last matching rule


                        _jquery2.default.each(this.rules, function (key) {
                            if (MediaQuery.atLeast(key)) {
                                matchedMq = key;
                            }
                        }); // No match? No dice

                        if (!matchedMq) return; // Plugin already initialized? We good

                        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return; // Remove existing plugin-specific CSS classes

                        _jquery2.default.each(MenuPlugins$1, function (key, value) {
                            _this.$element.removeClass(value.cssClass);
                        }); // Add the CSS class for the new plugin

                        this.$element.addClass(this.rules[matchedMq].cssClass); // Create an instance of the new plugin

                        if (this.currentPlugin) {
                            //don't know why but on nested elements data zfPlugin get's lost
                            if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);
                            this.currentPlugin.destroy();
                        }

                        this._handleMarkup(this.rules[matchedMq].cssClass);

                        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
                        this.storezfData = this.currentPlugin.$element.data('zfPlugin');
                    }
                }, {
                    key: "_handleMarkup",
                    value: function _handleMarkup(toSet) {
                        var _this = this,
                            fromString = 'accordion';

                        var $panels = (0, _jquery2.default)('[data-tabs-content=' + this.$element.attr('id') + ']');
                        if ($panels.length) fromString = 'tabs';

                        if (fromString === toSet) {
                            return;
                        }
                        var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';
                        var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';
                        this.$element.removeAttr('role');
                        var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');
                        var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');

                        if (fromString === 'tabs') {
                            $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');
                            $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');
                        } else {
                            $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');
                        }
                        $panels.css({
                            display: '',
                            visibility: ''
                        });
                        $liHeads.css({
                            display: '',
                            visibility: ''
                        });

                        if (toSet === 'accordion') {
                            $panels.each(function (key, value) {
                                (0, _jquery2.default)(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({
                                    height: ''
                                });
                                (0, _jquery2.default)('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id="tabs-placeholder-' + _this.$element.attr('id') + '"></div>').detach();
                                $liHeads.addClass('accordion-item').attr('data-accordion-item', '');
                                $liHeadsA.addClass('accordion-title');
                            });
                        } else if (toSet === 'tabs') {
                            var $tabsContent = (0, _jquery2.default)('[data-tabs-content=' + _this.$element.attr('id') + ']');
                            var $placeholder = (0, _jquery2.default)('#tabs-placeholder-' + _this.$element.attr('id'));

                            if ($placeholder.length) {
                                $tabsContent = (0, _jquery2.default)('<div class="tabs-content"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));
                                $placeholder.remove();
                            } else {
                                $tabsContent = (0, _jquery2.default)('<div class="tabs-content"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));
                            }
                            $panels.each(function (key, value) {
                                var tempValue = (0, _jquery2.default)(value).appendTo($tabsContent).addClass(tabsPanel);
                                var hash = $liHeadsA.get(key).hash.slice(1);
                                var id = (0, _jquery2.default)(value).attr('id') || GetYoDigits(6, 'accordion');

                                if (hash !== id) {
                                    if (hash !== '') {
                                        (0, _jquery2.default)(value).attr('id', hash);
                                    } else {
                                        hash = id;
                                        (0, _jquery2.default)(value).attr('id', hash);
                                        (0, _jquery2.default)($liHeadsA.get(key)).attr('href', (0, _jquery2.default)($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);
                                    }
                                }
                                var isActive = (0, _jquery2.default)($liHeads.get(key)).hasClass('is-active');

                                if (isActive) {
                                    tempValue.addClass('is-active');
                                }
                            });
                            $liHeads.addClass(tabsTitle);
                        }
                    }
                    /**
                     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
                     * @function
                     */

                }, {
                    key: "_destroy",
                    value: function _destroy() {
                        if (this.currentPlugin) this.currentPlugin.destroy();
                        (0, _jquery2.default)(window).off('changed.zf.mediaquery', this._changedZfMediaQueryHandler);
                    }
                }]);

                return ResponsiveAccordionTabs;
            }(Plugin);

        ResponsiveAccordionTabs.defaults = {};

        Foundation.addToJquery(_jquery2.default); // Add Foundation Utils to Foundation global namespace for backwards
// compatibility.

        Foundation.rtl = rtl;
        Foundation.GetYoDigits = GetYoDigits;
        Foundation.transitionend = transitionend;
        Foundation.RegExpEscape = RegExpEscape;
        Foundation.onLoad = onLoad;
        Foundation.Box = Box;
        Foundation.onImagesLoaded = onImagesLoaded;
        Foundation.Keyboard = Keyboard;
        Foundation.MediaQuery = MediaQuery;
        Foundation.Motion = Motion;
        Foundation.Move = Move;
        Foundation.Nest = Nest;
        Foundation.Timer = Timer; // Touch and Triggers previously were almost purely sede effect driven,
// so no need to add it to Foundation, just init them.

        Touch.init(_jquery2.default);
        Triggers.init(_jquery2.default, Foundation);

        MediaQuery._init();

        Foundation.plugin(Abide, 'Abide');
        Foundation.plugin(Accordion, 'Accordion');
        Foundation.plugin(AccordionMenu, 'AccordionMenu');
        Foundation.plugin(Drilldown, 'Drilldown');
        Foundation.plugin(Dropdown, 'Dropdown');
        Foundation.plugin(DropdownMenu, 'DropdownMenu');
        Foundation.plugin(Equalizer, 'Equalizer');
        Foundation.plugin(Interchange, 'Interchange');
        Foundation.plugin(Magellan, 'Magellan');
        Foundation.plugin(OffCanvas, 'OffCanvas');
        Foundation.plugin(Orbit, 'Orbit');
        Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');
        Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');
        Foundation.plugin(Reveal, 'Reveal');
        Foundation.plugin(Slider, 'Slider');
        Foundation.plugin(SmoothScroll, 'SmoothScroll');
        Foundation.plugin(Sticky, 'Sticky');
        Foundation.plugin(Tabs, 'Tabs');
        Foundation.plugin(Toggler, 'Toggler');
        Foundation.plugin(Tooltip, 'Tooltip');
        Foundation.plugin(ResponsiveAccordionTabs, 'ResponsiveAccordionTabs');

        exports.default = Foundation;
        exports.CoreUtils = foundation_core_utils;
        exports.Core = Foundation;
        exports.Box = Box;
        exports.onImagesLoaded = onImagesLoaded;
        exports.Keyboard = Keyboard;
        exports.MediaQuery = MediaQuery;
        exports.Motion = Motion;
        exports.Move = Move;
        exports.Nest = Nest;
        exports.Timer = Timer;
        exports.Touch = Touch;
        exports.Triggers = Triggers;
        exports.Abide = Abide;
        exports.Accordion = Accordion;
        exports.AccordionMenu = AccordionMenu;
        exports.Drilldown = Drilldown;
        exports.Dropdown = Dropdown;
        exports.DropdownMenu = DropdownMenu;
        exports.Equalizer = Equalizer;
        exports.Interchange = Interchange;
        exports.Magellan = Magellan;
        exports.OffCanvas = OffCanvas;
        exports.Orbit = Orbit;
        exports.ResponsiveMenu = ResponsiveMenu;
        exports.ResponsiveToggle = ResponsiveToggle;
        exports.Reveal = Reveal;
        exports.Slider = Slider;
        exports.SmoothScroll = SmoothScroll;
        exports.Sticky = Sticky;
        exports.Tabs = Tabs;
        exports.Toggler = Toggler;
        exports.Tooltip = Tooltip;
        exports.ResponsiveAccordionTabs = ResponsiveAccordionTabs;
        exports.Foundation = Foundation;
//# sourceMappingURL=foundation.esm.js.map

        /***/
    })
    /******/]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,